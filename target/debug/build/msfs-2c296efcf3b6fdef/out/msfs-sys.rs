/* automatically generated by rust-bindgen 0.59.2 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const MAX_PATH: u32 = 260;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const SIZE_OF_80387_REGISTERS: u32 = 80;
pub const MAXIMUM_SUPPORTED_EXTENSION: u32 = 512;
pub const EXCEPTION_MAXIMUM_PARAMETERS: u32 = 15;
pub const DEFAULT_CHARSET: u32 = 1;
pub const FW_DONTCARE: u32 = 0;
pub const FW_THIN: u32 = 100;
pub const FW_EXTRALIGHT: u32 = 200;
pub const FW_LIGHT: u32 = 300;
pub const FW_NORMAL: u32 = 400;
pub const FW_MEDIUM: u32 = 500;
pub const FW_SEMIBOLD: u32 = 600;
pub const FW_BOLD: u32 = 700;
pub const FW_EXTRABOLD: u32 = 800;
pub const FW_HEAVY: u32 = 900;
pub const FW_ULTRALIGHT: u32 = 200;
pub const FW_REGULAR: u32 = 400;
pub const FW_DEMIBOLD: u32 = 600;
pub const FW_ULTRABOLD: u32 = 800;
pub const FW_BLACK: u32 = 900;
pub const DT_TOP: u32 = 0;
pub const DT_LEFT: u32 = 0;
pub const DT_CENTER: u32 = 1;
pub const DT_RIGHT: u32 = 2;
pub const DT_VCENTER: u32 = 4;
pub const DT_BOTTOM: u32 = 8;
pub const DT_WORDBREAK: u32 = 16;
pub const DT_SINGLELINE: u32 = 32;
pub const DT_EXPANDTABS: u32 = 64;
pub const DT_TABSTOP: u32 = 128;
pub const DT_NOCLIP: u32 = 256;
pub const DT_EXTERNALLEADING: u32 = 512;
pub const DT_CALCRECT: u32 = 1024;
pub const DT_NOPREFIX: u32 = 2048;
pub const DT_INTERNAL: u32 = 4096;
pub const STANDARD_RIGHTS_REQUIRED: u32 = 983040;
pub const SECTION_QUERY: u32 = 1;
pub const SECTION_MAP_WRITE: u32 = 2;
pub const SECTION_MAP_READ: u32 = 4;
pub const SECTION_MAP_EXECUTE: u32 = 8;
pub const SECTION_EXTEND_SIZE: u32 = 16;
pub const SECTION_MAP_EXECUTE_EXPLICIT: u32 = 32;
pub const SECTION_ALL_ACCESS: u32 = 983071;
pub const FILE_MAP_WRITE: u32 = 2;
pub const FILE_MAP_READ: u32 = 4;
pub const FILE_MAP_ALL_ACCESS: u32 = 983071;
pub const PAGE_NOACCESS: u32 = 1;
pub const PAGE_READONLY: u32 = 2;
pub const PAGE_READWRITE: u32 = 4;
pub const PAGE_WRITECOPY: u32 = 8;
pub const HC_ACTION: u32 = 0;
pub const VK_BACK: u32 = 8;
pub const VK_TAB: u32 = 9;
pub const VK_CLEAR: u32 = 12;
pub const VK_RETURN: u32 = 13;
pub const VK_SHIFT: u32 = 16;
pub const VK_CONTROL: u32 = 17;
pub const VK_MENU: u32 = 18;
pub const VK_PAUSE: u32 = 19;
pub const VK_CAPITAL: u32 = 20;
pub const VK_KANA: u32 = 21;
pub const VK_HANGEUL: u32 = 21;
pub const VK_HANGUL: u32 = 21;
pub const VK_JUNJA: u32 = 23;
pub const VK_FINAL: u32 = 24;
pub const VK_HANJA: u32 = 25;
pub const VK_KANJI: u32 = 25;
pub const VK_ESCAPE: u32 = 27;
pub const VK_CONVERT: u32 = 28;
pub const VK_NONCONVERT: u32 = 29;
pub const VK_ACCEPT: u32 = 30;
pub const VK_MODECHANGE: u32 = 31;
pub const VK_SPACE: u32 = 32;
pub const VK_PRIOR: u32 = 33;
pub const VK_NEXT: u32 = 34;
pub const VK_END: u32 = 35;
pub const VK_HOME: u32 = 36;
pub const VK_LEFT: u32 = 37;
pub const VK_UP: u32 = 38;
pub const VK_RIGHT: u32 = 39;
pub const VK_DOWN: u32 = 40;
pub const VK_SELECT: u32 = 41;
pub const VK_PRINT: u32 = 42;
pub const VK_EXECUTE: u32 = 43;
pub const VK_SNAPSHOT: u32 = 44;
pub const VK_INSERT: u32 = 45;
pub const VK_DELETE: u32 = 46;
pub const VK_HELP: u32 = 47;
pub const VK_LWIN: u32 = 91;
pub const VK_RWIN: u32 = 92;
pub const VK_APPS: u32 = 93;
pub const VK_SLEEP: u32 = 95;
pub const VK_NUMPAD0: u32 = 96;
pub const VK_NUMPAD1: u32 = 97;
pub const VK_NUMPAD2: u32 = 98;
pub const VK_NUMPAD3: u32 = 99;
pub const VK_NUMPAD4: u32 = 100;
pub const VK_NUMPAD5: u32 = 101;
pub const VK_NUMPAD6: u32 = 102;
pub const VK_NUMPAD7: u32 = 103;
pub const VK_NUMPAD8: u32 = 104;
pub const VK_NUMPAD9: u32 = 105;
pub const VK_MULTIPLY: u32 = 106;
pub const VK_ADD: u32 = 107;
pub const VK_SEPARATOR: u32 = 108;
pub const VK_SUBTRACT: u32 = 109;
pub const VK_DECIMAL: u32 = 110;
pub const VK_DIVIDE: u32 = 111;
pub const VK_F1: u32 = 112;
pub const VK_F2: u32 = 113;
pub const VK_F3: u32 = 114;
pub const VK_F4: u32 = 115;
pub const VK_F5: u32 = 116;
pub const VK_F6: u32 = 117;
pub const VK_F7: u32 = 118;
pub const VK_F8: u32 = 119;
pub const VK_F9: u32 = 120;
pub const VK_F10: u32 = 121;
pub const VK_F11: u32 = 122;
pub const VK_F12: u32 = 123;
pub const VK_F13: u32 = 124;
pub const VK_F14: u32 = 125;
pub const VK_F15: u32 = 126;
pub const VK_F16: u32 = 127;
pub const VK_F17: u32 = 128;
pub const VK_F18: u32 = 129;
pub const VK_F19: u32 = 130;
pub const VK_F20: u32 = 131;
pub const VK_F21: u32 = 132;
pub const VK_F22: u32 = 133;
pub const VK_F23: u32 = 134;
pub const VK_F24: u32 = 135;
pub const NULLPTR: u32 = 0;
pub const CR: u32 = 13;
pub const LF: u32 = 10;
pub const FLAGS0: u32 = 0;
pub const FLAGS1: i32 = -1;
pub const BIT0: u32 = 1;
pub const BIT1: u32 = 2;
pub const BIT2: u32 = 4;
pub const BIT3: u32 = 8;
pub const BIT4: u32 = 16;
pub const BIT5: u32 = 32;
pub const BIT6: u32 = 64;
pub const BIT7: u32 = 128;
pub const BIT8: u32 = 256;
pub const BIT9: u32 = 512;
pub const BIT10: u32 = 1024;
pub const BIT11: u32 = 2048;
pub const BIT12: u32 = 4096;
pub const BIT13: u32 = 8192;
pub const BIT14: u32 = 16384;
pub const BIT15: u32 = 32768;
pub const BIT16: u32 = 65536;
pub const BIT17: u32 = 131072;
pub const BIT18: u32 = 262144;
pub const BIT19: u32 = 524288;
pub const BIT20: u32 = 1048576;
pub const BIT21: u32 = 2097152;
pub const BIT22: u32 = 4194304;
pub const BIT23: u32 = 8388608;
pub const BIT24: u32 = 16777216;
pub const BIT25: u32 = 33554432;
pub const BIT26: u32 = 67108864;
pub const BIT27: u32 = 134217728;
pub const BIT28: u32 = 268435456;
pub const BIT29: u32 = 536870912;
pub const BIT30: u32 = 1073741824;
pub const BIT31: u32 = 2147483648;
pub const UINT8_MIN: u32 = 0;
pub const UINT8_MAX: u32 = 255;
pub const SINT8_MIN: i32 = -128;
pub const SINT8_MAX: u32 = 127;
pub const UINT16_MIN: u32 = 0;
pub const UINT16_MAX: u32 = 65535;
pub const SINT16_MIN: i32 = -32768;
pub const SINT16_MAX: u32 = 32767;
pub const UINT32_MIN: u32 = 0;
pub const UINT32_MAX: u32 = 4294967295;
pub const SINT32_MAX: u32 = 2147483647;
pub const UFRAC8_MIN: u32 = 0;
pub const UFRAC8_MAX: u32 = 255;
pub const SFRAC8_MIN: i32 = -128;
pub const SFRAC8_MAX: u32 = 127;
pub const UFRAC16_MIN: u32 = 0;
pub const UFRAC16_MAX: u32 = 65535;
pub const SFRAC16_MIN: i32 = -32768;
pub const SFRAC16_MAX: u32 = 32767;
pub const UFRAC32_MIN: u32 = 0;
pub const UFRAC32_MAX: u32 = 4294967295;
pub const SFRAC32_MIN: i32 = -2147483648;
pub const SFRAC32_MAX: u32 = 2147483647;
pub const ENGINE_CONTROL_SELECT_NONE: u32 = 0;
pub const ENGINE_CONTROL_SELECT_1: u32 = 1;
pub const ENGINE_CONTROL_SELECT_2: u32 = 2;
pub const ENGINE_CONTROL_SELECT_3: u32 = 4;
pub const ENGINE_CONTROL_SELECT_4: u32 = 8;
pub const REALISM_SYSTEMS_ELEV_TRIM: u32 = 2;
pub const REALISM_SYSTEMS_GYRO_DRIFT: u32 = 4;
pub const REALISM_SYSTEMS_LIGHT_BURN: u32 = 8;
pub const REALISM_SYSTEMS_FAST_THROT: u32 = 16;
pub const REALISM_SYSTEMS_INS_LIGHTS: u32 = 32;
pub const REALISM_SYSTEMS_BARO_DRIFT: u32 = 64;
pub const LOWEST_LAYER: u32 = 0;
pub const VIEW_LAYER: u32 = 8192;
pub const MINICONTROL_LAYER: u32 = 12288;
pub const AUX_VIEW_LAYER: u32 = 16128;
pub const PANEL_LAYER: u32 = 16384;
pub const MESSAGE_LAYER: u32 = 20480;
pub const MENU_LAYER: u32 = 24576;
pub const HIGHEST_LAYER: u32 = 65535;
pub const UNIPIX_MAX_HEIGHT: u32 = 6144;
pub const UNIPIX_MAX_WIDTH: u32 = 8192;
pub const VOR_TF_FLAG_OFF: u32 = 0;
pub const VOR_TF_FLAG_TO: u32 = 1;
pub const VOR_TF_FLAG_FROM: u32 = 2;
pub const BC_FLAG_BACKCOURSE_AVAILABLE: u32 = 1;
pub const BC_FLAG_LOCALIZER_TUNED_IN: u32 = 2;
pub const BC_FLAG_ON_BACKCOURSE: u32 = 4;
pub const BC_FLAG_STATION_ACTIVE: u32 = 128;
pub const SIM_SPEED_QUARTER: u32 = 64;
pub const SIM_SPEED_HALF: u32 = 128;
pub const SIM_SPEED_1X: u32 = 256;
pub const SIM_SPEED_2X: u32 = 512;
pub const SIM_SPEED_4X: u32 = 1024;
pub const SIM_SPEED_8X: u32 = 2048;
pub const SIM_SPEED_16X: u32 = 4096;
pub const SIM_SPEED_32X: u32 = 8192;
pub const SIM_SPEED_64X: u32 = 16384;
pub const SIM_SPEED_128X: u32 = 32768;
pub const SIM_SPEED_MIN: u32 = 64;
pub const SIM_SPEED_MAX: u32 = 32768;
pub const SPOILERS_POS_OFF: u32 = 0;
pub const SPOILERS_POS_FULL: u32 = 16383;
pub const FLAPS_POS_OFF: u32 = 0;
pub const FLAPS_POS_FULL: u32 = 16383;
pub const GEAR_POS_UP: u32 = 0;
pub const GEAR_POS_DOWN: u32 = 16383;
pub const VOR_CODE_IS_LOCALIZER: u32 = 128;
pub const VOR_CODE_GLIDESLOPE: u32 = 64;
pub const VOR_CODE_BACKCOURSE_UNAVAIL: u32 = 32;
pub const VOR_CODE_DME_AT_GLIDE_SLOPE: u32 = 16;
pub const VOR_CODE_NAV_UNAVAILABLE: u32 = 8;
pub const VOR_CODE_VOICE_AVAILABLE: u32 = 4;
pub const VOR_CODE_TACAN: u32 = 2;
pub const VOR_CODE_DME_AVAILABLE: u32 = 1;
pub const ENG_STARTER_MAGNETO_OFF: u32 = 0;
pub const ENG_STARTER_MAGNETO_RIGHT: u32 = 1;
pub const ENG_STARTER_MAGNETO_LEFT: u32 = 2;
pub const ENG_STARTER_MAGNETO_BOTH: u32 = 3;
pub const ENG_STARTER_MAGNETO_START: u32 = 4;
pub const ENG_STARTER_STARTER_OFF: u32 = 0;
pub const ENG_STARTER_STARTER_START: u32 = 1;
pub const ENG_STARTER_STARTER_GEN: u32 = 2;
pub const GST_UNUSED: u32 = 0;
pub const GST_ACTIVE: u32 = 1;
pub const GST_GEAR: u32 = 2;
pub const GST_SCRAPE: u32 = 4;
pub const GSN_CENTER_GEAR: u32 = 0;
pub const GSN_LEFT_GEAR: u32 = 1;
pub const GSN_RIGHT_GEAR: u32 = 2;
pub const GSN_AUX_GEAR: u32 = 3;
pub const GSN_RIGHT_WING_SCRAPE: u32 = 4;
pub const GSN_LEFT_WING_SCRAPE: u32 = 5;
pub const GSN_FUSELAGE_SCRAPE: u32 = 6;
pub const GSN_XTAIL_SCRAPE: u32 = 7;
pub const GSN_AUX1_SCRAPE: u32 = 8;
pub const GSN_AUX2_SCRAPE: u32 = 9;
pub const TANK_MAIN_RIGHT: u32 = 0;
pub const TANK_MAIN_LEFT: u32 = 1;
pub const TANK_AUX_RIGHT: u32 = 2;
pub const TANK_AUX_LEFT: u32 = 3;
pub const TANK_TIP_RIGHT: u32 = 4;
pub const TANK_TIP_LEFT: u32 = 5;
pub const TANK_CENTER: u32 = 6;
pub const TANK_CENTER2: u32 = 7;
pub const TANK_CENTER3: u32 = 8;
pub const TANK_EXTERNAL1: u32 = 9;
pub const TANK_EXTERNAL2: u32 = 10;
pub const GEAR_TYPE_FIXED: u32 = 0;
pub const GEAR_TYPE_RETRACTABLE: u32 = 1;
pub const GEAR_TYPE_SKIDS: u32 = 2;
pub const GEAR_TYPE_FLOATS: u32 = 3;
pub const GEAR_TYPE_SKIS: u32 = 4;
pub const TIME_OF_DAY_DAY: u32 = 1;
pub const TIME_OF_DAY_DAWN: u32 = 2;
pub const TIME_OF_DAY_DUSK: u32 = 2;
pub const TIME_OF_DAY_NIGHT: u32 = 4;
pub const FS_REG_BASE: &[u8; 57usize] =
    b"SOFTWARE\\Microsoft\\Microsoft Games\\Flight Simulator\\10.0\0";
pub const HELPID_MIN: u32 = 40960;
pub const HELPID_CESS: u32 = 40960;
pub const HELPID_CESS_CARB_HEAT: u32 = 40975;
pub const HELPID_CESS_FUEL_PUMP_TOGGLE: u32 = 41020;
pub const HELPID_CESS_PRIMER_SWITCH: u32 = 41021;
pub const HELPID_LEAR: u32 = 41216;
pub const HELPID_LEAR_AOA: u32 = 41220;
pub const HELPID_LEAR_COM_RADIO: u32 = 41255;
pub const HELPID_LEAR_NAV1: u32 = 41256;
pub const HELPID_LEAR_NAV2: u32 = 41257;
pub const HELPID_LEAR_MACH: u32 = 41272;
pub const HELPID_LEAR_VOR2_NEEDLE_TOGGLE: u32 = 41277;
pub const HELPID_LEAR_ADF_NEEDLE_TOGGLE: u32 = 41438;
pub const HELPID_LEAR_MACH_INDICATOR: u32 = 41441;
pub const HELPID_LEAR_FUEL_STANDBY: u32 = 41445;
pub const HELPID_SOPWITH: u32 = 41472;
pub const HELPID_SOPWITH_OILP: u32 = 41477;
pub const HELPID_SOPWITH_MAG: u32 = 41478;
pub const HELPID_SCHWEIZER: u32 = 41728;
pub const HELPID_SCHWEIZER_ASI: u32 = 41730;
pub const HELPID_SCHWEIZER_VSI: u32 = 41734;
pub const HELPID_B737: u32 = 41984;
pub const HELPID_B737_OIL_QUANT: u32 = 42010;
pub const HELPID_B737_HYDRAULIC: u32 = 42011;
pub const HELPID_B737_TOTAL_AIR_TEMP: u32 = 42033;
pub const HELPID_B737_VIBRATION: u32 = 42035;
pub const HELPID_B737_HYDRAULIC_QTY: u32 = 42036;
pub const HELPID_B737_AUTOPILOT_IAS_MACH_SELECT: u32 = 42039;
pub const HELPID_B737_TO_GA: u32 = 42040;
pub const HELPID_B737_AUTOTHROTTLE: u32 = 42041;
pub const HELPID_B737_REFERENCE_N1: u32 = 42042;
pub const HELPID_B737_N1_SET: u32 = 42043;
pub const HELPID_B737_TAKEOFF_POWER_ACTIVE: u32 = 42052;
pub const HELPID_B737_AT_LIM: u32 = 42054;
pub const HELPID_B737_FLAPS_EXT_LIGHT: u32 = 42056;
pub const HELPID_B737_FLAPS_TRANSIT_LIGHT: u32 = 42057;
pub const HELPID_B737_OIL_PRESSURE_LIGHT: u32 = 42058;
pub const HELPID_B737_REVERSER_UNLOCKED: u32 = 42059;
pub const HELPID_B737_START_VALVE_LIGHT: u32 = 42060;
pub const HELPID_B737_START_LEVERS: u32 = 42065;
pub const HELPID_EXTRA: u32 = 42240;
pub const HELPID_EXTR_SMOKE: u32 = 42259;
pub const HELPID_EXTR_ACRO_TANK: u32 = 42260;
pub const HELPID_EXTR_MAIN_TANK: u32 = 42261;
pub const HELPID_EXTR_G_METER: u32 = 42268;
pub const HELPID_EXTR_G_METER_RESET: u32 = 42279;
pub const HELPID_EXTR_PEDAL_SWITCH_LEFT: u32 = 42285;
pub const HELPID_EXTR_PEDAL_SWITCH_RIGHT: u32 = 42286;
pub const HELPID_EXTR_LOW_VOLT: u32 = 42287;
pub const HELPID_BELL: u32 = 42496;
pub const HELPID_BELL_XMISSION_PSI: u32 = 42498;
pub const HELPID_BELL_XMISSION_TEMP: u32 = 42499;
pub const HELPID_BELL_GEN_LOAD: u32 = 42501;
pub const HELPID_BELL_TURBINE_TEMP: u32 = 42504;
pub const HELPID_BELL_GAS_PRODUCER: u32 = 42505;
pub const HELPID_BELL_ROTOR_TURBINE: u32 = 42508;
pub const HELPID_BELL_CYCLIC_FA: u32 = 42518;
pub const HELPID_BELL_CYCLIC_LR: u32 = 42519;
pub const HELPID_BELL_ANTI_TORQUE_ROTOR: u32 = 42520;
pub const HELPID_BELL_FUEL_VALVE: u32 = 42521;
pub const HELPID_BELL_GOVERNOR: u32 = 42522;
pub const HELPID_BELL_THROTTLE: u32 = 42523;
pub const HELPID_LSO: u32 = 42880;
pub const HELPID_LSO_WINDOW: u32 = 42880;
pub const HELPID_CONCORDE: u32 = 43520;
pub const HELPID_CONCORDE_ACCELEROMETER: u32 = 43520;
pub const HELPID_CONCORDE_ANGLE_OF_ATTACK: u32 = 43521;
pub const HELPID_CONCORDE_SPEED_SELECT: u32 = 43522;
pub const HELPID_CONCORDE_AIRSPEED_MODE_SWITCH: u32 = 43523;
pub const HELPID_CONCORDE_DISCREPANCY_LIGHT: u32 = 43524;
pub const HELPID_CONCORDE_MACHMETER: u32 = 43525;
pub const HELPID_CONCORDE_ALTIMETER_MODE_SWITCH: u32 = 43526;
pub const HELPID_CONCORDE_ATTITUDE_TEST: u32 = 43527;
pub const HELPID_CONCORDE_CHECK_ATT: u32 = 43528;
pub const HELPID_CONCORDE_ATTITUDE_DH: u32 = 43529;
pub const HELPID_CONCORDE_PITCH_INDEX_KNOB: u32 = 43530;
pub const HELPID_CONCORDE_HSI_FAIL: u32 = 43531;
pub const HELPID_CONCORDE_HSI_SWITCH: u32 = 43532;
pub const HELPID_CONCORDE_HSI_MILES: u32 = 43533;
pub const HELPID_CONCORDE_HSI_SPEED: u32 = 43534;
pub const HELPID_CONCORDE_SIDESLIP: u32 = 43535;
pub const HELPID_CONCORDE_DME_DISTANCE: u32 = 43536;
pub const HELPID_CONCORDE_DME_SPEED: u32 = 43537;
pub const HELPID_CONCORDE_DME_TIME: u32 = 43538;
pub const HELPID_CONCORDE_DME_SWITCH: u32 = 43539;
pub const HELPID_CONCORDE_RADIO_ALTIMETER: u32 = 43540;
pub const HELPID_CONCORDE_RADIO_ALTIMETER_TEST: u32 = 43541;
pub const HELPID_CONCORDE_RADIO_ALTIMETER_KNOB: u32 = 43542;
pub const HELPID_CONCORDE_TOTAL_FUEL: u32 = 43543;
pub const HELPID_CONCORDE_CENTER_GRAVITY: u32 = 43544;
pub const HELPID_CONCORDE_CENTER_GRAVITY_LIGHT: u32 = 43545;
pub const HELPID_CONCORDE_TEMPERATURE_TOTAL: u32 = 43546;
pub const HELPID_CONCORDE_TEMPERATURE_STATIC: u32 = 43547;
pub const HELPID_CONCORDE_TEMPERATURE_ISA: u32 = 43548;
pub const HELPID_CONCORDE_GMT: u32 = 43549;
pub const HELPID_CONCORDE_TIMER: u32 = 43550;
pub const HELPID_CONCORDE_CLOCK_MODE_SWITCH: u32 = 43551;
pub const HELPID_CONCORDE_CLOCK_START_STOP: u32 = 43552;
pub const HELPID_CONCORDE_CLOCK_FAST_SLOW: u32 = 43553;
pub const HELPID_CONCORDE_ENGINE_MANAGE_LIGHTS: u32 = 43554;
pub const HELPID_CONCORDE_ENGINE_MANAGE_GO: u32 = 43555;
pub const HELPID_CONCORDE_ENGINE_MANAGE_FAILURE: u32 = 43556;
pub const HELPID_CONCORDE_ENGINE_MANAGE_REVERSE: u32 = 43557;
pub const HELPID_CONCORDE_ENGINE_FUEL: u32 = 43558;
pub const HELPID_CONCORDE_ENGINE_FUEL_SETTING_KNOB: u32 = 43559;
pub const HELPID_CONCORDE_ENGINE_EGT: u32 = 43560;
pub const HELPID_CONCORDE_ENGINE_AREA: u32 = 43561;
pub const HELPID_CONCORDE_ENGINE_FAILURE_LIGHT: u32 = 43562;
pub const HELPID_CONCORDE_ENGINE_AFTERBURNER_LIGHT: u32 = 43563;
pub const HELPID_CONCORDE_VISOR_NOSE_LEVER: u32 = 43564;
pub const HELPID_CONCORDE_VISOR_INDICATOR: u32 = 43565;
pub const HELPID_CONCORDE_NOSE_INDICATOR: u32 = 43566;
pub const HELPID_CONCORDE_LEFT_GEAR_UNLOCKED: u32 = 43567;
pub const HELPID_CONCORDE_RIGHT_GEAR_UNLOCKED: u32 = 43568;
pub const HELPID_CONCORDE_UP_GEAR_UNLOCKED: u32 = 43569;
pub const HELPID_CONCORDE_GEAR_TRANSIT: u32 = 43570;
pub const HELPID_CONCORDE_LEFT_GEAR_DOWN: u32 = 43571;
pub const HELPID_CONCORDE_NOSE_GEAR_DOWN: u32 = 43572;
pub const HELPID_CONCORDE_TAIL_GEAR_DOWN: u32 = 43573;
pub const HELPID_CONCORDE_RIGHT_GEAR_DOWN: u32 = 43574;
pub const HELPID_CONCORDE_CONTROL_SURFACE: u32 = 43575;
pub const HELPID_CONCORDE_CONTROL_SURFACE_RESET: u32 = 43576;
pub const HELPID_CONCORDE_CONTROL_SURFACE_TEST: u32 = 43577;
pub const HELPID_CONCORDE_CONTROL_SURFACE_LIGHTS: u32 = 43578;
pub const HELPID_CONCORDE_TURB_MODE: u32 = 43579;
pub const HELPID_CONCORDE_MAX_CLIMB: u32 = 43580;
pub const HELPID_CONCORDE_MAX_CRUISE: u32 = 43581;
pub const HELPID_CONCORDE_MASTER_WARNING: u32 = 43582;
pub const HELPID_CONCORDE_FUEL_QUANTITY: u32 = 43583;
pub const HELPID_CONCORDE_LOW_FUEL_LIGHT: u32 = 43584;
pub const HELPID_CONCORDE_FUEL_CROSSFEED: u32 = 43585;
pub const HELPID_CONCORDE_FUEL_PUMP: u32 = 43586;
pub const HELPID_CONCORDE_MASTER_SWITCH: u32 = 43587;
pub const HELPID_CONCORDE_ENGINE_START: u32 = 43588;
pub const HELPID_CONCORDE_GENERATOR: u32 = 43589;
pub const HELPID_CONCORDE_THROTTLES: u32 = 43590;
pub const HELPID_CONCORDE_REHEAT: u32 = 43591;
pub const HELPID_CONCORDE_THROTTLE_FAILURE: u32 = 43592;
pub const HELPID_CONCORDE_BRAKE: u32 = 43593;
pub const HELPID_CONCORDE_WARNING_CG: u32 = 43594;
pub const HELPID_CONCORDE_WARNING_ELECTRICAL: u32 = 43595;
pub const HELPID_CONCORDE_WARNING_ENGINE: u32 = 43596;
pub const HELPID_CONCORDE_WARNING_FUEL: u32 = 43597;
pub const HELPID_CONCORDE_WARNING_ICE: u32 = 43598;
pub const HELPID_CONCORDE_WARNING_AIR: u32 = 43599;
pub const HELPID_CONCORDE_WARNING_TRIM: u32 = 43600;
pub const HELPID_CONCORDE_WARNING_INTAKE: u32 = 43601;
pub const HELPID_CONCORDE_WARNING_HYDRAULIC: u32 = 43602;
pub const HELPID_CONCORDE_WARNING_SMOKE: u32 = 43603;
pub const HELPID_CONCORDE_RADIO_ADF: u32 = 43604;
pub const HELPID_CONCORDE_RADIO_ADF_SET: u32 = 43605;
pub const HELPID_CONCORDE_RADIO_ADF_FREQUENCY: u32 = 43606;
pub const HELPID_CONCORDE_RADIO_ADF_IDENT: u32 = 43607;
pub const HELPID_CONCORDE_RADIO_ADF_TEST: u32 = 43608;
pub const HELPID_CONCORDE_RADIO_COMM1: u32 = 43609;
pub const HELPID_CONCORDE_RADIO_COMM2: u32 = 43610;
pub const HELPID_CONCORDE_RADIO_COMM_FREQUENCY: u32 = 43611;
pub const HELPID_CONCORDE_RADIO_COMM_FREQUENCY_STBY: u32 = 43612;
pub const HELPID_CONCORDE_RADIO_COMM_SET: u32 = 43613;
pub const HELPID_CONCORDE_RADIO_COMM_SET_STBY: u32 = 43614;
pub const HELPID_CONCORDE_RADIO_COMM_LIGHT: u32 = 43615;
pub const HELPID_CONCORDE_RADIO_COMM_SWITCH: u32 = 43616;
pub const HELPID_CONCORDE_RADIO_TRANSPONDER: u32 = 43617;
pub const HELPID_CONCORDE_RADIO_TRANSPONDER_ID: u32 = 43618;
pub const HELPID_CONCORDE_RADIO_TRANSPONDER_SET_ID: u32 = 43619;
pub const HELPID_CONCORDE_RADIO_TRANSPONDER_MODE: u32 = 43620;
pub const HELPID_CONCORDE_RADIO_TRANSPONDER_POSITION: u32 = 43621;
pub const HELPID_CONCORDE_RADIO_LIGHTS: u32 = 43622;
pub const HELPID_CONCORDE_BATTERY_SWITCH: u32 = 43623;
pub const HELPID_CONCORDE_AVIONICS_SWITCH: u32 = 43624;
pub const HELPID_CONCORDE_THROTTLES_REVERSE: u32 = 43625;
pub const HELPID_CONCORDE_VOR_BEARING: u32 = 43626;
pub const HELPID_CONCORDE_LIGHT_SWITCH_ANTI_COLLISION: u32 = 43627;
pub const HELPID_777: u32 = 44032;
pub const HELPID_777_AUTOPILOT: u32 = 44032;
pub const HELPID_777_ENGINE_AUTOSTART: u32 = 44033;
pub const HELPID_MOONEY: u32 = 44160;
pub const HELPID_MOONEY_STANDBY_VAC_SWITCH: u32 = 44160;
pub const HELPID_MOONEY_PROP_DEICE: u32 = 44161;
pub const HELPID_MOONEY_SPEED_BRAKE: u32 = 44162;
pub const HELPID_KINGAIR: u32 = 44288;
pub const HELPID_KINGAIR_AUTOFEATHER_LIGHT: u32 = 44288;
pub const HELPID_KINGAIR_AUTOFEATHER_SWITCH: u32 = 44289;
pub const HELPID_KINGAIR_PROP_SYNC_SWITCH: u32 = 44290;
pub const HELPID_KINGAIR_PROP_SYNCHROSCOPE: u32 = 44291;
pub const HELPID_KINGAIR_PROP_LEVERS: u32 = 44292;
pub const HELPID_KINGAIR_CONDITION_LEVERS: u32 = 44293;
pub const HELPID_CFS: u32 = 43008;
pub const HELPID_SPITFIRE_ENGINE_TEMP: u32 = 43008;
pub const HELPID_SPITFIRE_GEAR: u32 = 43009;
pub const HELPID_SPITFIRE_OIL_TEMP: u32 = 43010;
pub const HELPID_SPITFIRE_STARTER: u32 = 43011;
pub const HELPID_SPITFIRE_MAGNETO: u32 = 43012;
pub const HELPID_SPITFIRE_OIL_PRESSURE: u32 = 43013;
pub const HELPID_SPITFIRE_FLAPS: u32 = 43014;
pub const HELPID_SPITFIRE_CLOCK: u32 = 43016;
pub const HELPID_SPITFIRE_AIRSPEED: u32 = 43017;
pub const HELPID_SPITFIRE_ATTITUDE: u32 = 43018;
pub const HELPID_SPITFIRE_VERTICAL_SPEED: u32 = 43019;
pub const HELPID_SPITFIRE_ALTIMETER: u32 = 43020;
pub const HELPID_SPITFIRE_DG: u32 = 43021;
pub const HELPID_SPITFIRE_TURN_BANK: u32 = 43022;
pub const HELPID_SPITFIRE_WARNING_LIGHT: u32 = 43023;
pub const HELPID_SPITFIRE_BOOST_PRESSURE: u32 = 43024;
pub const HELPID_SPITFIRE_FUEL_SELECTOR: u32 = 43025;
pub const HELPID_SPITFIRE_TACHOMETER: u32 = 43026;
pub const HELPID_SPITFIRE_FUEL: u32 = 43027;
pub const HELPID_SPITFIRE_THROTTLE: u32 = 43028;
pub const HELPID_SPITFIRE_MIXTURE: u32 = 43029;
pub const HELPID_SPITFIRE_PROP: u32 = 43030;
pub const HELPID_FW190A_GEAR: u32 = 43058;
pub const HELPID_FW190A_CLOCK: u32 = 43059;
pub const HELPID_FW190A_OIL_TEMP: u32 = 43060;
pub const HELPID_FW190A_ATTITUDE: u32 = 43061;
pub const HELPID_FW190A_DG: u32 = 43062;
pub const HELPID_FW190A_OIL_PRESSURE: u32 = 43063;
pub const HELPID_FW190A_FUEL: u32 = 43064;
pub const HELPID_FW190A_WARNING_LIGHT: u32 = 43065;
pub const HELPID_FW190A_STARTER: u32 = 43066;
pub const HELPID_FW190A_FLAPS: u32 = 43067;
pub const HELPID_FW190A_AIRSPEED: u32 = 43068;
pub const HELPID_FW190A_ALTIMETER: u32 = 43069;
pub const HELPID_FW190A_VERTICAL_SPEED: u32 = 43070;
pub const HELPID_FW190A_TACHOMETER: u32 = 43071;
pub const HELPID_FW190A_BOOST_PRESSURE: u32 = 43072;
pub const HELPID_FW190A_FUEL_SELECTOR: u32 = 43073;
pub const HELPID_FW190A_THROTTLE: u32 = 43074;
pub const HELPID_FW190A_MIXTURE: u32 = 43075;
pub const HELPID_FW190A_PROP: u32 = 43076;
pub const HELPID_P51_FLAPS: u32 = 43108;
pub const HELPID_P51_MAGNETO: u32 = 43109;
pub const HELPID_P51_GEAR: u32 = 43110;
pub const HELPID_P51_STARTER: u32 = 43111;
pub const HELPID_P51_CLOCK: u32 = 43112;
pub const HELPID_P51_ENGINE_TEMP: u32 = 43114;
pub const HELPID_P51_AIRSPEED: u32 = 43115;
pub const HELPID_P51_DG: u32 = 43116;
pub const HELPID_P51_ATTITUDE: u32 = 43117;
pub const HELPID_P51_MANIFOLD_PRESSURE: u32 = 43118;
pub const HELPID_P51_ALTIMETER: u32 = 43119;
pub const HELPID_P51_TURN_BANK: u32 = 43120;
pub const HELPID_P51_VERTICAL_SPEED: u32 = 43121;
pub const HELPID_P51_TACHOMETER: u32 = 43122;
pub const HELPID_P51_FUEL_SELECTOR: u32 = 43123;
pub const HELPID_P51_FUEL: u32 = 43124;
pub const HELPID_P51_ENGINE: u32 = 43125;
pub const HELPID_P51_THROTTLE: u32 = 43126;
pub const HELPID_P51_MIXTURE: u32 = 43127;
pub const HELPID_P51_PROP: u32 = 43128;
pub const HELPID_BF109_STARTER: u32 = 43158;
pub const HELPID_BF109_MAGNETO: u32 = 43159;
pub const HELPID_BF109_GEAR: u32 = 43160;
pub const HELPID_BF109_FLAPS: u32 = 43161;
pub const HELPID_BF109_CLOCK: u32 = 43162;
pub const HELPID_BF109_GUNSIGHT: u32 = 43163;
pub const HELPID_BF109_ALTIMETER: u32 = 43164;
pub const HELPID_BF109_DG: u32 = 43165;
pub const HELPID_BF109_TACHOMETER: u32 = 43166;
pub const HELPID_BF109_AIRSPEED: u32 = 43167;
pub const HELPID_BF109_ENGINE_TEMP: u32 = 43168;
pub const HELPID_BF109_TURN_BANK: u32 = 43169;
pub const HELPID_BF109_WARNING_LIGHT: u32 = 43170;
pub const HELPID_BF109_BOOST_PRESSURE: u32 = 43171;
pub const HELPID_BF109_OIL_TEMP: u32 = 43172;
pub const HELPID_BF109_FUEL: u32 = 43173;
pub const HELPID_BF109_FUEL_OIL_PRESSURE: u32 = 43174;
pub const HELPID_BF109_THROTTLE: u32 = 43175;
pub const HELPID_BF109_MIXTURE: u32 = 43176;
pub const HELPID_BF109_PROP: u32 = 43177;
pub const HELPID_HURRICANE_GEAR: u32 = 43208;
pub const HELPID_HURRICANE_FUEL_SELECTOR: u32 = 43209;
pub const HELPID_HURRICANE_FUEL: u32 = 43210;
pub const HELPID_HURRICANE_ENGINE_TEMP: u32 = 43211;
pub const HELPID_HURRICANE_STARTER: u32 = 43212;
pub const HELPID_HURRICANE_MAGNETO: u32 = 43213;
pub const HELPID_HURRICANE_WARNING_LIGHT: u32 = 43214;
pub const HELPID_HURRICANE_CLOCK: u32 = 43215;
pub const HELPID_HURRICANE_AIRSPEED: u32 = 43216;
pub const HELPID_HURRICANE_ATTITUDE: u32 = 43217;
pub const HELPID_HURRICANE_VERTICAL_SPEED: u32 = 43218;
pub const HELPID_HURRICANE_ALTIMETER: u32 = 43219;
pub const HELPID_HURRICANE_DG: u32 = 43220;
pub const HELPID_HURRICANE_TURN_BANK: u32 = 43221;
pub const HELPID_HURRICANE_TACHOMETER: u32 = 43222;
pub const HELPID_HURRICANE_OIL_PRESSURE: u32 = 43223;
pub const HELPID_HURRICANE_BOOST_PRESSURE: u32 = 43224;
pub const HELPID_HURRICANE_OIL_TEMP: u32 = 43225;
pub const HELPID_HURRICANE_FLAPS: u32 = 43226;
pub const HELPID_HURRICANE_THROTTLE: u32 = 43227;
pub const HELPID_HURRICANE_MIXTURE: u32 = 43228;
pub const HELPID_HURRICANE_PROP: u32 = 43229;
pub const HELPID_P47_FUEL_SELECTOR: u32 = 43258;
pub const HELPID_P47_FUEL: u32 = 43259;
pub const HELPID_P47_WARNING_LIGHT: u32 = 43260;
pub const HELPID_P47_CLOCK: u32 = 43261;
pub const HELPID_P47_AIRSPEED: u32 = 43262;
pub const HELPID_P47_TURN_BANK: u32 = 43263;
pub const HELPID_P47_ATTITUDE: u32 = 43264;
pub const HELPID_P47_TACHOMETER: u32 = 43265;
pub const HELPID_P47_ENGINE: u32 = 43266;
pub const HELPID_P47_FLAPS_GEAR: u32 = 43267;
pub const HELPID_P47_STARTER: u32 = 43268;
pub const HELPID_P47_MAGNETO: u32 = 43269;
pub const HELPID_P47_ALTIMETER: u32 = 43270;
pub const HELPID_P47_DG: u32 = 43271;
pub const HELPID_P47_VERTICAL_SPEED: u32 = 43272;
pub const HELPID_P47_MANIFOLD_PRESSURE: u32 = 43273;
pub const HELPID_P47_ENGINE_TEMP: u32 = 43274;
pub const HELPID_P47_THROTTLE: u32 = 43275;
pub const HELPID_P47_MIXTURE: u32 = 43276;
pub const HELPID_P47_PROP: u32 = 43277;
pub const HELPID_WILDCAT_PROP: u32 = 43278;
pub const HELPID_WILDCAT_FUEL_SELECTOR: u32 = 43279;
pub const HELPID_RADIO: u32 = 42752;
pub const HELPID_RADIO_NAV1: u32 = 42752;
pub const HELPID_RADIO_COMM1: u32 = 42753;
pub const HELPID_RADIO_NAV2: u32 = 42754;
pub const HELPID_RADIO_COMM2: u32 = 42755;
pub const HELPID_RADIO_DME: u32 = 42756;
pub const HELPID_RADIO_DME_KT: u32 = 42757;
pub const HELPID_RADIO_DME_NM: u32 = 42758;
pub const HELPID_RADIO_DME_MIN: u32 = 42759;
pub const HELPID_RADIO_DME_N1_N2_SELECT: u32 = 42760;
pub const HELPID_RADIO_ADF_RADIO: u32 = 42761;
pub const HELPID_RADIO_TRANSPONDER: u32 = 42762;
pub const HELPID_RADIO_RADIOS_OPEN: u32 = 42763;
pub const HELPID_RADIO_AP_RADIO: u32 = 42764;
pub const HELPID_RADIO_SWITCH_STANDBY_FREQUENCY: u32 = 42765;
pub const HELPID_RADIO_COMM_SELECT: u32 = 42766;
pub const HELPID_RADIO_COMM_FREQ: u32 = 42767;
pub const HELPID_RADIO_COMM1_SELECT: u32 = 42768;
pub const HELPID_RADIO_COMM1_FREQ: u32 = 42769;
pub const HELPID_RADIO_COMM2_SELECT: u32 = 42770;
pub const HELPID_RADIO_COMM2_FREQ: u32 = 42771;
pub const HELPID_RADIO_NAV1_SELECT: u32 = 42772;
pub const HELPID_RADIO_NAV1_FREQ: u32 = 42773;
pub const HELPID_RADIO_NAV2_SELECT: u32 = 42774;
pub const HELPID_RADIO_NAV2_FREQ: u32 = 42775;
pub const HELPID_RADIO_ADF: u32 = 42776;
pub const HELPID_RADIO_AUTOPILOT: u32 = 42777;
pub const HELPID_RADIO_OPEN_STACK: u32 = 42778;
pub const HELPID_RADIO_DME_IND: u32 = 42779;
pub const HELPID_GPS_MODE: u32 = 42780;
pub const HELPID_GPS_DIRECT: u32 = 42781;
pub const HELPID_GPS_MENU: u32 = 42782;
pub const HELPID_GPS_ARROWS: u32 = 42783;
pub const HELPID_GPS_ENTER: u32 = 42784;
pub const HELPID_GPS_CANCEL: u32 = 42785;
pub const HELPID_RADIO_AUDIO: u32 = 42786;
pub const HELPID_AUTOPILOT: u32 = 44416;
pub const HELPID_AUTOPILOT_WING_LEVELER: u32 = 44416;
pub const HELPID_AUTOPILOT_IAS_HOLD: u32 = 44417;
pub const HELPID_AUTOPILOT_BC_HOLD: u32 = 44418;
pub const HELPID_AUTOPILOT_APP_HOLD: u32 = 44419;
pub const HELPID_AUTOPILOT_YAW_DAMP_HOLD: u32 = 44420;
pub const HELPID_AUTOPILOT_NAV_HOLD: u32 = 44421;
pub const HELPID_AUTOPILOT_NAV_INDICATOR: u32 = 44422;
pub const HELPID_AUTOPILOT_HEADING_HOLD: u32 = 44423;
pub const HELPID_AUTOPILOT_HEADING_INDICATOR: u32 = 44424;
pub const HELPID_AUTOPILOT_IAS_ACQUIRE_HOLD: u32 = 44425;
pub const HELPID_AUTOPILOT_VSI_HOLD: u32 = 44426;
pub const HELPID_AUTOPILOT_VSI_INDICATOR: u32 = 44427;
pub const HELPID_AUTOPILOT_ALTITUDE_HOLD: u32 = 44428;
pub const HELPID_AUTOPILOT_ALTITUDE_INDICATOR: u32 = 44429;
pub const HELPID_AUTOPILOT_SPEED_HOLD: u32 = 44430;
pub const HELPID_AUTOPILOT_SPEED_INDICATOR: u32 = 44431;
pub const HELPID_AUTOPILOT_FLIGHT_DIRECTOR_SWITCH: u32 = 44432;
pub const HELPID_AUTOPILOT_AUTOTHROTTLE: u32 = 44433;
pub const HELPID_AUTOPILOT_MACH_HOLD: u32 = 44434;
pub const HELPID_AUTOPILOT_MACH_INDICATOR: u32 = 44435;
pub const HELPID_AUTOPILOT_VSI_WHEEL: u32 = 44436;
pub const HELPID_GAUGE: u32 = 43776;
pub const HELPID_GAUGE_ADF: u32 = 43776;
pub const HELPID_GAUGE_ADF_SET: u32 = 43777;
pub const HELPID_GAUGE_AIRSPEED: u32 = 43778;
pub const HELPID_GAUGE_AIRSPEED_STRIP: u32 = 43779;
pub const HELPID_GAUGE_ALTERNATOR_SWITCH: u32 = 43780;
pub const HELPID_GAUGE_ALTERNATOR_SWITCH_LEFT: u32 = 43781;
pub const HELPID_GAUGE_ALTERNATOR_SWITCH_RIGHT: u32 = 43782;
pub const HELPID_GAUGE_ALTIMETER: u32 = 43783;
pub const HELPID_GAUGE_ALTIMETER_SET: u32 = 43784;
pub const HELPID_GAUGE_ALTIMETER_STRIP: u32 = 43785;
pub const HELPID_GAUGE_ALTITUDE_ALERTER: u32 = 43786;
pub const HELPID_GAUGE_AMMETER: u32 = 43787;
pub const HELPID_GAUGE_ANNUNCIATOR: u32 = 43788;
pub const HELPID_GAUGE_ATTITUDE_INDICATOR: u32 = 43789;
pub const HELPID_GAUGE_AUTOPILOT_MASTER: u32 = 43790;
pub const HELPID_GAUGE_AVIONICS_SWITCH: u32 = 43791;
pub const HELPID_GAUGE_BACKUP_AIRSPEED: u32 = 43792;
pub const HELPID_GAUGE_BACKUP_ALTIMETER: u32 = 43793;
pub const HELPID_GAUGE_BACKUP_ATTITUDE: u32 = 43794;
pub const HELPID_GAUGE_BATTERY_SWITCH: u32 = 43795;
pub const HELPID_GAUGE_BOOST_PUMP_SWITCH: u32 = 43796;
pub const HELPID_GAUGE_CHT: u32 = 43797;
pub const HELPID_GAUGE_CLOCK: u32 = 43798;
pub const HELPID_GAUGE_COWL_FLAPS: u32 = 43799;
pub const HELPID_GAUGE_COWL_FLAPS_INDICATOR: u32 = 43800;
pub const HELPID_GAUGE_COWL_FLAPS_SWITCH: u32 = 43801;
pub const HELPID_GAUGE_DEICE_SWITCH: u32 = 43802;
pub const HELPID_GAUGE_DME1: u32 = 43803;
pub const HELPID_GAUGE_DME2: u32 = 43804;
pub const HELPID_GAUGE_EGT: u32 = 43805;
pub const HELPID_GAUGE_EICAS: u32 = 43806;
pub const HELPID_GAUGE_ELAPSED_TIME: u32 = 43807;
pub const HELPID_GAUGE_ENGINE_CONTROLS: u32 = 43808;
pub const HELPID_GAUGE_ENGINE_N1: u32 = 43809;
pub const HELPID_GAUGE_ENGINE_N2: u32 = 43810;
pub const HELPID_GAUGE_ENGINE_TEMPERATURE: u32 = 43811;
pub const HELPID_GAUGE_FLAP_INDICATOR: u32 = 43812;
pub const HELPID_GAUGE_FLAPS_SWITCH: u32 = 43813;
pub const HELPID_GAUGE_FUEL: u32 = 43814;
pub const HELPID_GAUGE_FUEL_CUTOFF: u32 = 43815;
pub const HELPID_GAUGE_FUEL_FLOW: u32 = 43816;
pub const HELPID_GAUGE_FUEL_LEFT: u32 = 43817;
pub const HELPID_GAUGE_FUEL_RIGHT: u32 = 43818;
pub const HELPID_GAUGE_FUEL_LOW_LIGHT: u32 = 43819;
pub const HELPID_GAUGE_FUEL_PRESSURE: u32 = 43820;
pub const HELPID_GAUGE_FUEL_SELECTOR: u32 = 43821;
pub const HELPID_GAUGE_FUEL_XFEED: u32 = 43822;
pub const HELPID_GAUGE_GAS_GENERATOR_RPM: u32 = 43823;
pub const HELPID_GAUGE_GEAR_LEVER: u32 = 43824;
pub const HELPID_GAUGE_GEAR_LIGHT: u32 = 43825;
pub const HELPID_GAUGE_GLIDE_SLOPE: u32 = 43826;
pub const HELPID_GAUGE_HEADING_BUG_ADJUST: u32 = 43827;
pub const HELPID_GAUGE_HEADING_INDICATOR: u32 = 43828;
pub const HELPID_GAUGE_HEADING_INDICATOR_ADJUST: u32 = 43829;
pub const HELPID_GAUGE_HSI: u32 = 43830;
pub const HELPID_GAUGE_HSI_HUD: u32 = 43831;
pub const HELPID_GAUGE_HSI_OBS1: u32 = 43832;
pub const HELPID_GAUGE_IOAT: u32 = 43833;
pub const HELPID_GAUGE_KOHLSMAN_KNOB: u32 = 43834;
pub const HELPID_GAUGE_LIGHT_AP_INDICATOR: u32 = 43835;
pub const HELPID_GAUGE_LIGHT_MASTER_WARNING: u32 = 43836;
pub const HELPID_GAUGE_LIGHT_SWITCH_BEACON: u32 = 43837;
pub const HELPID_GAUGE_LIGHT_SWITCH_LANDING: u32 = 43838;
pub const HELPID_GAUGE_LIGHT_SWITCH_NAV: u32 = 43839;
pub const HELPID_GAUGE_LIGHT_SWITCH_PANEL: u32 = 43840;
pub const HELPID_GAUGE_LIGHT_SWITCH_RECOGNITION: u32 = 43841;
pub const HELPID_GAUGE_LIGHT_SWITCH_STROBE: u32 = 43842;
pub const HELPID_GAUGE_LIGHT_SWITCH_TAXI: u32 = 43843;
pub const HELPID_GAUGE_LOCALIZER_INDEX: u32 = 43844;
pub const HELPID_GAUGE_MAGNETO_SWITCH: u32 = 43845;
pub const HELPID_GAUGE_MANIFOLD_PRESSURE: u32 = 43846;
pub const HELPID_GAUGE_MARKER_OUTER: u32 = 43847;
pub const HELPID_GAUGE_MARKER_MIDDLE: u32 = 43848;
pub const HELPID_GAUGE_MARKER_INNER: u32 = 43849;
pub const HELPID_GAUGE_MASTER_SWITCH: u32 = 43850;
pub const HELPID_GAUGE_MASTER_ALT_BAT: u32 = 43851;
pub const HELPID_GAUGE_MASTER_CAUTION_LIGHT: u32 = 43852;
pub const HELPID_GAUGE_NAV_GPS_SWITCH: u32 = 43853;
pub const HELPID_GAUGE_OIL_PRESSURE: u32 = 43854;
pub const HELPID_GAUGE_OIL_TEMPERATURE: u32 = 43855;
pub const HELPID_GAUGE_OMI_LIGHTS: u32 = 43856;
pub const HELPID_GAUGE_PARKING_BRAKE: u32 = 43857;
pub const HELPID_GAUGE_PFD: u32 = 43858;
pub const HELPID_GAUGE_PITCH_TRIM: u32 = 43859;
pub const HELPID_GAUGE_PITCH_TRIM_INDICATOR: u32 = 43860;
pub const HELPID_GAUGE_PITCH_TRIM_KNOB: u32 = 43861;
pub const HELPID_GAUGE_PITCH_TRIM_SWITCH: u32 = 43862;
pub const HELPID_GAUGE_PITOT_HEAT_SWITCH: u32 = 43863;
pub const HELPID_GAUGE_PROP_RPM: u32 = 43864;
pub const HELPID_GAUGE_PROP_SYNC: u32 = 43865;
pub const HELPID_GAUGE_RMI: u32 = 43866;
pub const HELPID_GAUGE_RMI_DME: u32 = 43867;
pub const HELPID_GAUGE_ROLL_TRIM: u32 = 43868;
pub const HELPID_GAUGE_ROLL_TRIM_INDICATOR: u32 = 43869;
pub const HELPID_GAUGE_ROLL_TRIM_KNOB: u32 = 43870;
pub const HELPID_GAUGE_ROLL_TRIM_SWITCH: u32 = 43871;
pub const HELPID_GAUGE_SIM_RATE: u32 = 43872;
pub const HELPID_GAUGE_SLIP_SKID: u32 = 43873;
pub const HELPID_GAUGE_SPOILER: u32 = 43874;
pub const HELPID_GAUGE_STARTER_LEFT: u32 = 43875;
pub const HELPID_GAUGE_STARTER_RIGHT: u32 = 43876;
pub const HELPID_GAUGE_STARTER_SWITCH: u32 = 43877;
pub const HELPID_GAUGE_SUCTION: u32 = 43878;
pub const HELPID_GAUGE_SWITCH_FUEL_PUMP: u32 = 43879;
pub const HELPID_GAUGE_TACHOMETER: u32 = 43880;
pub const HELPID_GAUGE_TAS_CALIBRATION: u32 = 43881;
pub const HELPID_GAUGE_THROTTLE_PROP: u32 = 43882;
pub const HELPID_GAUGE_THROTTLE_MIXTURE: u32 = 43883;
pub const HELPID_GAUGE_THROTTLE_THROTTLE: u32 = 43884;
pub const HELPID_GAUGE_THROTTLE_QUADRANT: u32 = 43885;
pub const HELPID_GAUGE_THRUST_LEVERS: u32 = 43886;
pub const HELPID_GAUGE_TIT: u32 = 43887;
pub const HELPID_GAUGE_TORQUE: u32 = 43888;
pub const HELPID_GAUGE_TURN_COORDINATOR: u32 = 43889;
pub const HELPID_GAUGE_VOR1: u32 = 43890;
pub const HELPID_GAUGE_VOR1_OBS: u32 = 43891;
pub const HELPID_GAUGE_VOR2: u32 = 43892;
pub const HELPID_GAUGE_VOR2_OBS2: u32 = 43893;
pub const HELPID_GAUGE_VSI: u32 = 43894;
pub const HELPID_GAUGE_WHISKEY_COMPASS: u32 = 43895;
pub const HELPID_GAUGE_YAW_TRIM: u32 = 43896;
pub const HELPID_GAUGE_YAW_TRIM_INDICATOR: u32 = 43897;
pub const HELPID_GAUGE_YAW_TRIM_KNOB: u32 = 43898;
pub const HELPID_GAUGE_YAW_TRIM_SWITCH: u32 = 43899;
pub const HELPID_GAUGE_AUTOBRAKE_SWITCH: u32 = 43900;
pub const HELPID_GAUGE_FLAP_LEVER: u32 = 43901;
pub const HELPID_GAUGE_FLAP_LEVER_SOLO: u32 = 43902;
pub const HELPID_GAUGE_GENERATOR_SWITCH: u32 = 43903;
pub const HELPID_GAUGE_GENERATOR_LEFT: u32 = 43904;
pub const HELPID_GAUGE_GENERATOR_RIGHT: u32 = 43905;
pub const HELPID_GAUGE_LIGHT_SWITCH_WING: u32 = 43906;
pub const HELPID_GAUGE_LIGHT_SWITCH_LOGO: u32 = 43907;
pub const HELPID_GAUGE_TURN_BANK: u32 = 43908;
pub const HELPID_GAUGE_VSI_KNOB: u32 = 43909;
pub const HELPID_GAUGE_TOGGLE_RADIO_WINDOW: u32 = 43910;
pub const HELPID_GAUGE_TOGGLE_GPS_WINDOW: u32 = 43911;
pub const HELPID_GAUGE_TOGGLE_THROTTLE_WINDOW: u32 = 43912;
pub const HELPID_GAUGE_TOGGLE_COMPASS_WINDOW: u32 = 43913;
pub const HELPID_GAUGE_TOGGLE_FUEL_WINDOW: u32 = 43914;
pub const HELPID_GAUGE_TOGGLE_COLLECTIVE_WINDOW: u32 = 43915;
pub const HELPID_GAUGE_HYDRAULIC_PRESSURE: u32 = 43916;
pub const HELPID_GAUGE_COOLANT_TEMPERATURE: u32 = 43917;
pub const HELPID_GAUGE_STALL_LIGHT: u32 = 43918;
pub const HELPID_GAUGE_FLIGHT_MAP: u32 = 43919;
pub const HELPID_GAUGE_VOR2_OBS: u32 = 43920;
pub const HELPID_GAUGE_THROTTLE_EMERGENCY_THROTTLE: u32 = 43921;
pub const HELPID_GAUGE_WATER_RUDDER_LEVER: u32 = 43922;
pub const HELPID_GAUGE_TOGGLE_CHECKLIST_WINDOW: u32 = 43923;
pub const HELPID_GAUGE_TOGGLE_ATC_WINDOW: u32 = 43924;
pub const HELPID_GAUGE_TOGGLE_OVERHEAD_WINDOW: u32 = 43925;
pub const HELPID_GAUGE_TOGGLE_CLOCK_WINDOW: u32 = 43926;
pub const HELPID_GAUGE_SPEED_BRAKE: u32 = 43927;
pub const HELPID_GAUGE_BOOT_ICING_SWITCH: u32 = 43928;
pub const HELPID_GAUGE_ANNUNCIATOR_AFT_DOOR: u32 = 43929;
pub const HELPID_GAUGE_ANNUNCIATOR_GEAR_UP: u32 = 43930;
pub const HELPID_GAUGE_ANNUNCIATOR_LEFT_ALTERNATOR: u32 = 43931;
pub const HELPID_GAUGE_ANNUNCIATOR_RIGHT_ALTERNATOR: u32 = 43932;
pub const HELPID_GAUGE_ANNUNCIATOR_STARTER: u32 = 43933;
pub const HELPID_GAUGE_REF_ALT_MARKER_BUG: u32 = 43934;
pub const HELPID_GAUGE_TOGGLE_FLOOR_WINDOW: u32 = 43935;
pub const HELPID_GAUGE_RADIO_ALTIMETER: u32 = 43540;
pub const HELPID_GAUGE_RADIO_ALTIMETER_KNOB: u32 = 43542;
pub const HELPID_GAUGE_CONDITION_LEVERS: u32 = 44293;
pub const HELPID_GAUGE_PROP_LEVERS: u32 = 44292;
pub const HELPID_GAUGE_DISPLAY_IFR_WINDOW: u32 = 43936;
pub const HELPID_GAUGE_DISPLAY_LANDING_WINDOW: u32 = 43937;
pub const HELPID_GAUGE_DISPLAY_VFR_WINDOW: u32 = 43938;
pub const HELPID_GAUGE_CLOCK_MODE_SELECT: u32 = 43939;
pub const HELPID_GAUGE_CLOCK_RESET: u32 = 43940;
pub const HELPID_GAUGE_CLOSE_POPUP_WINDOW: u32 = 43941;
pub const TOOLTIPTEXT_BASE: u32 = 12288;
pub const TOOLTIPTEXT_AIRSPEED_KILOS: u32 = 12289;
pub const TOOLTIPTEXT_AIRSPEED_KNOTS: u32 = 12290;
pub const TOOLTIPTEXT_AIRSPEED_MILES: u32 = 12291;
pub const TOOLTIPTEXT_RADIO_ALTIMETER_METERS: u32 = 12296;
pub const TOOLTIPTEXT_RADIO_ALTIMETER_FEET: u32 = 12297;
pub const TOOLTIPTEXT_RADIO_ALTIMETER_DH_METERS: u32 = 12298;
pub const TOOLTIPTEXT_RADIO_ALTIMETER_DH_FEET: u32 = 12299;
pub const TOOLTIPTEXT_RADIO_ALTIMETER_DH_LIGHT: u32 = 12300;
pub const TOOLTIPTEXT_FLAP_INDICATOR_POSITION: u32 = 12304;
pub const TOOLTIPTEXT_FLAP_LEVER_DEGREES: u32 = 12305;
pub const TOOLTIPTEXT_FLAP_INDICATOR_DEGREES: u32 = 12306;
pub const TOOLTIPTEXT_FLAPS_SWITCH: u32 = 12307;
pub const TOOLTIPTEXT_CLOCK: u32 = 12312;
pub const TOOLTIPTEXT_CLOCK_SIMRATE: u32 = 12313;
pub const TOOLTIPTEXT_WATER_RUDDER_HANDLE: u32 = 12320;
pub const TOOLTIPTEXT_LIGHT_ENGINE_FIRE: u32 = 12336;
pub const TOOLTIPTEXT_LIGHT_OIL_PRESSURE_LOW: u32 = 12337;
pub const TOOLTIPTEXT_LIGHT_GENERATOR_OFF: u32 = 12338;
pub const TOOLTIPTEXT_LIGHT_EMERGENCY_POWER_LEVER_ON: u32 = 12339;
pub const TOOLTIPTEXT_LIGHT_AUXILIARY_FUEL_PUMP_ON: u32 = 12340;
pub const TOOLTIPTEXT_LIGHT_FUEL_PRESSURE_LOW: u32 = 12341;
pub const TOOLTIPTEXT_LIGHT_STARTER_ON: u32 = 12342;
pub const TOOLTIPTEXT_LIGHT_IGNITION_ON: u32 = 12343;
pub const TOOLTIPTEXT_LIGHT_VOLTAGE_LOW: u32 = 12344;
pub const TOOLTIPTEXT_LIGHT_VACUUM_LOW: u32 = 12345;
pub const TOOLTIPTEXT_LIGHT_RESERVOIR_FUEL_LOW: u32 = 12346;
pub const TOOLTIPTEXT_LIGHT_LEFT_TANK_FUEL_LOW: u32 = 12347;
pub const TOOLTIPTEXT_LIGHT_RIGHT_TANK_FUEL_LOW: u32 = 12348;
pub const TOOLTIPTEXT_LIGHT_STANDBY_POWER_ON: u32 = 12349;
pub const TOOLTIPTEXT_LIGHT_DEICE_ON: u32 = 12350;
pub const TOOLTIPTEXT_LIGHT_FUEL_SELECTOR_NOT_ALL: u32 = 12351;
pub const TOOLTIPTEXT_ALTIMETER_METERS: u32 = 12368;
pub const TOOLTIPTEXT_ALTIMETER_FEET: u32 = 12369;
pub const TOOLTIPTEXT_ALTIMETER_FEET_METERS_SPECIAL: u32 = 12370;
pub const TOOLTIPTEXT_ALTIMETER_KOHLSMAN_INHG: u32 = 12371;
pub const TOOLTIPTEXT_ALTIMETER_KOHLSMAN_MBAR: u32 = 12372;
pub const TOOLTIPTEXT_AUTOPILOT_MASTER: u32 = 12384;
pub const TOOLTIPTEXT_AUTOPILOT_FLIGHT_DIRECTOR_SWITCH: u32 = 12385;
pub const TOOLTIPTEXT_AUTOPILOT_WING_LEVELER: u32 = 12386;
pub const TOOLTIPTEXT_AUTOPILOT_IAS_HOLD: u32 = 12387;
pub const TOOLTIPTEXT_AUTOPILOT_BC_HOLD: u32 = 12388;
pub const TOOLTIPTEXT_AUTOPILOT_APP_HOLD: u32 = 12389;
pub const TOOLTIPTEXT_AUTOPILOT_YAW_DAMP_HOLD: u32 = 12390;
pub const TOOLTIPTEXT_AUTOPILOT_NAV_HOLD: u32 = 12391;
pub const TOOLTIPTEXT_AUTOPILOT_HEADING_HOLD: u32 = 12392;
pub const TOOLTIPTEXT_AUTOPILOT_HEADING_INDICATOR: u32 = 12393;
pub const TOOLTIPTEXT_AUTOPILOT_VSI_HOLD: u32 = 12394;
pub const TOOLTIPTEXT_AUTOPILOT_VSI_INDICATOR_FTMIN: u32 = 12395;
pub const TOOLTIPTEXT_AUTOPILOT_VSI_INDICATOR_MS: u32 = 12396;
pub const TOOLTIPTEXT_AUTOPILOT_ALTITUDE_HOLD: u32 = 12397;
pub const TOOLTIPTEXT_AUTOPILOT_ALTITUDE_INDICATOR_FEET: u32 = 12398;
pub const TOOLTIPTEXT_AUTOPILOT_ALTITUDE_INDICATOR_METERS: u32 = 12399;
pub const TOOLTIPTEXT_AUTOPILOT_SPEED_HOLD: u32 = 12400;
pub const TOOLTIPTEXT_AUTOPILOT_SPEED_INDICATOR_KNOTS: u32 = 12401;
pub const TOOLTIPTEXT_AUTOPILOT_SPEED_INDICATOR_KILOS: u32 = 12402;
pub const TOOLTIPTEXT_AUTOPILOT_AUTOTHROTTLE: u32 = 12403;
pub const TOOLTIPTEXT_AUTOPILOT_MACH_HOLD: u32 = 12404;
pub const TOOLTIPTEXT_AUTOPILOT_MACH_INDICATOR: u32 = 12405;
pub const TOOLTIPTEXT_SUCTION_MBAR: u32 = 12416;
pub const TOOLTIPTEXT_SUCTION_INHG: u32 = 12417;
pub const TOOLTIPTEXT_TURN_COORDINATOR_RATE: u32 = 12432;
pub const TOOLTIPTEXT_ATTITUDE_INDICATOR_BANK_PITCH: u32 = 12434;
pub const TOOLTIPTEXT_HSI_HEADING_COURSE: u32 = 12436;
pub const TOOLTIPTEXT_VSI_METERS_PER_SEC: u32 = 12440;
pub const TOOLTIPTEXT_VSI_FEET_PER_MIN: u32 = 12441;
pub const TOOLTIPTEXT_MANIFOLD_PRESSURE_INHG: u32 = 12448;
pub const TOOLTIPTEXT_ENG1_MANIFOLD_PRESSURE_INHG: u32 = 12449;
pub const TOOLTIPTEXT_ENG2_MANIFOLD_PRESSURE_INHG: u32 = 12450;
pub const TOOLTIPTEXT_ENG3_MANIFOLD_PRESSURE_INHG: u32 = 12451;
pub const TOOLTIPTEXT_ENG4_MANIFOLD_PRESSURE_INHG: u32 = 12452;
pub const TOOLTIPTEXT_MANIFOLD_PRESSURE_PASCAL: u32 = 12456;
pub const TOOLTIPTEXT_ENG1_MANIFOLD_PRESSURE_PASCAL: u32 = 12457;
pub const TOOLTIPTEXT_ENG2_MANIFOLD_PRESSURE_PASCAL: u32 = 12458;
pub const TOOLTIPTEXT_ENG3_MANIFOLD_PRESSURE_PASCAL: u32 = 12459;
pub const TOOLTIPTEXT_ENG4_MANIFOLD_PRESSURE_PASCAL: u32 = 12460;
pub const TOOLTIPTEXT_PROP_RPM: u32 = 12464;
pub const TOOLTIPTEXT_ENG1_PROP_RPM: u32 = 12465;
pub const TOOLTIPTEXT_ENG2_PROP_RPM: u32 = 12466;
pub const TOOLTIPTEXT_ENG3_PROP_RPM: u32 = 12467;
pub const TOOLTIPTEXT_ENG4_PROP_RPM: u32 = 12468;
pub const TOOLTIPTEXT_PROP_SYNCHROSCOPE: u32 = 12472;
pub const TOOLTIPTEXT_FUEL_FLOW_GALLON_HOUR: u32 = 12480;
pub const TOOLTIPTEXT_ENG1_FUEL_FLOW_GALLON_HOUR: u32 = 12481;
pub const TOOLTIPTEXT_ENG2_FUEL_FLOW_GALLON_HOUR: u32 = 12482;
pub const TOOLTIPTEXT_ENG3_FUEL_FLOW_GALLON_HOUR: u32 = 12483;
pub const TOOLTIPTEXT_ENG4_FUEL_FLOW_GALLON_HOUR: u32 = 12484;
pub const TOOLTIPTEXT_FUEL_FLOW_LITER_HOUR: u32 = 12485;
pub const TOOLTIPTEXT_ENG1_FUEL_FLOW_LITER_HOUR: u32 = 12486;
pub const TOOLTIPTEXT_ENG2_FUEL_FLOW_LITER_HOUR: u32 = 12487;
pub const TOOLTIPTEXT_ENG3_FUEL_FLOW_LITER_HOUR: u32 = 12488;
pub const TOOLTIPTEXT_ENG4_FUEL_FLOW_LITER_HOUR: u32 = 12489;
pub const TOOLTIPTEXT_FUEL_FLOW_POUND_HOUR: u32 = 12490;
pub const TOOLTIPTEXT_ENG1_FUEL_FLOW_POUND_HOUR: u32 = 12491;
pub const TOOLTIPTEXT_ENG2_FUEL_FLOW_POUND_HOUR: u32 = 12492;
pub const TOOLTIPTEXT_ENG3_FUEL_FLOW_POUND_HOUR: u32 = 12493;
pub const TOOLTIPTEXT_ENG4_FUEL_FLOW_POUND_HOUR: u32 = 12494;
pub const TOOLTIPTEXT_CHT_CELSIUS: u32 = 12496;
pub const TOOLTIPTEXT_ENG1_CHT_CELSIUS: u32 = 12497;
pub const TOOLTIPTEXT_ENG2_CHT_CELSIUS: u32 = 12498;
pub const TOOLTIPTEXT_ENG3_CHT_CELSIUS: u32 = 12499;
pub const TOOLTIPTEXT_ENG4_CHT_CELSIUS: u32 = 12500;
pub const TOOLTIPTEXT_CHT_FARENHEIT: u32 = 12504;
pub const TOOLTIPTEXT_ENG1_CHT_FARENHEIT: u32 = 12505;
pub const TOOLTIPTEXT_ENG2_CHT_FARENHEIT: u32 = 12506;
pub const TOOLTIPTEXT_ENG3_CHT_FARENHEIT: u32 = 12507;
pub const TOOLTIPTEXT_ENG4_CHT_FARENHEIT: u32 = 12508;
pub const TOOLTIPTEXT_EGT_CELSIUS: u32 = 12512;
pub const TOOLTIPTEXT_ENG1_EGT_CELSIUS: u32 = 12513;
pub const TOOLTIPTEXT_ENG2_EGT_CELSIUS: u32 = 12514;
pub const TOOLTIPTEXT_ENG3_EGT_CELSIUS: u32 = 12515;
pub const TOOLTIPTEXT_ENG4_EGT_CELSIUS: u32 = 12516;
pub const TOOLTIPTEXT_EGT_FARENHEIT: u32 = 12520;
pub const TOOLTIPTEXT_ENG1_EGT_FARENHEIT: u32 = 12521;
pub const TOOLTIPTEXT_ENG2_EGT_FARENHEIT: u32 = 12522;
pub const TOOLTIPTEXT_ENG3_EGT_FARENHEIT: u32 = 12523;
pub const TOOLTIPTEXT_ENG4_EGT_FARENHEIT: u32 = 12524;
pub const TOOLTIPTEXT_OIL_TEMPERATURE_CELSIUS: u32 = 12528;
pub const TOOLTIPTEXT_ENG1_OIL_TEMPERATURE_CELSIUS: u32 = 12529;
pub const TOOLTIPTEXT_ENG2_OIL_TEMPERATURE_CELSIUS: u32 = 12530;
pub const TOOLTIPTEXT_ENG3_OIL_TEMPERATURE_CELSIUS: u32 = 12531;
pub const TOOLTIPTEXT_ENG4_OIL_TEMPERATURE_CELSIUS: u32 = 12532;
pub const TOOLTIPTEXT_OIL_TEMPERATURE_FARENHEIT: u32 = 12536;
pub const TOOLTIPTEXT_ENG1_OIL_TEMPERATURE_FARENHEIT: u32 = 12537;
pub const TOOLTIPTEXT_ENG2_OIL_TEMPERATURE_FARENHEIT: u32 = 12538;
pub const TOOLTIPTEXT_ENG3_OIL_TEMPERATURE_FARENHEIT: u32 = 12539;
pub const TOOLTIPTEXT_ENG4_OIL_TEMPERATURE_FARENHEIT: u32 = 12540;
pub const TOOLTIPTEXT_OIL_PRESSURE_PSI: u32 = 12544;
pub const TOOLTIPTEXT_ENG1_OIL_PRESSURE_PSI: u32 = 12545;
pub const TOOLTIPTEXT_ENG2_OIL_PRESSURE_PSI: u32 = 12546;
pub const TOOLTIPTEXT_ENG3_OIL_PRESSURE_PSI: u32 = 12547;
pub const TOOLTIPTEXT_ENG4_OIL_PRESSURE_PSI: u32 = 12548;
pub const TOOLTIPTEXT_OIL_PRESSURE_KGFSQCM: u32 = 12552;
pub const TOOLTIPTEXT_ENG1_OIL_PRESSURE_KGFSQCM: u32 = 12553;
pub const TOOLTIPTEXT_ENG2_OIL_PRESSURE_KGFSQCM: u32 = 12554;
pub const TOOLTIPTEXT_ENG3_OIL_PRESSURE_KGFSQCM: u32 = 12555;
pub const TOOLTIPTEXT_ENG4_OIL_PRESSURE_KGFSQCM: u32 = 12556;
pub const TOOLTIPTEXT_LEFT_FUEL_PERCENT: u32 = 12560;
pub const TOOLTIPTEXT_RIGHT_FUEL_PERCENT: u32 = 12561;
pub const TOOLTIPTEXT_LEFT_FUEL_LBS: u32 = 12562;
pub const TOOLTIPTEXT_RIGHT_FUEL_LBS: u32 = 12563;
pub const TOOLTIPTEXT_LEFT_FUEL_KGS: u32 = 12564;
pub const TOOLTIPTEXT_RIGHT_FUEL_KGS: u32 = 12565;
pub const TOOLTIPTEXT_LEFT_FUEL_GALLONS: u32 = 12566;
pub const TOOLTIPTEXT_RIGHT_FUEL_GALLONS: u32 = 12567;
pub const TOOLTIPTEXT_LEFT_FUEL_LITERS: u32 = 12568;
pub const TOOLTIPTEXT_RIGHT_FUEL_LITERS: u32 = 12569;
pub const TOOLTIPTEXT_MARKER_OUTER: u32 = 12576;
pub const TOOLTIPTEXT_MARKER_MIDDLE: u32 = 12577;
pub const TOOLTIPTEXT_MARKER_INNER: u32 = 12578;
pub const TOOLTIPTEXT_PITCH_TRIM: u32 = 12584;
pub const TOOLTIPTEXT_ROLL_TRIM: u32 = 12585;
pub const TOOLTIPTEXT_YAW_TRIM: u32 = 12586;
pub const TOOLTIPTEXT_YAW_TRIM_INDICATOR: u32 = 12587;
pub const TOOLTIPTEXT_YAW_TRIM_KNOB: u32 = 12588;
pub const TOOLTIPTEXT_GEAR_LIGHT: u32 = 12592;
pub const TOOLTIPTEXT_GEAR_LEVER: u32 = 12593;
pub const TOOLTIPTEXT_AMMETER: u32 = 12608;
pub const TOOLTIPTEXT_AUDIO_PANEL_TRANSMIT_RECEIVE: u32 = 12624;
pub const TOOLTIPTEXT_COMM1_FREQ_ACTIVE_STANDBY: u32 = 12640;
pub const TOOLTIPTEXT_COMM2_FREQ_ACTIVE_STANDBY: u32 = 12641;
pub const TOOLTIPTEXT_NAV1_FREQ_ACTIVE_STANDBY: u32 = 12648;
pub const TOOLTIPTEXT_NAV2_FREQ_ACTIVE_STANDBY: u32 = 12649;
pub const TOOLTIPTEXT_ADF_FREQ: u32 = 12656;
pub const TOOLTIPTEXT_DME_NAV_NM_KT: u32 = 12664;
pub const TOOLTIPTEXT_DME_NAV_KM_MS: u32 = 12665;
pub const TOOLTIPTEXT_DME_NAV_NM_KT_MIN: u32 = 12666;
pub const TOOLTIPTEXT_DME_NAV_KM_MS_MIN: u32 = 12667;
pub const TOOLTIPTEXT_DME_N1_N2_SELECT: u32 = 12668;
pub const TOOLTIPTEXT_TRANSPONDER_ID: u32 = 12672;
pub const TOOLTIPTEXT_THROTTLE_MIXTURE_PERCENT: u32 = 12688;
pub const TOOLTIPTEXT_THROTTLE_ENG1_MIXTURE_PERCENT: u32 = 12689;
pub const TOOLTIPTEXT_THROTTLE_ENG2_MIXTURE_PERCENT: u32 = 12690;
pub const TOOLTIPTEXT_THROTTLE_ENG3_MIXTURE_PERCENT: u32 = 12691;
pub const TOOLTIPTEXT_THROTTLE_ENG4_MIXTURE_PERCENT: u32 = 12692;
pub const TOOLTIPTEXT_THROTTLE_PROPELLER_PERCENT: u32 = 12696;
pub const TOOLTIPTEXT_THROTTLE_ENG1_PROPELLER_PERCENT: u32 = 12697;
pub const TOOLTIPTEXT_THROTTLE_ENG2_PROPELLER_PERCENT: u32 = 12698;
pub const TOOLTIPTEXT_THROTTLE_ENG3_PROPELLER_PERCENT: u32 = 12699;
pub const TOOLTIPTEXT_THROTTLE_ENG4_PROPELLER_PERCENT: u32 = 12700;
pub const TOOLTIPTEXT_THROTTLE_THROTTLE_PERCENT: u32 = 12704;
pub const TOOLTIPTEXT_THROTTLE_ENG1_THROTTLE_PERCENT: u32 = 12705;
pub const TOOLTIPTEXT_THROTTLE_ENG2_THROTTLE_PERCENT: u32 = 12706;
pub const TOOLTIPTEXT_THROTTLE_ENG3_THROTTLE_PERCENT: u32 = 12707;
pub const TOOLTIPTEXT_THROTTLE_ENG4_THROTTLE_PERCENT: u32 = 12708;
pub const TOOLTIPTEXT_COWL_FLAPS_PERCENT: u32 = 12712;
pub const TOOLTIPTEXT_ENG1_COWL_FLAPS_PERCENT: u32 = 12713;
pub const TOOLTIPTEXT_ENG2_COWL_FLAPS_PERCENT: u32 = 12714;
pub const TOOLTIPTEXT_ENG3_COWL_FLAPS_PERCENT: u32 = 12715;
pub const TOOLTIPTEXT_ENG4_COWL_FLAPS_PERCENT: u32 = 12716;
pub const TOOLTIPTEXT_FUEL_SELECTOR: u32 = 12720;
pub const TOOLTIPTEXT_LEFT_FUEL_SELECTOR: u32 = 12721;
pub const TOOLTIPTEXT_RIGHT_FUEL_SELECTOR: u32 = 12722;
pub const TOOLTIPTEXT_WHISKEY_COMPASS: u32 = 12728;
pub const TOOLTIPTEXT_DEICE_SWITCH: u32 = 12732;
pub const TOOLTIPTEXT_PITOT_HEAT_SWITCH: u32 = 12733;
pub const TOOLTIPTEXT_TORQUE_PERCENT: u32 = 12736;
pub const TOOLTIPTEXT_ENG1_TORQUE_PERCENT: u32 = 12737;
pub const TOOLTIPTEXT_ENG2_TORQUE_PERCENT: u32 = 12738;
pub const TOOLTIPTEXT_ENG3_TORQUE_PERCENT: u32 = 12739;
pub const TOOLTIPTEXT_ENG4_TORQUE_PERCENT: u32 = 12740;
pub const TOOLTIPTEXT_TORQUE_FT_LBS: u32 = 12741;
pub const TOOLTIPTEXT_ENG1_TORQUE_FT_LBS: u32 = 12742;
pub const TOOLTIPTEXT_ENG2_TORQUE_FT_LBS: u32 = 12743;
pub const TOOLTIPTEXT_ENG3_TORQUE_FT_LBS: u32 = 12744;
pub const TOOLTIPTEXT_ENG4_TORQUE_FT_LBS: u32 = 12745;
pub const TOOLTIPTEXT_TORQUE_NEWTON: u32 = 12746;
pub const TOOLTIPTEXT_ENG1_TORQUE_NEWTON: u32 = 12747;
pub const TOOLTIPTEXT_ENG2_TORQUE_NEWTON: u32 = 12748;
pub const TOOLTIPTEXT_ENG3_TORQUE_NEWTON: u32 = 12749;
pub const TOOLTIPTEXT_ENG4_TORQUE_NEWTON: u32 = 12750;
pub const TOOLTIPTEXT_ITT_RANKINE: u32 = 12752;
pub const TOOLTIPTEXT_ENG1_ITT_RANKINE: u32 = 12753;
pub const TOOLTIPTEXT_ENG2_ITT_RANKINE: u32 = 12754;
pub const TOOLTIPTEXT_ENG3_ITT_RANKINE: u32 = 12755;
pub const TOOLTIPTEXT_ENG4_ITT_RANKINE: u32 = 12756;
pub const TOOLTIPTEXT_ITT_CELSIUS: u32 = 12757;
pub const TOOLTIPTEXT_ENG1_ITT_CELSIUS: u32 = 12758;
pub const TOOLTIPTEXT_ENG2_ITT_CELSIUS: u32 = 12759;
pub const TOOLTIPTEXT_ENG3_ITT_CELSIUS: u32 = 12760;
pub const TOOLTIPTEXT_ENG4_ITT_CELSIUS: u32 = 12761;
pub const TOOLTIPTEXT_GAS_GENERATOR_RPM_PERCENT: u32 = 12768;
pub const TOOLTIPTEXT_ENG1_GAS_GENERATOR_RPM_PERCENT: u32 = 12769;
pub const TOOLTIPTEXT_ENG2_GAS_GENERATOR_RPM_PERCENT: u32 = 12770;
pub const TOOLTIPTEXT_ENG3_GAS_GENERATOR_RPM_PERCENT: u32 = 12771;
pub const TOOLTIPTEXT_ENG4_GAS_GENERATOR_RPM_PERCENT: u32 = 12772;
pub const TOOLTIPTEXT_THROTTLE_FUEL_CONDITION_PERCENT: u32 = 12776;
pub const TOOLTIPTEXT_ENG1_THROTTLE_FUEL_CONDITION_PERCENT: u32 = 12777;
pub const TOOLTIPTEXT_ENG2_THROTTLE_FUEL_CONDITION_PERCENT: u32 = 12778;
pub const TOOLTIPTEXT_ENG3_THROTTLE_FUEL_CONDITION_PERCENT: u32 = 12779;
pub const TOOLTIPTEXT_ENG4_THROTTLE_FUEL_CONDITION_PERCENT: u32 = 12780;
pub const TOOLTIPTEXT_PARKING_BRAKE: u32 = 12784;
pub const TOOLTIPTEXT_FUEL_CUTOFF: u32 = 12792;
pub const TOOLTIPTEXT_ENG1_FUEL_CUTOFF: u32 = 12793;
pub const TOOLTIPTEXT_ENG2_FUEL_CUTOFF: u32 = 12794;
pub const TOOLTIPTEXT_ENG3_FUEL_CUTOFF: u32 = 12795;
pub const TOOLTIPTEXT_ENG4_FUEL_CUTOFF: u32 = 12796;
pub const TOOLTIPTEXT_SPEED_BRAKE: u32 = 12800;
pub const TOOLTIPTEXT_HEADING_INDICATOR_HEADING: u32 = 12808;
pub const TOOLTIPTEXT_TACHOMETER_RPM: u32 = 12816;
pub const TOOLTIPTEXT_ENG1_TACHOMETER_RPM: u32 = 12817;
pub const TOOLTIPTEXT_ENG2_TACHOMETER_RPM: u32 = 12818;
pub const TOOLTIPTEXT_ENG3_TACHOMETER_RPM: u32 = 12819;
pub const TOOLTIPTEXT_ENG4_TACHOMETER_RPM: u32 = 12820;
pub const TOOLTIPTEXT_ON: u32 = 12832;
pub const TOOLTIPTEXT_OFF: u32 = 12833;
pub const TOOLTIPTEXT_AMBIENT_TEMPERATURE_CELSIUS: u32 = 12836;
pub const TOOLTIPTEXT_AMBIENT_TEMPERATURE_FARENHEIT: u32 = 12837;
pub const TOOLTIPTEXT_ENG1_CARB_TEMPERATURE_CELSIUS: u32 = 12840;
pub const TOOLTIPTEXT_ENG2_CARB_TEMPERATURE_CELSIUS: u32 = 12841;
pub const TOOLTIPTEXT_CABIN_DOORS: u32 = 12848;
pub const TOOLTIPTEXT_DC3_FUEL_GAUGE: u32 = 12849;
pub const TOOLTIPTEXT_PROP_FEATHER_SWITCH: u32 = 12850;
pub const TOOLTIPTEXT_PROP_FEATHER_SWITCH_1: u32 = 12851;
pub const TOOLTIPTEXT_PROP_FEATHER_SWITCH_2: u32 = 12852;
pub const TOOLTIPTEXT_PROP_FEATHER_SWITCH_3: u32 = 12853;
pub const TOOLTIPTEXT_PROP_FEATHER_SWITCH_4: u32 = 12854;
pub const TOOLTIPTEXT_MASTER_IGNITION_SWITCH: u32 = 12856;
pub const TOOLTIPTEXT_HYDRAULIC_PRESSURE: u32 = 12864;
pub const TOOLTIPTEXT_GEAR_HYDRAULIC_PRESSURE: u32 = 12865;
pub const TOOLTIPTEXT_COMM1_FREQ: u32 = 12866;
pub const TOOLTIPTEXT_COMM2_FREQ: u32 = 12867;
pub const TOOLTIPTEXT_NAV1_FREQ: u32 = 12868;
pub const TOOLTIPTEXT_NAV2_FREQ: u32 = 12869;
pub const TOOLTIPTEXT_ADF1_FREQ: u32 = 12870;
pub const TOOLTIPTEXT_ADF2_FREQ: u32 = 12871;
pub const TOOLTIPTEXT_ADF1_BAND_SELECTOR: u32 = 12872;
pub const TOOLTIPTEXT_ADF2_BAND_SELECTOR: u32 = 12873;
pub const TOOLTIPTEXT_ADF1_AUDIO_SELECTOR: u32 = 12874;
pub const TOOLTIPTEXT_ADF2_AUDIO_SELECTOR: u32 = 12875;
pub const TOOLTIPTEXT_NAV1_AUDIO_SELECTOR: u32 = 12876;
pub const TOOLTIPTEXT_NAV2_AUDIO_SELECTOR: u32 = 12877;
pub const TOOLTIPTEXT_COM1_AUDIO_SELECTOR: u32 = 12878;
pub const TOOLTIPTEXT_COM2_AUDIO_SELECTOR: u32 = 12879;
pub const TOOLTIPTEXT_MARKER_AUDIO_SELECTOR: u32 = 12880;
pub const TOOLTIPTEXT_ADF_SELECTOR: u32 = 12881;
pub const TOOLTIPTEXT_NAV_SELECTOR: u32 = 12882;
pub const TOOLTIPTEXT_DC3_FLAP_LEVER_EXTEND: u32 = 12883;
pub const TOOLTIPTEXT_DC3_FLAP_LEVER_RETRACT: u32 = 12884;
pub const TOOLTIPTEXT_TAILWHEEL_LOCK: u32 = 12885;
pub const TOOLTIPTEXT_FORD_TRIMOTOR_FUEL_GAUGE: u32 = 12896;
pub const TOOLTIPTEXT_FORD_TRIMOTOR_AMMETER: u32 = 12897;
pub const TOOLTIPTEXT_AUTOPILOT_PITCH_REF: u32 = 12900;
pub const TOOLTIPTEXT_CENTER_FUEL_PERCENT: u32 = 12901;
pub const TOOLTIPTEXT_FUEL_SELECTOR_1: u32 = 12904;
pub const TOOLTIPTEXT_FUEL_SELECTOR_2: u32 = 12905;
pub const TOOLTIPTEXT_FUEL_SELECTOR_3: u32 = 12906;
pub const TOOLTIPTEXT_FUEL_SELECTOR_4: u32 = 12907;
pub const TOOLTIPTEXT_RADIATOR_TEMPERATURE_CELSIUS: u32 = 12912;
pub const TOOLTIPTEXT_RADIATOR_TEMPERATURE_FARENHEIT: u32 = 12913;
pub const TOOLTIPTEXT_PITCH_TRIM_PCT: u32 = 12920;
pub const TOOLTIPTEXT_INCLINOMETER_BALL: u32 = 12921;
pub const TOOLTIPTEXT_MAGNETO_SWITCH: u32 = 12928;
pub const TOOLTIPTEXT_STARTER_SWITCH: u32 = 12929;
pub const TOOLTIPTEXT_TURN_INDICATOR_RATE: u32 = 12930;
pub const TOOLTIPTEXT_ENG1_CARB_HEAT: u32 = 12945;
pub const TOOLTIPTEXT_ENG2_CARB_HEAT: u32 = 12946;
pub const TOOLTIPTEXT_ENG3_CARB_HEAT: u32 = 12947;
pub const TOOLTIPTEXT_ENG4_CARB_HEAT: u32 = 12948;
pub const TOOLTIPTEXT_ENG1_MAGNETO_SWITCH: u32 = 12960;
pub const TOOLTIPTEXT_ENG2_MAGNETO_SWITCH: u32 = 12961;
pub const TOOLTIPTEXT_ENG3_MAGNETO_SWITCH: u32 = 12962;
pub const TOOLTIPTEXT_ENG4_MAGNETO_SWITCH: u32 = 12963;
pub const TOOLTIPTEXT_ENG1_PRIMER_SWITCH: u32 = 12968;
pub const TOOLTIPTEXT_ENG2_PRIMER_SWITCH: u32 = 12969;
pub const TOOLTIPTEXT_ENG3_PRIMER_SWITCH: u32 = 12970;
pub const TOOLTIPTEXT_ENG4_PRIMER_SWITCH: u32 = 12971;
pub const TOOLTIPTEXT_ENG1_STARTER_SWITCH: u32 = 12977;
pub const TOOLTIPTEXT_ENG2_STARTER_SWITCH: u32 = 12978;
pub const TOOLTIPTEXT_ENG3_STARTER_SWITCH: u32 = 12979;
pub const TOOLTIPTEXT_ENG4_STARTER_SWITCH: u32 = 12980;
pub const TOOLTIPTEXT_TOGGLE_ELECTRICAL_WINDOW: u32 = 12992;
pub const TOOLTIPTEXT_TOGGLE_ENGINE_WINDOW: u32 = 12993;
pub const TOOLTIPTEXT_TOGGLE_BACK_WINDOW: u32 = 12994;
pub const TOOLTIPTEXT_TOGGLE_IGNITION_CONTROL_WINDOW: u32 = 12995;
pub const TOOLTIPTEXT_TOGGLE_ENGINE_CONTROL_WINDOW: u32 = 12996;
pub const TOOLTIPTEXT_TOGGLE_ENGINE_INSTRUMENTS_WINDOW: u32 = 12997;
pub const TOOLTIPTEXT_FORD_TRIMOTOR_PRIMER_SELECT: u32 = 13000;
pub const TOOLTIPTEXT_FORD_TRIMOTOR_PRIMER_PULL: u32 = 13001;
pub const TOOLTIPTEXT_TOGGLE_PIPER_CUB_STARTER_WINDOW: u32 = 13004;
pub const TOOLTIPTEXT_DC3_RMI_CARD: u32 = 13008;
pub const TOOLTIPTEXT_THROTTLE_ENG1_PROPELLER: u32 = 13016;
pub const TOOLTIPTEXT_THROTTLE_ENG2_PROPELLER: u32 = 13017;
pub const TOOLTIPTEXT_THROTTLE_ENG3_PROPELLER: u32 = 13018;
pub const TOOLTIPTEXT_THROTTLE_ENG4_PROPELLER: u32 = 13019;
pub const TOOLTIPTEXT_BATTERY_SWITCH: u32 = 13024;
pub const TOOLTIPTEXT_FUEL_PUMP: u32 = 13032;
pub const TOOLTIPTEXT_ENG1_FUEL_PUMP: u32 = 13033;
pub const TOOLTIPTEXT_ENG2_FUEL_PUMP: u32 = 13034;
pub const TOOLTIPTEXT_ENG3_FUEL_PUMP: u32 = 13035;
pub const TOOLTIPTEXT_ENG4_FUEL_PUMP: u32 = 13036;
pub const TOOLTIPTEXT_ENG1_GENERATOR_SWITCH: u32 = 13041;
pub const TOOLTIPTEXT_ENG2_GENERATOR_SWITCH: u32 = 13042;
pub const TOOLTIPTEXT_ENG3_GENERATOR_SWITCH: u32 = 13043;
pub const TOOLTIPTEXT_ENG4_GENERATOR_SWITCH: u32 = 13044;
pub const TOOLTIPTEXT_LIGHT_SWITCH_WING: u32 = 13056;
pub const TOOLTIPTEXT_LIGHT_SWITCH_NAV: u32 = 13057;
pub const TOOLTIPTEXT_LIGHT_SWITCH_LANDING: u32 = 13058;
pub const TOOLTIPTEXT_LIGHT_SWITCH_PANEL: u32 = 13060;
pub const TOOLTIPTEXT_LIGHT_SWITCH_STROBE: u32 = 13061;
pub const TOOLTIPTEXT_LIGHT_SWITCH_TAXI: u32 = 13062;
pub const TOOLTIPTEXT_LIGHT_SWITCH_BEACON: u32 = 13063;
pub const TOOLTIPTEXT_PROP_DEICE_SWITCH: u32 = 13072;
pub const TOOLTIPTEXT_AVIONICS_SWITCH: u32 = 13073;
pub const TOOLTIPTEXT_SPIRIT_TOGGLE_ECU_WINDOW: u32 = 13088;
pub const TOOLTIPTEXT_SPIRIT_TOGGLE_EIC_WINDOW: u32 = 13089;
pub const TOOLTIPTEXT_SPIRIT_INCLINOMETER: u32 = 13090;
pub const TOOLTIPTEXT_SPIRIT_PITCH_INDICATOR: u32 = 13091;
pub const TOOLTIPTEXT_SPIRIT_PERISCOPE: u32 = 13092;
pub const TOOLTIPTEXT_SPIRIT_FUEL_PRESSURE: u32 = 13093;
pub const TOOLTIPTEXT_SPIRIT_PIONEER_COMPASS: u32 = 13094;
pub const TOOLTIPTEXT_VIMY_FUEL_PRESSURE: u32 = 13096;
pub const TOOLTIPTEXT_VIMY_FUEL_PUMP_PORT: u32 = 13097;
pub const TOOLTIPTEXT_VIMY_FUEL_PUMP_STARBOARD: u32 = 13098;
pub const TOOLTIPTEXT_VIMY_FUEL_VALVE_PORT: u32 = 13099;
pub const TOOLTIPTEXT_VIMY_FUEL_VALVE_STARBOARD: u32 = 13100;
pub const TOOLTIPTEXT_ALTERNATOR_SWITCH: u32 = 13104;
pub const TOOLTIPTEXT_VOLTMETER: u32 = 13105;
pub const TOOLTIPTEXT_HEADING_INDICATOR_HEADING_2: u32 = 13106;
pub const TOOLTIPTEXT_ADF1_BEARING_TO_STATION: u32 = 13107;
pub const TOOLTIPTEXT_ADF_WINDOW: u32 = 13108;
pub const TOOLTIPTEXT_FUEL_TRANSFER_PUMP: u32 = 13109;
pub const TOOLTIPTEXT_VEGA_FUEL_SELECTOR: u32 = 13110;
pub const TOOLTIPTEXT_AUTOPILOT_HEADING_REF: u32 = 13111;
pub const TOOLTIPTEXT_GENERATOR_SWITCH: u32 = 13112;
pub const TOOLTIPTEXT_FUEL_PRESSURE: u32 = 13113;
pub const TOOLTIPTEXT_AIRSPEED_MPH: u32 = 13114;
pub const TOOLTIPTEXT_WRIGHT_FLYER_DISTANCE: u32 = 13115;
pub const TOOLTIPTEXT_WRIGHT_FLYER_ELAPSED_TIME: u32 = 13116;
pub const TOOLTIPTEXT_ATTITUDE_GYRO_CAGE: u32 = 13117;
pub const TOOLTIPTEXT_ATTITUDE_GYRO_CAGE_2: u32 = 13118;
pub const TOOLTIPTEXT_ENGINE_PERCENT_RPM: u32 = 13119;
pub const TOOLTIPTEXT_ROTOR_PERCENT_RPM: u32 = 13120;
pub const TOOLTIPTEXT_TOGGLE_PEDESTAL_WINDOW: u32 = 13121;
pub const TOOLTIPTEXT_CARB_TEMPERATURE_CELSIUS: u32 = 13122;
pub const TOOLTIPTEXT_CARB_HEAT: u32 = 13123;
pub const TOOLTIPTEXT_R22_MAIN_FUEL_PERCENT: u32 = 13124;
pub const TOOLTIPTEXT_R22_AUX_FUEL_PERCENT: u32 = 13125;
pub const TOOLTIPTEXT_R22_RT_TRIM: u32 = 13126;
pub const TOOLTIPTEXT_R22_THROTTLE_PERCENT: u32 = 13127;
pub const TOOLTIPTEXT_ROTOR_GOVERNOR: u32 = 13128;
pub const TOOLTIPTEXT_ROTOR_GOVERNOR_SWITCH: u32 = 13129;
pub const TOOLTIPTEXT_ROTOR_BRAKE: u32 = 13130;
pub const TOOLTIPTEXT_ROTOR_BRAKE_HANDLE: u32 = 13131;
pub const TOOLTIPTEXT_ROTOR_CLUTCH: u32 = 13132;
pub const TOOLTIPTEXT_ROTOR_CLUTCH_SWITCH: u32 = 13133;
pub const TOOLTIPTEXT_FUEL_VALVE: u32 = 13134;
pub const TOOLTIPTEXT_TOGGLE_FLAPS_WINDOW: u32 = 13135;
pub const TOOLTIPTEXT_MANIFOLD_PRESSURE_PSI: u32 = 13136;
pub const TOOLTIPTEXT_ENG1_MANIFOLD_PRESSURE_PSI: u32 = 13137;
pub const TOOLTIPTEXT_ENG2_MANIFOLD_PRESSURE_PSI: u32 = 13138;
pub const TOOLTIPTEXT_ENG3_MANIFOLD_PRESSURE_PSI: u32 = 13139;
pub const TOOLTIPTEXT_ENG4_MANIFOLD_PRESSURE_PSI: u32 = 13140;
pub const TOOLTIPTEXT_BATTERY_LOAD: u32 = 13141;
pub const TOOLTIPTEXT_SIDE_SLIP: u32 = 13142;
pub const TOOLTIPTEXT_COMET_LEFT_FUEL_SELECTOR: u32 = 13143;
pub const TOOLTIPTEXT_COMET_RIGHT_FUEL_SELECTOR: u32 = 13144;
pub const TOOLTIPTEXT_COMET_CROSSFEED: u32 = 13145;
pub const TOOLTIPTEXT_COMET_FRONT_TANK_FUEL_QTY: u32 = 13146;
pub const TOOLTIPTEXT_COMET_CENTER_TANK_FUEL_QTY: u32 = 13147;
pub const TOOLTIPTEXT_DC3_ENG1_FUEL_PRESSURE_LOW: u32 = 13148;
pub const TOOLTIPTEXT_DC3_ENG2_FUEL_PRESSURE_LOW: u32 = 13149;
pub const TOOLTIPTEXT_DC3_ENG1_OIL_PRESSURE_LOW: u32 = 13150;
pub const TOOLTIPTEXT_DC3_ENG2_OIL_PRESSURE_LOW: u32 = 13151;
pub const TOOLTIPTEXT_DC3_VOLTAGE_LOW: u32 = 13152;
pub const TOOLTIPTEXT_DC3_VACUUM_LOW: u32 = 13153;
pub const TOOLTIPTEXT_FORD_TRIMOTOR_FUEL_GAUGE_SELECTOR: u32 = 13154;
pub const TOOLTIPTEXT_DC3_FUEL_GAUGE_SELECTOR: u32 = 13155;
pub const TOOLTIPTEXT_DC3_RMI1_SELECTOR: u32 = 13156;
pub const TOOLTIPTEXT_DC3_RMI2_SELECTOR: u32 = 13157;
pub const TOOLTIPTEXT_DC3_ADF_SIGNAL_STRENGTH: u32 = 13158;
pub const TOOLTIPTEXT_LANDING_GEAR_LATCH: u32 = 13159;
pub const TOOLTIPTEXT_WRIGHT_FLYER_ANEMOMETER: u32 = 13160;
pub const TOOLTIPTEXT_ENG1_RADIATOR_SHUTTER_PERCENT: u32 = 13161;
pub const TOOLTIPTEXT_ENG2_RADIATOR_SHUTTER_PERCENT: u32 = 13162;
pub const TOOLTIPTEXT_ENG1_GENERATOR_AMPS: u32 = 13163;
pub const TOOLTIPTEXT_ENG2_GENERATOR_AMPS: u32 = 13164;
pub const TOOLTIPTEXT_TOGGLE_OTHER_WINDOW: u32 = 13165;
pub const TOOLTIPTEXT_COLLECTIVE: u32 = 13168;
pub const TOOLTIPTEXT_INERTIAL_SEPERATOR: u32 = 13176;
pub const TOOLTIPTEXT_NAV_GPS_SWITCH: u32 = 13184;
pub const TOOLTIPTEXT_MASTER_SWITCH: u32 = 13188;
pub const TOOLTIPTEXT_ENG1_FUEL_PRESSURE: u32 = 13200;
pub const TOOLTIPTEXT_ENG2_FUEL_PRESSURE: u32 = 13201;
pub const TOOLTIPTEXT_ENG3_FUEL_PRESSURE: u32 = 13202;
pub const TOOLTIPTEXT_ENG4_FUEL_PRESSURE: u32 = 13203;
pub const TOOLTIPTEXT_AUTOFEATHER_SWITCH: u32 = 13208;
pub const TOOLTIPTEXT_GPS_NRST_BUTTON: u32 = 13216;
pub const TOOLTIPTEXT_GPS_OBS_BUTTON: u32 = 13217;
pub const TOOLTIPTEXT_GPS_MSG_BUTTON: u32 = 13218;
pub const TOOLTIPTEXT_GPS_FPL_BUTTON: u32 = 13219;
pub const TOOLTIPTEXT_GPS_VNAV_BUTTON: u32 = 13220;
pub const TOOLTIPTEXT_GPS_PROC_BUTTON: u32 = 13221;
pub const TOOLTIPTEXT_GPS_CRSR_BUTTON: u32 = 13222;
pub const TOOLTIPTEXT_GPS_GROUP_KNOB: u32 = 13223;
pub const TOOLTIPTEXT_GPS_GROUP_KNOB_RIGHT: u32 = 13224;
pub const TOOLTIPTEXT_GPS_GROUP_KNOB_LEFT: u32 = 13225;
pub const TOOLTIPTEXT_GPS_PAGE_KNOB: u32 = 13226;
pub const TOOLTIPTEXT_GPS_PAGE_KNOB_RIGHT: u32 = 13227;
pub const TOOLTIPTEXT_GPS_PAGE_KNOB_LEFT: u32 = 13228;
pub const TOOLTIPTEXT_GPS_RANGE_UP: u32 = 13230;
pub const TOOLTIPTEXT_GPS_RANGE_DOWN: u32 = 13231;
pub const TOOLTIPTEXT_GPS_DIRECT_TO_BUTTON: u32 = 13232;
pub const TOOLTIPTEXT_GPS_MENU_BUTTON: u32 = 13233;
pub const TOOLTIPTEXT_GPS_CLR_BUTTON: u32 = 13234;
pub const TOOLTIPTEXT_GPS_ENTER_BUTTON: u32 = 13235;
pub const TOOLTIPTEXT_GPS_POWER_BUTTON: u32 = 13236;
pub const TOOLTIPTEXT_GPS_TERR_BUTTON: u32 = 13237;
pub const TOOLTIPTEXT_GPS_QUIT_BUTTON: u32 = 13238;
pub const TOOLTIPTEXT_GPS_IN_BUTTON: u32 = 13239;
pub const TOOLTIPTEXT_GPS_OUT_BUTTON: u32 = 13240;
pub const TOOLTIPTEXT_GPS_PAD_UP: u32 = 13241;
pub const TOOLTIPTEXT_GPS_PAD_DOWN: u32 = 13242;
pub const TOOLTIPTEXT_GPS_PAD_LEFT: u32 = 13243;
pub const TOOLTIPTEXT_GPS_PAD_RIGHT: u32 = 13244;
pub const TOOLTIPTEXT_GPS_ROUTE_BUTTON: u32 = 13245;
pub const TOOLTIPTEXT_GPS_DEFAULT_NAV_PAGE: u32 = 13246;
pub const TOOLTIPTEXT_GPS_MAP_PAGE: u32 = 13247;
pub const TOOLTIPTEXT_GPS_AIRPORT_LOCATION_PAGE: u32 = 13248;
pub const TOOLTIPTEXT_GPS_AIRPORT_RUNWAY_PAGE: u32 = 13249;
pub const TOOLTIPTEXT_GPS_AIRPORT_FREQUENCY_PAGE: u32 = 13250;
pub const TOOLTIPTEXT_GPS_AIRPORT_APPROACH_PAGE: u32 = 13251;
pub const TOOLTIPTEXT_GPS_INTERSECTION_PAGE: u32 = 13252;
pub const TOOLTIPTEXT_GPS_NDB_PAGE: u32 = 13253;
pub const TOOLTIPTEXT_GPS_VOR_PAGE: u32 = 13254;
pub const TOOLTIPTEXT_GPS_NEAREST_AIRPORT_PAGE: u32 = 13255;
pub const TOOLTIPTEXT_GPS_NEAREST_INTERSECTION_PAGE: u32 = 13256;
pub const TOOLTIPTEXT_GPS_NEAREST_NDB_PAGE: u32 = 13257;
pub const TOOLTIPTEXT_GPS_NEAREST_VOR_PAGE: u32 = 13258;
pub const TOOLTIPTEXT_GPS_NEAREST_AIRSPACE_PAGE: u32 = 13259;
pub const TOOLTIPTEXT_GPS_FLIGHT_PLAN_PAGE: u32 = 13260;
pub const TOOLTIPTEXT_GPS_PROCEDURES_PAGE: u32 = 13261;
pub const TOOLTIPTEXT_LOW_ROTOR_RPM_ANNUNCIATOR: u32 = 13262;
pub const TOOLTIPTEXT_ALTERNATOR_ANNUNCIATOR: u32 = 13263;
pub const TOOLTIPTEXT_LOW_OIL_PRESSURE_ANNUNCIATOR: u32 = 13264;
pub const TOOLTIPTEXT_LOW_FUEL_LEVEL_ANNUNCIATOR: u32 = 13265;
pub const TOOLTIPTEXT_STARTER_ANNUNCIATOR: u32 = 13266;
pub const TOOLTIPTEXT_MIXTURE_CUTOFF: u32 = 13267;
pub const TOOLTIPTEXT_ENG1_MIXTURE_CUTOFF: u32 = 13268;
pub const TOOLTIPTEXT_ENG2_MIXTURE_CUTOFF: u32 = 13269;
pub const TOOLTIPTEXT_ENG3_MIXTURE_CUTOFF: u32 = 13270;
pub const TOOLTIPTEXT_ENG4_MIXTURE_CUTOFF: u32 = 13271;
pub const TOOLTIPTEXT_THROTTLE_WRIGHT: u32 = 13272;
pub const TOOLTIPTEXT_FLAPS_ROCKER: u32 = 13273;
pub const TOOLTIPTEXT_DC3_LEFT_FUEL_SELECTOR: u32 = 13280;
pub const TOOLTIPTEXT_DC3_RIGHT_FUEL_SELECTOR: u32 = 13281;
pub const TOOLTIPTEXT_LIGHT_SWITCH_RECOGNITION: u32 = 13282;
pub const TOOLTIPTEXT_AUTOBRAKE_SWITCH: u32 = 13283;
pub const TOOLTIPTEXT_EMERGENCY_THROTTLE_PERCENT: u32 = 13284;
pub const TOOLTIPTEXT_BACKUP_AIRSPEED_KNOTS: u32 = 13285;
pub const TOOLTIPTEXT_BACKUP_AIRSPEED_KILOS: u32 = 13286;
pub const TOOLTIPTEXT_BACKUP_ALTIMETER_METERS: u32 = 13287;
pub const TOOLTIPTEXT_BACKUP_ALTIMETER_FEET: u32 = 13288;
pub const TOOLTIPTEXT_BACKUP_ATTITUDE_INDICATOR_BANK_PITCH: u32 = 13289;
pub const TOOLTIPTEXT_ALTERNATE_STATIC: u32 = 13290;
pub const TOOLTIPTEXT_XPNDR_SET_CODE_1200: u32 = 13291;
pub const TOOLTIPTEXT_XPNDR_STORE_STBY_CODE: u32 = 13292;
pub const TOOLTIPTEXT_XPNDR_RECALL_STBY_CODE: u32 = 13293;
pub const TOOLTIPTEXT_XPNDR_IDENT: u32 = 13294;
pub const TOOLTIPTEXT_XPNDR_REPLY: u32 = 13295;
pub const TOOLTIPTEXT_XPNDR_REPORTED_FLT_LVL: u32 = 13296;
pub const TOOLTIPTEXT_XPNDR_REPORTED_METERS: u32 = 13297;
pub const TOOLTIPTEXT_NAV_DISPLAY: u32 = 13298;
pub const TOOLTIPTEXT_NAV_DISPLAY_POWER: u32 = 13299;
pub const TOOLTIPTEXT_NAV_DISPLAY_GO: u32 = 13300;
pub const TOOLTIPTEXT_NAV_DISPLAY_LEFT: u32 = 13301;
pub const TOOLTIPTEXT_NAV_DISPLAY_UP: u32 = 13302;
pub const TOOLTIPTEXT_NAV_DISPLAY_DOWN: u32 = 13303;
pub const TOOLTIPTEXT_NAV_DISPLAY_RIGHT: u32 = 13304;
pub const TOOLTIPTEXT_CANOPY: u32 = 13305;
pub const TOOLTIPTEXT_MULTI_ENG_RPM: u32 = 13306;
pub const TOOLTIPTEXT_MULTI_ENG_MANIFOLD_PRESSURE_INHG: u32 = 13307;
pub const TOOLTIPTEXT_MULTI_ENG_MANIFOLD_PRESSURE_PASCAL: u32 = 13308;
pub const TOOLTIPTEXT_VHF_NAV1_COURSE: u32 = 13309;
pub const TOOLTIPTEXT_BEAVER_RMI: u32 = 13310;
pub const TOOLTIPTEXT_BEAVER_FUEL_SELECTOR: u32 = 13311;
pub const TOOLTIPTEXT_LOW_FUEL_PRESSURE_ANNUNCIATOR: u32 = 13312;
pub const TOOLTIPTEXT_BEAVER_FRONT_FUEL_GALLONS: u32 = 13313;
pub const TOOLTIPTEXT_BEAVER_CENTER_FUEL_GALLONS: u32 = 13314;
pub const TOOLTIPTEXT_BEAVER_REAR_FUEL_GALLONS: u32 = 13315;
pub const TOOLTIPTEXT_BEAVER_FRONT_FUEL_LITERS: u32 = 13316;
pub const TOOLTIPTEXT_BEAVER_CENTER_FUEL_LITERS: u32 = 13317;
pub const TOOLTIPTEXT_BEAVER_REAR_FUEL_LITERS: u32 = 13318;
pub const TOOLTIPTEXT_FUEL_PRESSURE_KGFSQCM: u32 = 13319;
pub const TOOLTIPTEXT_ENG_PRIMER: u32 = 13320;
pub const TOOLTIPTEXT_BEAVER_FLAP_SELECTOR_EXTEND: u32 = 13321;
pub const TOOLTIPTEXT_BEAVER_FLAP_SELECTOR_RETRACT: u32 = 13322;
pub const TOOLTIPTEXT_BEAVER_FLAP_PUMP: u32 = 13323;
pub const TOOLTIPTEXT_ENGINE_ALTERNATE_AIR: u32 = 13324;
pub const TOOLTIPTEXT_MAGNETO_SWITCH_OFF: u32 = 13325;
pub const TOOLTIPTEXT_MAGNETO_SWITCH_LEFT: u32 = 13326;
pub const TOOLTIPTEXT_MAGNETO_SWITCH_RIGHT: u32 = 13327;
pub const TOOLTIPTEXT_MAGNETO_SWITCH_BOTH: u32 = 13328;
pub const TOOLTIPTEXT_STALL_WARNING: u32 = 13329;
pub const TOOLTIPTEXT_VHF_NAV2_COURSE: u32 = 13330;
pub const TOOLTIPTEXT_LEFT_FUEL_WITH_AUX_TANK_GALLONS: u32 = 13331;
pub const TOOLTIPTEXT_RIGHT_FUEL_WITH_AUX_TANK_GALLONS: u32 = 13332;
pub const TOOLTIPTEXT_LEFT_FUEL_WITH_AUX_TANK_LITERS: u32 = 13333;
pub const TOOLTIPTEXT_RIGHT_FUEL_WITH_AUX_TANK_LITERS: u32 = 13334;
pub const TOOLTIPTEXT_WATER_BALLAST_DRAIN_VALVE: u32 = 13335;
pub const TOOLTIPTEXT_GENERATOR_WARNING_LIGHT: u32 = 13336;
pub const TOOLTIPTEXT_OIL_PRESSURE_WARNING_LIGHT: u32 = 13337;
pub const TOOLTIPTEXT_FUEL_PRESSURE_WARNING_LIGHT: u32 = 13338;
pub const TOOLTIPTEXT_ENGINE_FIRE_WARNING_LIGHT: u32 = 13339;
pub const TOOLTIPTEXT_ENG1_FUEL_PRESSURE_KGFSQCM: u32 = 13340;
pub const TOOLTIPTEXT_ENG2_FUEL_PRESSURE_KGFSQCM: u32 = 13341;
pub const TOOLTIPTEXT_ENG3_FUEL_PRESSURE_KGFSQCM: u32 = 13342;
pub const TOOLTIPTEXT_ENG4_FUEL_PRESSURE_KGFSQCM: u32 = 13343;
pub const TOOLTIPTEXT_GEAR_SWITCH: u32 = 13344;
pub const TOOLTIPTEXT_CYCLE_NEXT_TARGET: u32 = 13345;
pub const TOOLTIPTEXT_CYCLE_PREVIOUS_TARGET: u32 = 13346;
pub const TOOLTIPTEXT_DISTANCE_TO_TARGET: u32 = 13347;
pub const TOOLTIPTEXT_TARGET_ALTITUDE: u32 = 13348;
pub const TOOLTIPTEXT_GAUGE_FIRE_PROTECTION: u32 = 13349;
pub const TOOLTIPTEXT_ENG1_FIRE_SWITCH: u32 = 13350;
pub const TOOLTIPTEXT_ENG2_FIRE_SWITCH: u32 = 13351;
pub const TOOLTIPTEXT_ENG3_FIRE_SWITCH: u32 = 13352;
pub const TOOLTIPTEXT_ENG4_FIRE_SWITCH: u32 = 13353;
pub const TOOLTIPTEXT_APU_FIRE_SWITCH: u32 = 13354;
pub const TOOLTIPTEXT_APU_SWITCH: u32 = 13355;
pub const TOOLTIPTEXT_APU_FAULT_LIGHT: u32 = 13356;
pub const TOOLTIPTEXT_APU_ONOFF_LIGHT: u32 = 13357;
pub const TOOLTIPTEXT_GAUGE_RADIO_CONTROL_HEAD: u32 = 13358;
pub const TOOLTIPTEXT_RADIO_COM1_SELECT_SWITCH: u32 = 13359;
pub const TOOLTIPTEXT_RADIO_COM1_SWAP_SWITCH: u32 = 13360;
pub const TOOLTIPTEXT_RADIO_COM2_SELECT_SWITCH: u32 = 13361;
pub const TOOLTIPTEXT_RADIO_COM2_SWAP_SWITCH: u32 = 13362;
pub const TOOLTIPTEXT_RADIO_NAV1_SELECT_SWITCH: u32 = 13363;
pub const TOOLTIPTEXT_RADIO_NAV1_SWAP_SWITCH: u32 = 13364;
pub const TOOLTIPTEXT_RADIO_NAV2_SELECT_SWITCH: u32 = 13365;
pub const TOOLTIPTEXT_RADIO_NAV2_SWAP_SWITCH: u32 = 13366;
pub const TOOLTIPTEXT_RADIO_ADF1_SELECT_SWITCH: u32 = 13367;
pub const TOOLTIPTEXT_RADIO_ADF2_SELECT_SWITCH: u32 = 13368;
pub const TOOLTIPTEXT_RADIO_XPDR_SELECT_SWITCH: u32 = 13369;
pub const TOOLTIPTEXT_RADIO_TUNER_KNOB: u32 = 13370;
pub const TOOLTIPTEXT_GAUGE_MFD: u32 = 13371;
pub const TOOLTIPTEXT_SEATBELTS_SWITCH: u32 = 13372;
pub const TOOLTIPTEXT_NOSMOKING_SWITCH: u32 = 13373;
pub const TOOLTIPTEXT_ENG1_IGNITION_SWITCH: u32 = 13374;
pub const TOOLTIPTEXT_ENG2_IGNITION_SWITCH: u32 = 13375;
pub const TOOLTIPTEXT_GAUGE_TRIM: u32 = 13376;
pub const TOOLTIPTEXT_GAUGE_BACKUP_VORADF: u32 = 13377;
pub const TOOLTIPTEXT_GAUGE_BACKUP_ALTASI: u32 = 13378;
pub const TOOLTIPTEXT_GAUGE_ECU: u32 = 13379;
pub const TOOLTIPTEXT_GAUGE_EFIS_CONTROL_HEAD: u32 = 13380;
pub const TOOLTIPTEXT_GAUGE_OVERHEAD_PANEL: u32 = 13381;
pub const TOOLTIPTEXT_LEFT_LDG_LIGHT_RETRACT_SWITCH: u32 = 13382;
pub const TOOLTIPTEXT_RIGHT_LDG_LIGHT_RETRACT_SWITCH: u32 = 13383;
pub const TOOLTIPTEXT_ENG_ANTI_ICE_SWITCH: u32 = 13384;
pub const TOOLTIPTEXT_B737_LE_DEVICES_TEST_SWITCH: u32 = 13385;
pub const TOOLTIPTEXT_B737_MASTER_STARTER_ENG1: u32 = 13386;
pub const TOOLTIPTEXT_B737_MASTER_STARTER_ENG2: u32 = 13387;
pub const TOOLTIPTEXT_B737_DC_VOLTS_SWITCH: u32 = 13392;
pub const TOOLTIPTEXT_B737_GEN1_SWITCH: u32 = 13393;
pub const TOOLTIPTEXT_B737_GEN2_SWITCH: u32 = 13394;
pub const TOOLTIPTEXT_B737_APU1_SWITCH: u32 = 13395;
pub const TOOLTIPTEXT_B737_APU2_SWITCH: u32 = 13396;
pub const TOOLTIPTEXT_B737_EEC1_SWITCH: u32 = 13397;
pub const TOOLTIPTEXT_B737_EEC2_SWITCH: u32 = 13398;
pub const TOOLTIPTEXT_B737_HYD_ENG1_SWITCH: u32 = 13399;
pub const TOOLTIPTEXT_B737_HYD_ENG2_SWITCH: u32 = 13400;
pub const TOOLTIPTEXT_B737_HYD_ELEC_SWITCH: u32 = 13401;
pub const TOOLTIPTEXT_B737_ENG1_OFF_FLT_SWITCH: u32 = 13402;
pub const TOOLTIPTEXT_B737_ENG2_OFF_FLT_SWITCH: u32 = 13403;
pub const TOOLTIPTEXT_B737_ENG_START_SWITCH: u32 = 13404;
pub const TOOLTIPTEXT_TEMP_PLACEHOLDER_SYSTEM: u32 = 13405;
pub const TOOLTIPTEXT_B737_N1_KNOB: u32 = 13406;
pub const TOOLTIPTEXT_C208_INERTIAL_SEPARATOR: u32 = 13407;
pub const TOOLTIPTEXT_C208_VOLT_AMMETER: u32 = 13408;
pub const TOOLTIPTEXT_XMISSION_PRESSURE_PSI: u32 = 13409;
pub const TOOLTIPTEXT_XMISSION_PRESSURE_KGFSQCM: u32 = 13410;
pub const TOOLTIPTEXT_XMISSION_TEMP_F: u32 = 13411;
pub const TOOLTIPTEXT_XMISSION_TEMP_C: u32 = 13412;
pub const TOOLTIPTEXT_FUEL_QUANTITY_GAL: u32 = 13413;
pub const TOOLTIPTEXT_FUEL_QUANTITY_L: u32 = 13414;
pub const TOOLTIPTEXT_ENG_ELECTRICAL_LOAD: u32 = 13415;
pub const TOOLTIPTEXT_TURBINE_TEMPERATURE_F: u32 = 13416;
pub const TOOLTIPTEXT_TURBINE_TEMPERATURE_C: u32 = 13417;
pub const TOOLTIPTEXT_TOTAL_AIR_TEMPERATURE_CELSIUS: u32 = 13418;
pub const TOOLTIPTEXT_G_FORCE: u32 = 13419;
pub const TOOLTIPTEXT_AUTOPILOT_ENGAGE: u32 = 13420;
pub const TOOLTIPTEXT_AUTOPILOT_DISCONNECT: u32 = 13421;
pub const TOOLTIPTEXT_TURB_ENG_IGNITION_SWITCH: u32 = 13422;
pub const TOOLTIPTEXT_EXTRA_FUEL_GAUGE_QUANTITY: u32 = 13423;
pub const TOOLTIPTEXT_DME_AUDIO_SELECTOR: u32 = 13424;
pub const TOOLTIPTEXT_A321_ACTIVE_FREQUENCY: u32 = 13425;
pub const TOOLTIPTEXT_A321_STBY_FREQUENCY: u32 = 13426;
pub const TOOLTIPTEXT_AUTO_LAND: u32 = 13427;
pub const TOOLTIPTEXT_MASTER_WARN: u32 = 13428;
pub const TOOLTIPTEXT_A321_PFD_CHRONO: u32 = 13429;
pub const TOOLTIPTEXT_TOGA: u32 = 13430;
pub const TOOLTIPTEXT_A321_MASTER_STARTER_ENG1: u32 = 13431;
pub const TOOLTIPTEXT_A321_MASTER_STARTER_ENG2: u32 = 13432;
pub const TOOLTIPTEXT_A321_IGNITION_MODE: u32 = 13433;
pub const TOOLTIPTEXT_A321_INERTIAL_DATA_KNOB: u32 = 13434;
pub const TOOLTIPTEXT_A321_INERTIAL_DATA_SWITCH: u32 = 13435;
pub const TOOLTIPTEXT_A321_STD_BARO_PULL: u32 = 13436;
pub const TOOLTIPTEXT_SET_STD_BARO: u32 = 13437;
pub const TOOLTIPTEXT_EMERGENCY_GEAR_HANDLE: u32 = 13438;
pub const TOOLTIPTEXT_GAUGE_EFIS: u32 = 13439;
pub const TOOLTIPTEXT_GAUGE_ECAMS: u32 = 13440;
pub const TOOLTIPTEXT_BACKUP_PFD: u32 = 13441;
pub const TOOLTIPTEXT_CRJ_FLAP_LEVER: u32 = 13442;
pub const TOOLTIPTEXT_A321_ELAC1: u32 = 13443;
pub const TOOLTIPTEXT_A321_ELAC2: u32 = 13444;
pub const TOOLTIPTEXT_A321_SEC1: u32 = 13445;
pub const TOOLTIPTEXT_A321_SEC2: u32 = 13446;
pub const TOOLTIPTEXT_A321_SEC3: u32 = 13447;
pub const TOOLTIPTEXT_A321_FAC1: u32 = 13448;
pub const TOOLTIPTEXT_A321_FAC2: u32 = 13449;
pub const TOOLTIPTEXT_APU_VOLTS: u32 = 13450;
pub const TOOLTIPTEXT_TURB_ENG2_IGNITION_SWITCH: u32 = 13451;
pub const TOOLTIPTEXT_LEAR45_POINTER1_SOURCE_SELECT_SWITCH: u32 = 13452;
pub const TOOLTIPTEXT_LEAR45_POINTER2_SOURCE_SELECT_SWITCH: u32 = 13453;
pub const TOOLTIPTEXT_CRJ_HPA_IN_BUTTON: u32 = 13454;
pub const TOOLTIPTEXT_CRJ_BRG1_BUTTON: u32 = 13455;
pub const TOOLTIPTEXT_CRJ_BRG2_BUTTON: u32 = 13456;
pub const TOOLTIPTEXT_CRJ_MFD_FORMAT: u32 = 13457;
pub const TOOLTIPTEXT_CRJ_MAP_RANGE: u32 = 13458;
pub const TOOLTIPTEXT_CRJ_HALF_BANK: u32 = 13459;
pub const TOOLTIPTEXT_DISPLAY_CONTROL_PANEL: u32 = 13460;
pub const TOOLTIPTEXT_CRJ_BLEED_AIR_SOURCE: u32 = 13461;
pub const TOOLTIPTEXT_COURSE_SELECT: u32 = 13462;
pub const TOOLTIPTEXT_COM_RECEIVE_ALL: u32 = 13463;
pub const TOOLTIPTEXT_AUTOPILOT_MODE_ANNUNCIATOR: u32 = 13464;
pub const TOOLTIPTEXT_RMI_POINTER1: u32 = 13465;
pub const TOOLTIPTEXT_RMI_POINTER2: u32 = 13466;
pub const TOOLTIPTEXT_FIRE_WARNING_LIGHT: u32 = 13467;
pub const TOOLTIPTEXT_B737_EFIS_DISPLAY_MODE: u32 = 13468;
pub const TOOLTIPTEXT_B737_EFIS_DISPLAY_SCALE: u32 = 13469;
pub const TOOLTIPTEXT_B737_MFD_CENTERED: u32 = 13470;
pub const TOOLTIPTEXT_B737_POINTER1: u32 = 13471;
pub const TOOLTIPTEXT_B737_POINTER2: u32 = 13472;
pub const TOOLTIPTEXT_B737_EFIS_SHOW_WAYPOINTS: u32 = 13473;
pub const TOOLTIPTEXT_B737_EFIS_SHOW_AIRPORTS: u32 = 13474;
pub const TOOLTIPTEXT_B737_EFIS_SHOW_NDB: u32 = 13475;
pub const TOOLTIPTEXT_B737_EFIS_SHOW_VOR: u32 = 13476;
pub const TOOLTIPTEXT_B737_AUTOPILOT_BANK_LIMIT: u32 = 13477;
pub const TOOLTIPTEXT_NAV_FREQUENCY_SWAP: u32 = 13478;
pub const TOOLTIPTEXT_COM_FREQUENCY_SWAP: u32 = 13479;
pub const TOOLTIPTEXT_ALTITUDE_BUG_ADJUST: u32 = 13480;
pub const TOOLTIPTEXT_COURSE_ADJUST: u32 = 13481;
pub const TOOLTIPTEXT_G1000_SOFTKEYS: u32 = 13482;
pub const TOOLTIPTEXT_VERTICAL_SPEED_KTS: u32 = 13483;
pub const TOOLTIPTEXT_TOW_RELEASE: u32 = 13484;
pub const TOOLTIPTEXT_DG808S_VARIO_SWITCH: u32 = 13485;
pub const TOOLTIPTEXT_DG808S_GYRO_SWITCH: u32 = 13486;
pub const TOOLTIPTEXT_DG808S_VARIOMETER: u32 = 13487;
pub const TOOLTIPTEXT_ANTISKID: u32 = 13488;
pub const TOOLTIPTEXT_B737_BACKUP_VOR_POINTER1: u32 = 13489;
pub const TOOLTIPTEXT_B737_BACKUP_VOR_POINTER2: u32 = 13490;
pub const TOOLTIPTEXT_B737_CLOCK_CHR: u32 = 13491;
pub const TOOLTIPTEXT_B737_CLOCK_DAT: u32 = 13492;
pub const TOOLTIPTEXT_B737_CLOCK_RUN_HLD: u32 = 13493;
pub const TOOLTIPTEXT_B737_CLOCK_RST: u32 = 13494;
pub const TOOLTIPTEXT_B737_BACKUP_ATTITUDE_ILS_KNOB: u32 = 13495;
pub const TOOLTIPTEXT_B737_BACKUP_ATTITUDE_CAL_KNOB: u32 = 13496;
pub const KEY_ID_MIN: u32 = 65536;
pub const KEY_NULL: u32 = 65536;
pub const KEY_DEMO_STOP: u32 = 65537;
pub const KEY_REPLAY_STOP: u32 = 65537;
pub const KEY_SELECT_1: u32 = 65538;
pub const KEY_SELECT_2: u32 = 65539;
pub const KEY_SELECT_3: u32 = 65540;
pub const KEY_SELECT_4: u32 = 65541;
pub const KEY_DEMO_RECORD_1_SEC: u32 = 65543;
pub const KEY_DEMO_RECORD_5_SEC: u32 = 65544;
pub const KEY_MACRO_BEGIN: u32 = 65546;
pub const KEY_MACRO_END: u32 = 65547;
pub const KEY_MINUS: u32 = 65548;
pub const KEY_PLUS: u32 = 65549;
pub const KEY_ZOOM_1X: u32 = 65550;
pub const KEY_PANEL_SELECT_1: u32 = 65551;
pub const KEY_SOUND_TOGGLE: u32 = 65552;
pub const KEY_FULL_WINDOW_TOGGLE: u32 = 65553;
pub const KEY_ENGINE: u32 = 65554;
pub const KEY_SIM_RATE: u32 = 65555;
pub const KEY_XPNDR: u32 = 65556;
pub const KEY_SLEW_TOGGLE: u32 = 65557;
pub const KEY_EGT: u32 = 65558;
pub const KEY_SMOKE_TOGGLE: u32 = 65559;
pub const KEY_STROBES_TOGGLE: u32 = 65560;
pub const KEY_PAUSE_TOGGLE: u32 = 65561;
pub const KEY_REFRESH_SCENERY: u32 = 65562;
pub const KEY_ATC: u32 = 65564;
pub const KEY_ADF: u32 = 65566;
pub const KEY_VIEW_MODE: u32 = 65567;
pub const KEY_HEADING_GYRO_SET: u32 = 65568;
pub const KEY_DME: u32 = 65569;
pub const KEY_GEAR_TOGGLE: u32 = 65570;
pub const KEY_ANTI_ICE_TOGGLE: u32 = 65571;
pub const KEY_JET_STARTER: u32 = 65572;
pub const KEY_JOYSTICK_CALIBRATE: u32 = 65573;
pub const KEY_ALL_LIGHTS_TOGGLE: u32 = 65574;
pub const KEY_SITUATION_SAVE: u32 = 65575;
pub const KEY_VIEW_WINDOW_TO_FRONT: u32 = 65576;
pub const KEY_DEMO_RECORD_STOP: u32 = 65579;
pub const KEY_ANALYSIS_MANEUVER_STOP: u32 = 65579;
pub const KEY_AP_MASTER: u32 = 65580;
pub const KEY_FREQUENCY_SWAP: u32 = 65581;
pub const KEY_COM_RADIO: u32 = 65582;
pub const KEY_VOR_OBS: u32 = 65583;
pub const KEY_BAROMETRIC: u32 = 65584;
pub const KEY_NAV_RADIO: u32 = 65585;
pub const KEY_MAGNETO: u32 = 65586;
pub const KEY_DEMO_RECORD_MESSAGE: u32 = 65587;
pub const KEY_BRAKES: u32 = 65588;
pub const KEY_SPOILERS_TOGGLE: u32 = 65589;
pub const KEY_SITUATION_RESET: u32 = 65591;
pub const KEY_FLAPS_UP: u32 = 65595;
pub const KEY_THROTTLE_FULL: u32 = 65596;
pub const KEY_FLAPS_1: u32 = 65597;
pub const KEY_THROTTLE_INCR: u32 = 65598;
pub const KEY_FLAPS_2: u32 = 65599;
pub const KEY_THROTTLE_INCR_SMALL: u32 = 65600;
pub const KEY_FLAPS_3: u32 = 65601;
pub const KEY_THROTTLE_DECR: u32 = 65602;
pub const KEY_FLAPS_4: u32 = 65603;
pub const KEY_FLAPS_DOWN: u32 = 65603;
pub const KEY_THROTTLE_CUT: u32 = 65604;
pub const KEY_VIEW: u32 = 65606;
pub const KEY_ELEV_TRIM_DN: u32 = 65607;
pub const KEY_ELEV_DOWN: u32 = 65608;
pub const KEY_INCREASE_THROTTLE: u32 = 65609;
pub const KEY_AILERONS_LEFT: u32 = 65611;
pub const KEY_CENTER_AILER_RUDDER: u32 = 65612;
pub const KEY_AILERONS_RIGHT: u32 = 65613;
pub const KEY_ELEV_TRIM_UP: u32 = 65615;
pub const KEY_ELEV_UP: u32 = 65616;
pub const KEY_DECREASE_THROTTLE: u32 = 65617;
pub const KEY_MOUSE_AS_YOKE_TOGGLE: u32 = 65619;
pub const KEY_SLEW_ALTIT_UP_FAST: u32 = 65620;
pub const KEY_SLEW_ALTIT_UP_SLOW: u32 = 65621;
pub const KEY_SLEW_ALTIT_FREEZE: u32 = 65622;
pub const KEY_SLEW_ALTIT_DN_SLOW: u32 = 65623;
pub const KEY_SLEW_ALTIT_DN_FAST: u32 = 65624;
pub const KEY_SLEW_ALTIT_PLUS: u32 = 65625;
pub const KEY_SLEW_ALTIT_MINUS: u32 = 65626;
pub const KEY_SLEW_PITCH_DN_FAST: u32 = 65627;
pub const KEY_SLEW_PITCH_DN_SLOW: u32 = 65628;
pub const KEY_SLEW_PITCH_FREEZE: u32 = 65629;
pub const KEY_SLEW_PITCH_UP_SLOW: u32 = 65630;
pub const KEY_SLEW_PITCH_UP_FAST: u32 = 65631;
pub const KEY_SLEW_PITCH_PLUS: u32 = 65632;
pub const KEY_SLEW_PITCH_MINUS: u32 = 65633;
pub const KEY_MAGNETO_DECR: u32 = 65634;
pub const KEY_MAGNETO_INCR: u32 = 65635;
pub const KEY_COM_RADIO_WHOLE_DEC: u32 = 65636;
pub const KEY_COM_RADIO_WHOLE_INC: u32 = 65637;
pub const KEY_COM_RADIO_FRACT_DEC: u32 = 65638;
pub const KEY_COM_RADIO_FRACT_INC: u32 = 65639;
pub const KEY_NAV1_RADIO_WHOLE_DEC: u32 = 65640;
pub const KEY_NAV1_RADIO_WHOLE_INC: u32 = 65641;
pub const KEY_NAV1_RADIO_FRACT_DEC: u32 = 65642;
pub const KEY_NAV1_RADIO_FRACT_INC: u32 = 65643;
pub const KEY_NAV2_RADIO_WHOLE_DEC: u32 = 65644;
pub const KEY_NAV2_RADIO_WHOLE_INC: u32 = 65645;
pub const KEY_NAV2_RADIO_FRACT_DEC: u32 = 65646;
pub const KEY_NAV2_RADIO_FRACT_INC: u32 = 65647;
pub const KEY_ADF_100_INC: u32 = 65648;
pub const KEY_ADF_10_INC: u32 = 65649;
pub const KEY_ADF_1_INC: u32 = 65650;
pub const KEY_XPNDR_1000_INC: u32 = 65651;
pub const KEY_XPNDR_100_INC: u32 = 65652;
pub const KEY_XPNDR_10_INC: u32 = 65653;
pub const KEY_XPNDR_1_INC: u32 = 65654;
pub const KEY_ZOOM_IN: u32 = 65655;
pub const KEY_ZOOM_OUT: u32 = 65656;
pub const KEY_CLOCK_HOURS_DEC: u32 = 65657;
pub const KEY_CLOCK_HOURS_INC: u32 = 65658;
pub const KEY_CLOCK_MINUTES_DEC: u32 = 65659;
pub const KEY_CLOCK_MINUTES_INC: u32 = 65660;
pub const KEY_CLOCK_SECONDS_ZERO: u32 = 65661;
pub const KEY_VOR1_OBI_DEC: u32 = 65662;
pub const KEY_VOR1_OBI_INC: u32 = 65663;
pub const KEY_VOR2_OBI_DEC: u32 = 65664;
pub const KEY_VOR2_OBI_INC: u32 = 65665;
pub const KEY_ADF_100_DEC: u32 = 65666;
pub const KEY_ADF_10_DEC: u32 = 65667;
pub const KEY_ADF_1_DEC: u32 = 65668;
pub const KEY_AP_MASTER_ALT: u32 = 65669;
pub const KEY_MAP_ZOOM_FINE_IN: u32 = 65670;
pub const KEY_PAN_LEFT: u32 = 65671;
pub const KEY_PAN_RIGHT: u32 = 65672;
pub const KEY_MAP_ZOOM_FINE_OUT: u32 = 65673;
pub const KEY_VIEW_FORWARD: u32 = 65674;
pub const KEY_VIEW_FORWARD_RIGHT: u32 = 65675;
pub const KEY_VIEW_RIGHT: u32 = 65676;
pub const KEY_VIEW_REAR_RIGHT: u32 = 65677;
pub const KEY_VIEW_REAR: u32 = 65678;
pub const KEY_VIEW_REAR_LEFT: u32 = 65679;
pub const KEY_VIEW_LEFT: u32 = 65680;
pub const KEY_VIEW_FORWARD_LEFT: u32 = 65681;
pub const KEY_VIEW_DOWN: u32 = 65682;
pub const KEY_ELEVATOR_DOWN: u32 = 65683;
pub const KEY_ELEVATOR_UP: u32 = 65684;
pub const KEY_AILERON_LEFT: u32 = 65685;
pub const KEY_AILERON_CENTER: u32 = 65686;
pub const KEY_AILERON_RIGHT: u32 = 65687;
pub const KEY_RUDDER_LEFT: u32 = 65688;
pub const KEY_RUDDER_CENTER: u32 = 65689;
pub const KEY_RUDDER_RIGHT: u32 = 65690;
pub const KEY_VIEW1_MODE_SET: u32 = 65691;
pub const KEY_SOUND_SET: u32 = 65692;
pub const KEY_VIEW1_DIRECTION_SET: u32 = 65693;
pub const KEY_ELEVATOR_SET: u32 = 65694;
pub const KEY_AILERON_SET: u32 = 65695;
pub const KEY_RUDDER_SET: u32 = 65696;
pub const KEY_THROTTLE_SET: u32 = 65697;
pub const KEY_FLAPS_SET: u32 = 65698;
pub const KEY_GEAR_SET: u32 = 65700;
pub const KEY_VIEW1_ZOOM_SET: u32 = 65701;
pub const KEY_AXIS_IND_SET: u32 = 65702;
pub const KEY_ELEVATOR_TRIM_SET: u32 = 65706;
pub const KEY_COM_RADIO_SET: u32 = 65707;
pub const KEY_NAV1_RADIO_SET: u32 = 65708;
pub const KEY_NAV2_RADIO_SET: u32 = 65709;
pub const KEY_VIEW2_MODE_SET: u32 = 65710;
pub const KEY_VIEW2_DIRECTION_SET: u32 = 65711;
pub const KEY_VIEW2_ZOOM_SET: u32 = 65712;
pub const KEY_MAP_ZOOM_SET: u32 = 65713;
pub const KEY_ADF_SET: u32 = 65714;
pub const KEY_XPNDR_SET: u32 = 65715;
pub const KEY_VOR1_SET: u32 = 65716;
pub const KEY_VOR2_SET: u32 = 65717;
pub const KEY_ZOOM_MINUS: u32 = 65718;
pub const KEY_ZOOM_PLUS: u32 = 65719;
pub const KEY_BRAKES_LEFT: u32 = 65720;
pub const KEY_BRAKES_RIGHT: u32 = 65721;
pub const KEY_AP_ATT_HOLD: u32 = 65722;
pub const KEY_AP_LOC_HOLD: u32 = 65723;
pub const KEY_AP_APR_HOLD: u32 = 65724;
pub const KEY_AP_HDG_HOLD: u32 = 65725;
pub const KEY_AP_ALT_HOLD: u32 = 65726;
pub const KEY_AP_WING_LEVELER: u32 = 65727;
pub const KEY_AP_BC_HOLD: u32 = 65728;
pub const KEY_AP_NAV1_HOLD: u32 = 65729;
pub const KEY_SLEW_OFF: u32 = 65730;
pub const KEY_SLEW_ON: u32 = 65731;
pub const KEY_EXIT: u32 = 65732;
pub const KEY_ABORT: u32 = 65733;
pub const KEY_PAN_UP: u32 = 65734;
pub const KEY_PAN_DOWN: u32 = 65735;
pub const KEY_READOUTS_SLEW: u32 = 65736;
pub const KEY_READOUTS_FLIGHT: u32 = 65737;
pub const KEY_SLEW_BANK_MINUS: u32 = 65738;
pub const KEY_SLEW_AHEAD_PLUS: u32 = 65739;
pub const KEY_SLEW_BANK_PLUS: u32 = 65740;
pub const KEY_SLEW_LEFT: u32 = 65741;
pub const KEY_SLEW_FREEZE: u32 = 65742;
pub const KEY_SLEW_RIGHT: u32 = 65743;
pub const KEY_SLEW_HEADING_MINUS: u32 = 65744;
pub const KEY_SLEW_AHEAD_MINUS: u32 = 65745;
pub const KEY_SLEW_HEADING_PLUS: u32 = 65746;
pub const KEY_PANEL_SELECT_2: u32 = 65747;
pub const KEY_PANEL_TOGGLE: u32 = 65748;
pub const KEY_VIEW_MODE_REV: u32 = 65749;
pub const KEY_PANEL_LIGHTS_TOGGLE: u32 = 65750;
pub const KEY_LANDING_LIGHTS_TOGGLE: u32 = 65751;
pub const KEY_PARKING_BRAKES: u32 = 65752;
pub const KEY_ZOOM_IN_FINE: u32 = 65754;
pub const KEY_ZOOM_OUT_FINE: u32 = 65755;
pub const KEY_MINUS_SHIFT: u32 = 65756;
pub const KEY_PLUS_SHIFT: u32 = 65757;
pub const KEY_FLAPS_INCR: u32 = 65758;
pub const KEY_FLAPS_DECR: u32 = 65759;
pub const KEY_FLAPS_DETENTS_SET: u32 = 65760;
pub const KEY_AXIS_ELEVATOR_SET: u32 = 65762;
pub const KEY_AXIS_AILERONS_SET: u32 = 65763;
pub const KEY_AXIS_RUDDER_SET: u32 = 65764;
pub const KEY_AXIS_THROTTLE_SET: u32 = 65765;
pub const KEY_AXIS_ELEV_TRIM_SET: u32 = 65766;
pub const KEY_PROP_PITCH_SET: u32 = 65767;
pub const KEY_PROP_PITCH_LO: u32 = 65768;
pub const KEY_PROP_PITCH_INCR: u32 = 65769;
pub const KEY_PROP_PITCH_INCR_SMALL: u32 = 65770;
pub const KEY_PROP_PITCH_DECR: u32 = 65771;
pub const KEY_PROP_PITCH_HI: u32 = 65772;
pub const KEY_MIXTURE_SET: u32 = 65773;
pub const KEY_MIXTURE_RICH: u32 = 65774;
pub const KEY_MIXTURE_INCR: u32 = 65775;
pub const KEY_MIXTURE_INCR_SMALL: u32 = 65776;
pub const KEY_MIXTURE_DECR: u32 = 65777;
pub const KEY_MIXTURE_LEAN: u32 = 65778;
pub const KEY_SCRIPT_EVENT_1: u32 = 65782;
pub const KEY_SCRIPT_EVENT_2: u32 = 65783;
pub const KEY_VIEW_DIRECTION_SET: u32 = 65784;
pub const KEY_MOUSE_AS_YOKE_SUSPEND: u32 = 65784;
pub const KEY_MOUSE_AS_YOKE_RESUME: u32 = 65785;
pub const KEY_SPOILERS_SET: u32 = 65786;
pub const KEY_DME1_TOGGLE: u32 = 65787;
pub const KEY_DME2_TOGGLE: u32 = 65788;
pub const KEY_SIM_RATE_INCR: u32 = 65789;
pub const KEY_SIM_RATE_DECR: u32 = 65790;
pub const KEY_AUTOPILOT_OFF: u32 = 65791;
pub const KEY_AUTOPILOT_ON: u32 = 65792;
pub const KEY_YAW_DAMPER_TOGGLE: u32 = 65793;
pub const KEY_PAUSE_ON: u32 = 65794;
pub const KEY_PAUSE_OFF: u32 = 65795;
pub const KEY_SLEW_RESET: u32 = 65796;
pub const KEY_AP_PANEL_HEADING_HOLD: u32 = 65798;
pub const KEY_AP_PANEL_ALTITUDE_HOLD: u32 = 65799;
pub const KEY_CHVPP_LEFT_HAT_UP: u32 = 65800;
pub const KEY_CHVPP_LEFT_HAT_DOWN: u32 = 65801;
pub const KEY_CHVPP_AP_ALT_WING: u32 = 65802;
pub const KEY_CENTER_NT361_CHECK: u32 = 65803;
pub const KEY_AP_ATT_HOLD_ON: u32 = 65804;
pub const KEY_AP_LOC_HOLD_ON: u32 = 65805;
pub const KEY_AP_APR_HOLD_ON: u32 = 65806;
pub const KEY_AP_HDG_HOLD_ON: u32 = 65807;
pub const KEY_AP_ALT_HOLD_ON: u32 = 65808;
pub const KEY_AP_WING_LEVELER_ON: u32 = 65809;
pub const KEY_AP_BC_HOLD_ON: u32 = 65810;
pub const KEY_AP_NAV1_HOLD_ON: u32 = 65811;
pub const KEY_AP_ATT_HOLD_OFF: u32 = 65812;
pub const KEY_AP_LOC_HOLD_OFF: u32 = 65813;
pub const KEY_AP_APR_HOLD_OFF: u32 = 65814;
pub const KEY_AP_HDG_HOLD_OFF: u32 = 65815;
pub const KEY_AP_ALT_HOLD_OFF: u32 = 65816;
pub const KEY_AP_WING_LEVELER_OFF: u32 = 65817;
pub const KEY_AP_BC_HOLD_OFF: u32 = 65818;
pub const KEY_AP_NAV1_HOLD_OFF: u32 = 65819;
pub const KEY_THROTTLE1_SET: u32 = 65820;
pub const KEY_THROTTLE2_SET: u32 = 65821;
pub const KEY_THROTTLE3_SET: u32 = 65822;
pub const KEY_THROTTLE4_SET: u32 = 65823;
pub const KEY_CLOSE_VIEW: u32 = 65824;
pub const KEY_NEW_VIEW: u32 = 65825;
pub const KEY_NEW_MAP: u32 = 65826;
pub const KEY_NEXT_VIEW: u32 = 65827;
pub const KEY_PREV_VIEW: u32 = 65828;
pub const KEY_VIEW_TYPE: u32 = 65829;
pub const KEY_VIEW_TYPE_REV: u32 = 65830;
pub const KEY_RADIO_VOR1_IDENT_DISABLE: u32 = 65832;
pub const KEY_RADIO_VOR2_IDENT_DISABLE: u32 = 65833;
pub const KEY_RADIO_DME1_IDENT_DISABLE: u32 = 65834;
pub const KEY_RADIO_DME2_IDENT_DISABLE: u32 = 65835;
pub const KEY_RADIO_ADF_IDENT_DISABLE: u32 = 65836;
pub const KEY_RADIO_VOR1_IDENT_ENABLE: u32 = 65837;
pub const KEY_RADIO_VOR2_IDENT_ENABLE: u32 = 65838;
pub const KEY_RADIO_DME1_IDENT_ENABLE: u32 = 65839;
pub const KEY_RADIO_DME2_IDENT_ENABLE: u32 = 65840;
pub const KEY_RADIO_ADF_IDENT_ENABLE: u32 = 65841;
pub const KEY_RADIO_VOR1_IDENT_TOGGLE: u32 = 65842;
pub const KEY_RADIO_VOR2_IDENT_TOGGLE: u32 = 65843;
pub const KEY_RADIO_DME1_IDENT_TOGGLE: u32 = 65844;
pub const KEY_RADIO_DME2_IDENT_TOGGLE: u32 = 65845;
pub const KEY_RADIO_ADF_IDENT_TOGGLE: u32 = 65846;
pub const KEY_RADIO_VOR1_IDENT_SET: u32 = 65847;
pub const KEY_RADIO_VOR2_IDENT_SET: u32 = 65848;
pub const KEY_RADIO_DME1_IDENT_SET: u32 = 65849;
pub const KEY_RADIO_DME2_IDENT_SET: u32 = 65850;
pub const KEY_RADIO_ADF_IDENT_SET: u32 = 65851;
pub const KEY_GEAR_PUMP: u32 = 65852;
pub const KEY_SPOILERS_ARM_TOGGLE: u32 = 65853;
pub const KEY_PAN_LEFT_UP: u32 = 65854;
pub const KEY_PAN_LEFT_DOWN: u32 = 65855;
pub const KEY_PAN_RIGHT_UP: u32 = 65856;
pub const KEY_PAN_RIGHT_DOWN: u32 = 65857;
pub const KEY_PITOT_HEAT_TOGGLE: u32 = 65858;
pub const KEY_AP_AIRSPEED_HOLD: u32 = 65859;
pub const KEY_AUTO_THROTTLE_ARM: u32 = 65860;
pub const KEY_AUTO_THROTTLE_TO_GA: u32 = 65861;
pub const KEY_LANDING_LIGHT_UP: u32 = 65862;
pub const KEY_LANDING_LIGHT_DOWN: u32 = 65863;
pub const KEY_LANDING_LIGHT_LEFT: u32 = 65864;
pub const KEY_LANDING_LIGHT_RIGHT: u32 = 65865;
pub const KEY_LANDING_LIGHT_HOME: u32 = 65866;
pub const KEY_AXIS_SLEW_AHEAD_SET: u32 = 65867;
pub const KEY_AXIS_SLEW_SIDEWAYS_SET: u32 = 65868;
pub const KEY_AXIS_SLEW_HEADING_SET: u32 = 65869;
pub const KEY_AXIS_SLEW_ALT_SET: u32 = 65870;
pub const KEY_AXIS_SLEW_BANK_SET: u32 = 65871;
pub const KEY_AXIS_SLEW_PITCH_SET: u32 = 65872;
pub const KEY_PAN_TILT_LEFT: u32 = 65873;
pub const KEY_PAN_TILT_RIGHT: u32 = 65874;
pub const KEY_PAN_RESET: u32 = 65875;
pub const KEY_KNEEBOARD: u32 = 65876;
pub const KEY_GYRO_DRIFT_INC: u32 = 65877;
pub const KEY_GYRO_DRIFT_DEC: u32 = 65878;
pub const KEY_HEADING_BUG_INC: u32 = 65879;
pub const KEY_HEADING_BUG_DEC: u32 = 65880;
pub const KEY_ADF_CARD_INC: u32 = 65881;
pub const KEY_ADF_CARD_DEC: u32 = 65882;
pub const KEY_KOHLSMAN_INC: u32 = 65883;
pub const KEY_KOHLSMAN_DEC: u32 = 65884;
pub const KEY_TRUE_AIRSPEED_CALIBRATE_INC: u32 = 65885;
pub const KEY_TRUE_AIRSPEED_CALIBRATE_DEC: u32 = 65886;
pub const KEY_CROSS_FEED_OFF: u32 = 65887;
pub const KEY_CROSS_FEED_LEFT_TO_RIGHT: u32 = 65888;
pub const KEY_CROSS_FEED_RIGHT_TO_LEFT: u32 = 65889;
pub const KEY_AP_PANEL_VS_HOLD: u32 = 65890;
pub const KEY_AP_PANEL_SPEED_HOLD: u32 = 65891;
pub const KEY_AP_ALT_VAR_INC: u32 = 65892;
pub const KEY_AP_ALT_VAR_DEC: u32 = 65893;
pub const KEY_AP_VS_VAR_INC: u32 = 65894;
pub const KEY_AP_VS_VAR_DEC: u32 = 65895;
pub const KEY_AP_SPD_VAR_INC: u32 = 65896;
pub const KEY_AP_SPD_VAR_DEC: u32 = 65897;
pub const KEY_AP_N1_REF_INC: u32 = 65898;
pub const KEY_AP_N1_REF_DEC: u32 = 65899;
pub const KEY_AP_N1_REF_SET: u32 = 65900;
pub const KEY_MULTIPLAYER_TRANSFER_CONTROL: u32 = 65901;
pub const KEY_MULTIPLAYER_PLAYER_CYCLE: u32 = 65902;
pub const KEY_MULTIPLAYER_PLAYER_FOLLOW: u32 = 65903;
pub const KEY_MULTIPLAYER_CHAT: u32 = 65904;
pub const KEY_MULTIPLAYER_ACTIVATE_CHAT: u32 = 65905;
pub const KEY_PANEL_1: u32 = 65906;
pub const KEY_PANEL_2: u32 = 65907;
pub const KEY_PANEL_3: u32 = 65908;
pub const KEY_PANEL_4: u32 = 65909;
pub const KEY_PANEL_5: u32 = 65910;
pub const KEY_PANEL_6: u32 = 65911;
pub const KEY_PANEL_7: u32 = 65912;
pub const KEY_PANEL_8: u32 = 65913;
pub const KEY_PANEL_9: u32 = 65914;
pub const KEY_AP_PANEL_MACH_HOLD: u32 = 65915;
pub const KEY_AP_MACH_VAR_INC: u32 = 65916;
pub const KEY_AP_MACH_VAR_DEC: u32 = 65917;
pub const KEY_AP_MACH_HOLD: u32 = 65918;
pub const KEY_MIXTURE1_SET: u32 = 65919;
pub const KEY_MIXTURE2_SET: u32 = 65920;
pub const KEY_MIXTURE3_SET: u32 = 65921;
pub const KEY_MIXTURE4_SET: u32 = 65922;
pub const KEY_PROP_PITCH1_SET: u32 = 65923;
pub const KEY_PROP_PITCH2_SET: u32 = 65924;
pub const KEY_PROP_PITCH3_SET: u32 = 65925;
pub const KEY_PROP_PITCH4_SET: u32 = 65926;
pub const KEY_MAGNETO1_OFF: u32 = 65927;
pub const KEY_MAGNETO1_RIGHT: u32 = 65928;
pub const KEY_MAGNETO1_LEFT: u32 = 65929;
pub const KEY_MAGNETO1_BOTH: u32 = 65930;
pub const KEY_MAGNETO1_START: u32 = 65931;
pub const KEY_STARTER1_SET: u32 = 65932;
pub const KEY_MAGNETO2_OFF: u32 = 65933;
pub const KEY_MAGNETO2_RIGHT: u32 = 65934;
pub const KEY_MAGNETO2_LEFT: u32 = 65935;
pub const KEY_MAGNETO2_BOTH: u32 = 65936;
pub const KEY_MAGNETO2_START: u32 = 65937;
pub const KEY_STARTER2_SET: u32 = 65938;
pub const KEY_MAGNETO3_OFF: u32 = 65939;
pub const KEY_MAGNETO3_RIGHT: u32 = 65940;
pub const KEY_MAGNETO3_LEFT: u32 = 65941;
pub const KEY_MAGNETO3_BOTH: u32 = 65942;
pub const KEY_MAGNETO3_START: u32 = 65943;
pub const KEY_STARTER3_SET: u32 = 65944;
pub const KEY_MAGNETO4_OFF: u32 = 65945;
pub const KEY_MAGNETO4_RIGHT: u32 = 65946;
pub const KEY_MAGNETO4_LEFT: u32 = 65947;
pub const KEY_MAGNETO4_BOTH: u32 = 65948;
pub const KEY_MAGNETO4_START: u32 = 65949;
pub const KEY_STARTER4_SET: u32 = 65950;
pub const KEY_AUTOCOORD_TOGGLE: u32 = 65951;
pub const KEY_AUTOCOORD_OFF: u32 = 65952;
pub const KEY_AUTOCOORD_ON: u32 = 65953;
pub const KEY_AUTOCOORD_SET: u32 = 65954;
pub const KEY_FUEL_SELECTOR_OFF: u32 = 65955;
pub const KEY_FUEL_SELECTOR_ALL: u32 = 65956;
pub const KEY_FUEL_SELECTOR_LEFT: u32 = 65957;
pub const KEY_FUEL_SELECTOR_RIGHT: u32 = 65958;
pub const KEY_FUEL_SELECTOR_LEFT_AUX: u32 = 65959;
pub const KEY_FUEL_SELECTOR_RIGHT_AUX: u32 = 65960;
pub const KEY_FUEL_SELECTOR_CENTER: u32 = 65961;
pub const KEY_FUEL_SELECTOR_SET: u32 = 65962;
pub const KEY_THROTTLE1_FULL: u32 = 65963;
pub const KEY_THROTTLE1_INCR: u32 = 65964;
pub const KEY_THROTTLE1_INCR_SMALL: u32 = 65965;
pub const KEY_THROTTLE1_DECR: u32 = 65966;
pub const KEY_THROTTLE1_CUT: u32 = 65967;
pub const KEY_THROTTLE2_FULL: u32 = 65968;
pub const KEY_THROTTLE2_INCR: u32 = 65969;
pub const KEY_THROTTLE2_INCR_SMALL: u32 = 65970;
pub const KEY_THROTTLE2_DECR: u32 = 65971;
pub const KEY_THROTTLE2_CUT: u32 = 65972;
pub const KEY_THROTTLE3_FULL: u32 = 65973;
pub const KEY_THROTTLE3_INCR: u32 = 65974;
pub const KEY_THROTTLE3_INCR_SMALL: u32 = 65975;
pub const KEY_THROTTLE3_DECR: u32 = 65976;
pub const KEY_THROTTLE3_CUT: u32 = 65977;
pub const KEY_THROTTLE4_FULL: u32 = 65978;
pub const KEY_THROTTLE4_INCR: u32 = 65979;
pub const KEY_THROTTLE4_INCR_SMALL: u32 = 65980;
pub const KEY_THROTTLE4_DECR: u32 = 65981;
pub const KEY_THROTTLE4_CUT: u32 = 65982;
pub const KEY_MIXTURE1_RICH: u32 = 65983;
pub const KEY_MIXTURE1_INCR: u32 = 65984;
pub const KEY_MIXTURE1_INCR_SMALL: u32 = 65985;
pub const KEY_MIXTURE1_DECR: u32 = 65986;
pub const KEY_MIXTURE1_LEAN: u32 = 65987;
pub const KEY_MIXTURE2_RICH: u32 = 65988;
pub const KEY_MIXTURE2_INCR: u32 = 65989;
pub const KEY_MIXTURE2_INCR_SMALL: u32 = 65990;
pub const KEY_MIXTURE2_DECR: u32 = 65991;
pub const KEY_MIXTURE2_LEAN: u32 = 65992;
pub const KEY_MIXTURE3_RICH: u32 = 65993;
pub const KEY_MIXTURE3_INCR: u32 = 65994;
pub const KEY_MIXTURE3_INCR_SMALL: u32 = 65995;
pub const KEY_MIXTURE3_DECR: u32 = 65996;
pub const KEY_MIXTURE3_LEAN: u32 = 65997;
pub const KEY_MIXTURE4_RICH: u32 = 65998;
pub const KEY_MIXTURE4_INCR: u32 = 65999;
pub const KEY_MIXTURE4_INCR_SMALL: u32 = 66000;
pub const KEY_MIXTURE4_DECR: u32 = 66001;
pub const KEY_MIXTURE4_LEAN: u32 = 66002;
pub const KEY_PROP_PITCH1_LO: u32 = 66003;
pub const KEY_PROP_PITCH1_INCR: u32 = 66004;
pub const KEY_PROP_PITCH1_INCR_SMALL: u32 = 66005;
pub const KEY_PROP_PITCH1_DECR: u32 = 66006;
pub const KEY_PROP_PITCH1_HI: u32 = 66007;
pub const KEY_PROP_PITCH2_LO: u32 = 66008;
pub const KEY_PROP_PITCH2_INCR: u32 = 66009;
pub const KEY_PROP_PITCH2_INCR_SMALL: u32 = 66010;
pub const KEY_PROP_PITCH2_DECR: u32 = 66011;
pub const KEY_PROP_PITCH2_HI: u32 = 66012;
pub const KEY_PROP_PITCH3_LO: u32 = 66013;
pub const KEY_PROP_PITCH3_INCR: u32 = 66014;
pub const KEY_PROP_PITCH3_INCR_SMALL: u32 = 66015;
pub const KEY_PROP_PITCH3_DECR: u32 = 66016;
pub const KEY_PROP_PITCH3_HI: u32 = 66017;
pub const KEY_PROP_PITCH4_LO: u32 = 66018;
pub const KEY_PROP_PITCH4_INCR: u32 = 66019;
pub const KEY_PROP_PITCH4_INCR_SMALL: u32 = 66020;
pub const KEY_PROP_PITCH4_DECR: u32 = 66021;
pub const KEY_PROP_PITCH4_HI: u32 = 66022;
pub const KEY_MAGNETO_OFF: u32 = 66023;
pub const KEY_STARTER_OFF: u32 = 66023;
pub const KEY_MAGNETO_RIGHT: u32 = 66024;
pub const KEY_STARTER_START: u32 = 66024;
pub const KEY_MAGNETO_LEFT: u32 = 66025;
pub const KEY_STARTER_GEN: u32 = 66025;
pub const KEY_MAGNETO_BOTH: u32 = 66026;
pub const KEY_MAGNETO_START: u32 = 66027;
pub const KEY_STARTER_SET: u32 = 66028;
pub const KEY_ANTI_ICE_ON: u32 = 66029;
pub const KEY_ANTI_ICE_OFF: u32 = 66030;
pub const KEY_ANTI_ICE_SET: u32 = 66031;
pub const KEY_EGT_INC: u32 = 66032;
pub const KEY_EGT_DEC: u32 = 66033;
pub const KEY_EGT_SET: u32 = 66034;
pub const KEY_AP_ALT_VAR_SET_METRIC: u32 = 66035;
pub const KEY_AP_VS_VAR_SET_ENGLISH: u32 = 66036;
pub const KEY_AP_SPD_VAR_SET: u32 = 66037;
pub const KEY_AP_MACH_VAR_SET: u32 = 66038;
pub const KEY_ADF_CARD_SET: u32 = 66039;
pub const KEY_KOHLSMAN_SET: u32 = 66040;
pub const KEY_SIM_RATE_SET: u32 = 66041;
pub const KEY_HEADING_BUG_SET: u32 = 66042;
pub const KEY_TRUE_AIRSPEED_CAL_SET: u32 = 66043;
pub const KEY_CLOCK_HOURS_SET: u32 = 66044;
pub const KEY_CLOCK_MINUTES_SET: u32 = 66045;
pub const KEY_GYRO_DRIFT_SET: u32 = 66046;
pub const KEY_ADF_EXTENDED_SET: u32 = 66047;
pub const KEY_SLEW_SET: u32 = 66048;
pub const KEY_SMOKE_ON: u32 = 66049;
pub const KEY_SMOKE_OFF: u32 = 66050;
pub const KEY_SMOKE_SET: u32 = 66051;
pub const KEY_STROBES_ON: u32 = 66052;
pub const KEY_STROBES_OFF: u32 = 66053;
pub const KEY_STROBES_SET: u32 = 66054;
pub const KEY_PAUSE_SET: u32 = 66055;
pub const KEY_PANEL_LIGHTS_ON: u32 = 66056;
pub const KEY_PANEL_LIGHTS_OFF: u32 = 66057;
pub const KEY_PANEL_LIGHTS_SET: u32 = 66058;
pub const KEY_LANDING_LIGHTS_ON: u32 = 66059;
pub const KEY_LANDING_LIGHTS_OFF: u32 = 66060;
pub const KEY_LANDING_LIGHTS_SET: u32 = 66061;
pub const KEY_SOUND_ON: u32 = 66062;
pub const KEY_SOUND_OFF: u32 = 66063;
pub const KEY_SPOILERS_ON: u32 = 66064;
pub const KEY_SPOILERS_OFF: u32 = 66065;
pub const KEY_SPOILERS_ARM_ON: u32 = 66066;
pub const KEY_SPOILERS_ARM_OFF: u32 = 66067;
pub const KEY_SPOILERS_ARM_SET: u32 = 66068;
pub const KEY_YAW_DAMPER_ON: u32 = 66069;
pub const KEY_YAW_DAMPER_OFF: u32 = 66070;
pub const KEY_YAW_DAMPER_SET: u32 = 66071;
pub const KEY_PITOT_HEAT_ON: u32 = 66072;
pub const KEY_PITOT_HEAT_OFF: u32 = 66073;
pub const KEY_PITOT_HEAT_SET: u32 = 66074;
pub const KEY_ZULU_HOURS_SET: u32 = 66075;
pub const KEY_ZULU_MINUTES_SET: u32 = 66076;
pub const KEY_ZULU_DAY_SET: u32 = 66077;
pub const KEY_ZULU_YEAR_SET: u32 = 66078;
pub const KEY_GEAR_UP: u32 = 66079;
pub const KEY_GEAR_DOWN: u32 = 66080;
pub const KEY_EGT1_INC: u32 = 66081;
pub const KEY_EGT1_DEC: u32 = 66082;
pub const KEY_EGT1_SET: u32 = 66083;
pub const KEY_EGT2_INC: u32 = 66084;
pub const KEY_EGT2_DEC: u32 = 66085;
pub const KEY_EGT2_SET: u32 = 66086;
pub const KEY_EGT3_INC: u32 = 66087;
pub const KEY_EGT3_DEC: u32 = 66088;
pub const KEY_EGT3_SET: u32 = 66089;
pub const KEY_EGT4_INC: u32 = 66090;
pub const KEY_EGT4_DEC: u32 = 66091;
pub const KEY_EGT4_SET: u32 = 66092;
pub const KEY_AP_AIRSPEED_ON: u32 = 66093;
pub const KEY_AP_AIRSPEED_OFF: u32 = 66094;
pub const KEY_AP_AIRSPEED_SET: u32 = 66095;
pub const KEY_AP_MACH_ON: u32 = 66096;
pub const KEY_AP_MACH_OFF: u32 = 66097;
pub const KEY_AP_MACH_SET: u32 = 66098;
pub const KEY_AP_VS_HOLD: u32 = 66099;
pub const KEY_AP_VS_ON: u32 = 66100;
pub const KEY_AP_VS_OFF: u32 = 66101;
pub const KEY_AP_VS_SET: u32 = 66102;
pub const KEY_AP_PANEL_ALTITUDE_ON: u32 = 66103;
pub const KEY_AP_PANEL_ALTITUDE_OFF: u32 = 66104;
pub const KEY_AP_PANEL_ALTITUDE_SET: u32 = 66105;
pub const KEY_AP_PANEL_HEADING_ON: u32 = 66106;
pub const KEY_AP_PANEL_HEADING_OFF: u32 = 66107;
pub const KEY_AP_PANEL_HEADING_SET: u32 = 66108;
pub const KEY_AP_PANEL_MACH_ON: u32 = 66109;
pub const KEY_AP_PANEL_MACH_OFF: u32 = 66110;
pub const KEY_AP_PANEL_MACH_SET: u32 = 66111;
pub const KEY_AP_PANEL_SPEED_ON: u32 = 66112;
pub const KEY_AP_PANEL_SPEED_OFF: u32 = 66113;
pub const KEY_AP_PANEL_SPEED_SET: u32 = 66114;
pub const KEY_AP_PANEL_VS_ON: u32 = 66115;
pub const KEY_AP_PANEL_VS_OFF: u32 = 66116;
pub const KEY_AP_PANEL_VS_SET: u32 = 66117;
pub const KEY_SEE_OWN_AC_TOGGLE: u32 = 66118;
pub const KEY_SEE_OWN_AC_ON: u32 = 66119;
pub const KEY_SEE_OWN_AC_OFF: u32 = 66120;
pub const KEY_SEE_OWN_AC_SET: u32 = 66121;
pub const KEY_ADF_LOWRANGE_SET: u32 = 66122;
pub const KEY_ADF_HIGHRANGE_SET: u32 = 66123;
pub const KEY_AP_ALT_VAR_SET_ENGLISH: u32 = 66124;
pub const KEY_AP_VS_VAR_SET_METRIC: u32 = 66125;
pub const KEY_MAGNETO1_DECR: u32 = 66126;
pub const KEY_MAGNETO1_INCR: u32 = 66127;
pub const KEY_MAGNETO2_DECR: u32 = 66128;
pub const KEY_MAGNETO2_INCR: u32 = 66129;
pub const KEY_MAGNETO3_DECR: u32 = 66130;
pub const KEY_MAGNETO3_INCR: u32 = 66131;
pub const KEY_MAGNETO4_DECR: u32 = 66132;
pub const KEY_MAGNETO4_INCR: u32 = 66133;
pub const KEY_GUNSIGHT_SEL: u32 = 66135;
pub const KEY_GUNSIGHT_TOGGLE: u32 = 66136;
pub const KEY_VIEW_FORWARD_UP: u32 = 66137;
pub const KEY_VIEW_FORWARD_RIGHT_UP: u32 = 66138;
pub const KEY_VIEW_RIGHT_UP: u32 = 66139;
pub const KEY_VIEW_REAR_RIGHT_UP: u32 = 66140;
pub const KEY_VIEW_REAR_UP: u32 = 66141;
pub const KEY_VIEW_REAR_LEFT_UP: u32 = 66142;
pub const KEY_VIEW_LEFT_UP: u32 = 66143;
pub const KEY_VIEW_FORWARD_LEFT_UP: u32 = 66144;
pub const KEY_VIEW_UP: u32 = 66145;
pub const KEY_SKIP_ACTION: u32 = 66146;
pub const KEY_VIEW_RESET: u32 = 66147;
pub const KEY_MAP_ORIENTATION_SET: u32 = 66148;
pub const KEY_WINDOW_TITLES_SET: u32 = 66149;
pub const KEY_TEXT_SCROLL_SET: u32 = 66150;
pub const KEY_VIEW_ALWAYS_PAN_UP: u32 = 66151;
pub const KEY_VIEW_ALWAYS_PAN_DOWN: u32 = 66152;
pub const KEY_NEXT_SUB_VIEW: u32 = 66153;
pub const KEY_PREV_SUB_VIEW: u32 = 66154;
pub const KEY_FIRE_ALL_GUNS: u32 = 66156;
pub const KEY_FIRE_PRIMARY_GUNS: u32 = 66157;
pub const KEY_FIRE_SECONDARY_GUNS: u32 = 66158;
pub const KEY_COWLFLAP1_SET: u32 = 66162;
pub const KEY_COWLFLAP2_SET: u32 = 66163;
pub const KEY_COWLFLAP3_SET: u32 = 66164;
pub const KEY_COWLFLAP4_SET: u32 = 66165;
pub const KEY_VIEW_TRACK_PAN_TOGGLE: u32 = 66166;
pub const KEY_VIEW_PREVIOUS_TOGGLE: u32 = 66167;
pub const KEY_VIEW_CAMERA_SELECT_STARTING: u32 = 66168;
pub const KEY_TOGGLE_RADAR: u32 = 66170;
pub const KEY_ATC_MENU_1: u32 = 66172;
pub const KEY_ATC_MENU_2: u32 = 66173;
pub const KEY_ATC_MENU_3: u32 = 66174;
pub const KEY_ATC_MENU_4: u32 = 66175;
pub const KEY_ATC_MENU_5: u32 = 66176;
pub const KEY_ATC_MENU_6: u32 = 66177;
pub const KEY_ATC_MENU_7: u32 = 66178;
pub const KEY_ATC_MENU_8: u32 = 66179;
pub const KEY_ATC_MENU_9: u32 = 66180;
pub const KEY_ATC_MENU_0: u32 = 66181;
pub const KEY_VIEW_AUX_00: u32 = 66182;
pub const KEY_VIEW_AUX_01: u32 = 66183;
pub const KEY_VIEW_AUX_02: u32 = 66184;
pub const KEY_VIEW_AUX_03: u32 = 66185;
pub const KEY_VIEW_AUX_04: u32 = 66186;
pub const KEY_VIEW_AUX_05: u32 = 66187;
pub const KEY_INVOKE_HELP: u32 = 66195;
pub const KEY_SELECT_NEXT_TARGET: u32 = 66196;
pub const KEY_UNLOCK_TARGET: u32 = 66198;
pub const KEY_TOGGLE_AIRCRAFT_LABELS: u32 = 66199;
pub const KEY_TOGGLE_DAMAGE_TEXT: u32 = 66200;
pub const KEY_TOGGLE_ENEMY_INDICATOR: u32 = 66201;
pub const KEY_WAR_EMERGENCY_POWER: u32 = 66202;
pub const KEY_BAIL_OUT: u32 = 66203;
pub const KEY_TOGGLE_RADIO: u32 = 66204;
pub const KEY_KEYBOARD_OVERLAY: u32 = 66205;
pub const KEY_HUD_UNITS: u32 = 66209;
pub const KEY_HUD_COLOR: u32 = 66210;
pub const KEY_LETTERBOX: u32 = 66223;
pub const KEY_ENGINE_AUTO_START: u32 = 66224;
pub const KEY_THROTTLE_10: u32 = 66225;
pub const KEY_THROTTLE_20: u32 = 66226;
pub const KEY_THROTTLE_30: u32 = 66227;
pub const KEY_THROTTLE_40: u32 = 66228;
pub const KEY_THROTTLE_50: u32 = 66229;
pub const KEY_THROTTLE_60: u32 = 66230;
pub const KEY_THROTTLE_70: u32 = 66231;
pub const KEY_THROTTLE_80: u32 = 66232;
pub const KEY_THROTTLE_90: u32 = 66233;
pub const KEY_FORCE_END: u32 = 66234;
pub const KEY_FUEL_PUMP: u32 = 66237;
pub const KEY_ENGINE_PRIMER: u32 = 66238;
pub const KEY_TOGGLE_BEACON_LIGHTS: u32 = 66239;
pub const KEY_TOGGLE_TAXI_LIGHTS: u32 = 66240;
pub const KEY_TOGGLE_MASTER_BATTERY: u32 = 66241;
pub const KEY_TOGGLE_MASTER_ALTERNATOR: u32 = 66242;
pub const KEY_INC_COWL_FLAPS: u32 = 66243;
pub const KEY_DEC_COWL_FLAPS: u32 = 66244;
pub const KEY_OVERLAYMENU: u32 = 66267;
pub const KEY_USERINTERRUPT: u32 = 66268;
pub const KEY_SELECT_PREV_TARGET: u32 = 66269;
pub const KEY_STOP_PRIMARY_GUNS: u32 = 66270;
pub const KEY_STOP_SECONDARY_GUNS: u32 = 66271;
pub const KEY_STOP_ALL_GUNS: u32 = 66272;
pub const KEY_SP_MULTIPLAYER_SCORE_DISPLAY: u32 = 66273;
pub const KEY_AILERON_TRIM_LEFT: u32 = 66276;
pub const KEY_AILERON_TRIM_RIGHT: u32 = 66277;
pub const KEY_RUDDER_TRIM_LEFT: u32 = 66278;
pub const KEY_RUDDER_TRIM_RIGHT: u32 = 66279;
pub const KEY_RADIO_COMMNAV1_TEST_TOGGLE: u32 = 66280;
pub const KEY_RADIO_COMMNAV2_TEST_TOGGLE: u32 = 66281;
pub const KEY_RADIO_COMM1_AUTOSWITCH_TOGGLE: u32 = 66282;
pub const KEY_RADIO_NAV1_AUTOSWITCH_TOGGLE: u32 = 66283;
pub const KEY_RADIO_COMM2_AUTOSWITCH_TOGGLE: u32 = 66284;
pub const KEY_RADIO_NAV2_AUTOSWITCH_TOGGLE: u32 = 66285;
pub const KEY_DME_TOGGLE: u32 = 66286;
pub const KEY_TOGGLE_PROP_SYNC: u32 = 66287;
pub const KEY_TOGGLE_FLIGHT_DIRECTOR: u32 = 66288;
pub const KEY_SYNC_FLIGHT_DIRECTOR_PITCH: u32 = 66289;
pub const KEY_TOGGLE_ELECTRIC_VACUUM_PUMP: u32 = 66290;
pub const KEY_AXIS_PROPELLER_SET: u32 = 66291;
pub const KEY_AXIS_MIXTURE_SET: u32 = 66292;
pub const KEY_TOGGLE_AVIONICS_MASTER: u32 = 66293;
pub const KEY_INC_CONCORDE_NOSE_VISOR: u32 = 66294;
pub const KEY_DEC_CONCORDE_NOSE_VISOR: u32 = 66295;
pub const KEY_TOGGLE_AFTERBURNER: u32 = 66296;
pub const KEY_TOGGLE_ARM_AUTOFEATHER: u32 = 66297;
pub const KEY_INC_AUTOBRAKE_CONTROL: u32 = 66298;
pub const KEY_DEC_AUTOBRAKE_CONTROL: u32 = 66299;
pub const KEY_TOGGLE_STARTER1: u32 = 66300;
pub const KEY_TOGGLE_STARTER2: u32 = 66301;
pub const KEY_TOGGLE_STARTER3: u32 = 66302;
pub const KEY_TOGGLE_STARTER4: u32 = 66303;
pub const KEY_TOGGLE_ALL_STARTERS: u32 = 66304;
pub const KEY_TOGGLE_VACUUM_FAILURE: u32 = 66305;
pub const KEY_TOGGLE_ELECTRICAL_FAILURE: u32 = 66306;
pub const KEY_TOGGLE_PITOT_BLOCKAGE: u32 = 66307;
pub const KEY_TOGGLE_STATIC_PORT_BLOCKAGE: u32 = 66308;
pub const KEY_TOGGLE_HYDRAULIC_FAILURE: u32 = 66309;
pub const KEY_TOGGLE_TOTAL_BRAKE_FAILURE: u32 = 66310;
pub const KEY_TOGGLE_LEFT_BRAKE_FAILURE: u32 = 66311;
pub const KEY_TOGGLE_RIGHT_BRAKE_FAILURE: u32 = 66312;
pub const KEY_TOGGLE_ENGINE1_FAILURE: u32 = 66313;
pub const KEY_TOGGLE_ENGINE2_FAILURE: u32 = 66314;
pub const KEY_TOGGLE_ENGINE3_FAILURE: u32 = 66315;
pub const KEY_TOGGLE_ENGINE4_FAILURE: u32 = 66316;
pub const KEY_TOGGLE_ALTERNATE_STATIC: u32 = 66317;
pub const KEY_ATTITUDE_BARS_POSITION_INC: u32 = 66318;
pub const KEY_ATTITUDE_BARS_POSITION_DEC: u32 = 66319;
pub const KEY_TOGGLE_RAD_INS_SWITCH: u32 = 66320;
pub const KEY_DECISION_HEIGHT_INC: u32 = 66321;
pub const KEY_DECISION_HEIGHT_DEC: u32 = 66322;
pub const KEY_LOW_HIGHT_WARNING_SET: u32 = 66323;
pub const KEY_LOW_HIGHT_WARNING_GAUGE_WILL_SET: u32 = 66324;
pub const KEY_SET_FUEL_TRANSFER_FORWARD: u32 = 66325;
pub const KEY_SET_FUEL_TRANSFER_AFT: u32 = 66326;
pub const KEY_SET_FUEL_TRANSFER_AUTO: u32 = 66327;
pub const KEY_SET_FUEL_TRANSFER_OFF: u32 = 66328;
pub const KEY_INC_COWL_FLAPS1: u32 = 66329;
pub const KEY_DEC_COWL_FLAPS1: u32 = 66330;
pub const KEY_INC_COWL_FLAPS2: u32 = 66331;
pub const KEY_DEC_COWL_FLAPS2: u32 = 66332;
pub const KEY_INC_COWL_FLAPS3: u32 = 66333;
pub const KEY_DEC_COWL_FLAPS3: u32 = 66334;
pub const KEY_INC_COWL_FLAPS4: u32 = 66335;
pub const KEY_DEC_COWL_FLAPS4: u32 = 66336;
pub const KEY_TOGGLE_STRUCTURAL_DEICE: u32 = 66337;
pub const KEY_TOGGLE_PROPELLER_DEICE: u32 = 66338;
pub const KEY_TOGGLE_ELECT_FUEL_PUMP: u32 = 66339;
pub const KEY_TOGGLE_ELECT_FUEL_PUMP1: u32 = 66340;
pub const KEY_TOGGLE_ELECT_FUEL_PUMP2: u32 = 66341;
pub const KEY_TOGGLE_ELECT_FUEL_PUMP3: u32 = 66342;
pub const KEY_TOGGLE_ELECT_FUEL_PUMP4: u32 = 66343;
pub const KEY_TOGGLE_PRIMER: u32 = 66344;
pub const KEY_TOGGLE_PRIMER1: u32 = 66345;
pub const KEY_TOGGLE_PRIMER2: u32 = 66346;
pub const KEY_TOGGLE_PRIMER3: u32 = 66347;
pub const KEY_TOGGLE_PRIMER4: u32 = 66348;
pub const KEY_ENGINE_FUELFLOW_BUG_POSITION1: u32 = 66349;
pub const KEY_ENGINE_FUELFLOW_BUG_POSITION2: u32 = 66350;
pub const KEY_ENGINE_FUELFLOW_BUG_POSITION3: u32 = 66351;
pub const KEY_ENGINE_FUELFLOW_BUG_POSITION4: u32 = 66352;
pub const KEY_AUTOPILOT_AIRSPEED_HOLD_CURRENT: u32 = 66353;
pub const KEY_AUTOPILOT_AIRSPEED_ACQUIRE: u32 = 66354;
pub const KEY_AUTOPILOT_PANEL_AIRSPEED_SET: u32 = 66355;
pub const KEY_AUTOPILOT_MACH_HOLD_CURRENT: u32 = 66356;
pub const KEY_AUTOPILOT_PANEL_MAX_SPEED: u32 = 66357;
pub const KEY_AUTOPILOT_PANEL_CRUISE_SPEED: u32 = 66358;
pub const KEY_TOGGLE_AFTERBURNER1: u32 = 66359;
pub const KEY_TOGGLE_AFTERBURNER2: u32 = 66360;
pub const KEY_TOGGLE_AFTERBURNER3: u32 = 66361;
pub const KEY_TOGGLE_AFTERBURNER4: u32 = 66362;
pub const KEY_TOGGLE_ALTERNATOR1: u32 = 66363;
pub const KEY_TOGGLE_ALTERNATOR2: u32 = 66364;
pub const KEY_TOGGLE_ALTERNATOR3: u32 = 66365;
pub const KEY_TOGGLE_ALTERNATOR4: u32 = 66366;
pub const KEY_VOR1_OBI_FAST_DEC: u32 = 66367;
pub const KEY_VOR1_OBI_FAST_INC: u32 = 66368;
pub const KEY_VOR2_OBI_FAST_DEC: u32 = 66369;
pub const KEY_VOR2_OBI_FAST_INC: u32 = 66370;
pub const KEY_COM_STBY_RADIO_SET: u32 = 66371;
pub const KEY_COM_STBY_RADIO_SWITCH_TO: u32 = 66372;
pub const KEY_COM_RADIO_SWAP: u32 = 66372;
pub const KEY_TOGGLE_ATTITUDE_CAGE: u32 = 66373;
pub const KEY_TOGGLE_MASTER_BATTERY_ALTERNATOR: u32 = 66374;
pub const KEY_TOGGLE_GPS_DRIVES_NAV1: u32 = 66375;
pub const KEY_TOGGLE_LOGO_LIGHTS: u32 = 66376;
pub const KEY_TOGGLE_RECOGNITION_LIGHTS: u32 = 66377;
pub const KEY_TOGGLE_WING_LIGHTS: u32 = 66378;
pub const KEY_TOGGLE_NAV_LIGHTS: u32 = 66379;
pub const KEY_HELI_BEEP_INCREASE: u32 = 66380;
pub const KEY_HELI_BEEP_DECREASE: u32 = 66381;
pub const KEY_AXIS_SPOILER_SET: u32 = 66382;
pub const KEY_CONCORDE_NOSE_VISOR_FULL_EXT: u32 = 66383;
pub const KEY_CONCORDE_NOSE_VISOR_FULL_RET: u32 = 66384;
pub const KEY_LOD_ZOOM_IN: u32 = 66385;
pub const KEY_LOD_ZOOM_OUT: u32 = 66386;
pub const KEY_AXIS_LEFT_BRAKE_SET: u32 = 66387;
pub const KEY_AXIS_RIGHT_BRAKE_SET: u32 = 66388;
pub const KEY_TOGGLE_AIRCRAFT_EXIT: u32 = 66389;
pub const KEY_TOGGLE_WING_FOLD: u32 = 66390;
pub const KEY_TOGGLE_TAIL_HOOK_HANDLE: u32 = 66391;
pub const KEY_RELEASE_DROP_TANK_ALL: u32 = 66392;
pub const KEY_RELEASE_DROP_TANK_1: u32 = 66393;
pub const KEY_RELEASE_DROP_TANK_2: u32 = 66394;
pub const KEY_MAGNETO_SET: u32 = 66399;
pub const KEY_MAGNETO1_SET: u32 = 66400;
pub const KEY_MAGNETO2_SET: u32 = 66401;
pub const KEY_MAGNETO3_SET: u32 = 66402;
pub const KEY_MAGNETO4_SET: u32 = 66403;
pub const KEY_PANEL_HUD_NEXT: u32 = 66404;
pub const KEY_TOOLTIP_UNITS_SET: u32 = 66405;
pub const KEY_TOOLTIP_UNITS_TOGGLE: u32 = 66406;
pub const KEY_PANEL_HUD_PREVIOUS: u32 = 66407;
pub const KEY_VIEW_SNAP_PANEL: u32 = 66413;
pub const KEY_VIEW_SNAP_PANEL_RESET: u32 = 66414;
pub const KEY_PAN_RESET_COCKPIT: u32 = 66415;
pub const KEY_PAN_VIEW: u32 = 66416;
pub const KEY_SNAP_VIEW: u32 = 66417;
pub const KEY_AXIS_THROTTLE1_SET: u32 = 66420;
pub const KEY_AXIS_PROPELLER1_SET: u32 = 66421;
pub const KEY_AXIS_MIXTURE1_SET: u32 = 66422;
pub const KEY_AXIS_THROTTLE2_SET: u32 = 66423;
pub const KEY_AXIS_PROPELLER2_SET: u32 = 66424;
pub const KEY_AXIS_MIXTURE2_SET: u32 = 66425;
pub const KEY_AXIS_THROTTLE3_SET: u32 = 66426;
pub const KEY_AXIS_PROPELLER3_SET: u32 = 66427;
pub const KEY_AXIS_MIXTURE3_SET: u32 = 66428;
pub const KEY_AXIS_THROTTLE4_SET: u32 = 66429;
pub const KEY_AXIS_PROPELLER4_SET: u32 = 66430;
pub const KEY_AXIS_MIXTURE4_SET: u32 = 66431;
pub const KEY_FLIGHT_MAP: u32 = 66432;
pub const KEY_LABEL_COLOR_CYCLE: u32 = 66433;
pub const KEY_COM_RADIO_FRACT_DEC_CARRY: u32 = 66434;
pub const KEY_COM_RADIO_FRACT_INC_CARRY: u32 = 66435;
pub const KEY_COM2_RADIO_WHOLE_DEC: u32 = 66436;
pub const KEY_COM2_RADIO_WHOLE_INC: u32 = 66437;
pub const KEY_COM2_RADIO_FRACT_DEC: u32 = 66438;
pub const KEY_COM2_RADIO_FRACT_DEC_CARRY: u32 = 66439;
pub const KEY_COM2_RADIO_FRACT_INC: u32 = 66440;
pub const KEY_COM2_RADIO_FRACT_INC_CARRY: u32 = 66441;
pub const KEY_COM2_RADIO_SET: u32 = 66442;
pub const KEY_COM2_STBY_RADIO_SET: u32 = 66443;
pub const KEY_COM2_RADIO_SWAP: u32 = 66444;
pub const KEY_NAV1_RADIO_FRACT_DEC_CARRY: u32 = 66445;
pub const KEY_NAV1_RADIO_FRACT_INC_CARRY: u32 = 66446;
pub const KEY_NAV1_STBY_SET: u32 = 66447;
pub const KEY_NAV1_RADIO_SWAP: u32 = 66448;
pub const KEY_NAV2_RADIO_FRACT_DEC_CARRY: u32 = 66449;
pub const KEY_NAV2_RADIO_FRACT_INC_CARRY: u32 = 66450;
pub const KEY_NAV2_STBY_SET: u32 = 66451;
pub const KEY_NAV2_RADIO_SWAP: u32 = 66452;
pub const KEY_ADF1_RADIO_TENTHS_DEC: u32 = 66453;
pub const KEY_ADF1_RADIO_TENTHS_INC: u32 = 66454;
pub const KEY_XPNDR_1000_DEC: u32 = 66455;
pub const KEY_XPNDR_100_DEC: u32 = 66456;
pub const KEY_XPNDR_10_DEC: u32 = 66457;
pub const KEY_XPNDR_1_DEC: u32 = 66458;
pub const KEY_XPNDR_DEC_CARRY: u32 = 66459;
pub const KEY_XPNDR_INC_CARRY: u32 = 66460;
pub const KEY_ADF_FRACT_DEC_CARRY: u32 = 66461;
pub const KEY_ADF_FRACT_INC_CARRY: u32 = 66462;
pub const KEY_COM1_TRANSMIT_SELECT: u32 = 66463;
pub const KEY_COM2_TRANSMIT_SELECT: u32 = 66464;
pub const KEY_COM_RECEIVE_ALL_TOGGLE: u32 = 66465;
pub const KEY_COM_RECEIVE_ALL_SET: u32 = 66466;
pub const KEY_MARKER_SOUND_TOGGLE: u32 = 66477;
pub const KEY_MARKER_SOUND_SET: u32 = 66478;
pub const KEY_ADF_COMPLETE_SET: u32 = 66479;
pub const KEY_ADF_OUTSIDE_SOURCE: u32 = 66480;
pub const KEY_ADF_NEEDLE_SET: u32 = 66481;
pub const KEY_TOGGLE_WATER_RUDDER: u32 = 66482;
pub const KEY_PUSHBACK_SET: u32 = 66483;
pub const KEY_ANTI_ICE_TOGGLE_ENG1: u32 = 66484;
pub const KEY_ANTI_ICE_TOGGLE_ENG2: u32 = 66485;
pub const KEY_ANTI_ICE_TOGGLE_ENG3: u32 = 66486;
pub const KEY_ANTI_ICE_TOGGLE_ENG4: u32 = 66487;
pub const KEY_ANTI_ICE_SET_ENG1: u32 = 66488;
pub const KEY_ANTI_ICE_SET_ENG2: u32 = 66489;
pub const KEY_ANTI_ICE_SET_ENG3: u32 = 66490;
pub const KEY_ANTI_ICE_SET_ENG4: u32 = 66491;
pub const KEY_RELOAD_PANELS: u32 = 66492;
pub const KEY_TOGGLE_FUEL_VALVE_ALL: u32 = 66493;
pub const KEY_TOGGLE_FUEL_VALVE_ENG1: u32 = 66494;
pub const KEY_TOGGLE_FUEL_VALVE_ENG2: u32 = 66495;
pub const KEY_TOGGLE_FUEL_VALVE_ENG3: u32 = 66496;
pub const KEY_TOGGLE_FUEL_VALVE_ENG4: u32 = 66497;
pub const KEY_TUG_HEADING: u32 = 66498;
pub const KEY_TUG_SPEED: u32 = 66499;
pub const KEY_CHASE_VIEW_NEXT: u32 = 66500;
pub const KEY_CHASE_VIEW_PREV: u32 = 66501;
pub const KEY_AP_NAV_SELECT_SET: u32 = 66502;
pub const KEY_AXIS_PAN_PITCH: u32 = 66503;
pub const KEY_AXIS_PAN_HEADING: u32 = 66504;
pub const KEY_AXIS_PAN_TILT: u32 = 66505;
pub const KEY_PANEL_ID_TOGGLE: u32 = 66506;
pub const KEY_PANEL_ID_OPEN: u32 = 66507;
pub const KEY_PANEL_ID_CLOSE: u32 = 66508;
pub const KEY_HEADING_BUG_SELECT: u32 = 66509;
pub const KEY_ALTITUDE_BUG_SELECT: u32 = 66510;
pub const KEY_VSI_BUG_SELECT: u32 = 66511;
pub const KEY_CONTROL_RELOAD_USER_AIRCRAFT: u32 = 66512;
pub const KEY_ATC_MENU_OPEN: u32 = 66513;
pub const KEY_ATC_MENU_CLOSE: u32 = 66514;
pub const KEY_CHASE_VIEW_TOGGLE: u32 = 66515;
pub const KEY_FUEL_SELECTOR_2_OFF: u32 = 66516;
pub const KEY_FUEL_SELECTOR_2_ALL: u32 = 66517;
pub const KEY_FUEL_SELECTOR_2_LEFT: u32 = 66518;
pub const KEY_FUEL_SELECTOR_2_RIGHT: u32 = 66519;
pub const KEY_FUEL_SELECTOR_2_LEFT_AUX: u32 = 66520;
pub const KEY_FUEL_SELECTOR_2_RIGHT_AUX: u32 = 66521;
pub const KEY_FUEL_SELECTOR_2_CENTER: u32 = 66522;
pub const KEY_FUEL_SELECTOR_2_SET: u32 = 66523;
pub const KEY_EYEPOINT_UP: u32 = 66524;
pub const KEY_EYEPOINT_DOWN: u32 = 66525;
pub const KEY_EYEPOINT_RIGHT: u32 = 66526;
pub const KEY_EYEPOINT_LEFT: u32 = 66527;
pub const KEY_EYEPOINT_FORWARD: u32 = 66528;
pub const KEY_EYEPOINT_BACK: u32 = 66529;
pub const KEY_EYEPOINT_RESET: u32 = 66530;
pub const KEY_ENGINE_AUTO_SHUTDOWN: u32 = 66531;
pub const KEY_AIRSPEED_BUG_SELECT: u32 = 66532;
pub const KEY_TUG_DISABLE: u32 = 66533;
pub const KEY_AXIS_FLAPS_SET: u32 = 66534;
pub const KEY_TOGGLE_MASTER_IGNITION_SWITCH: u32 = 66535;
pub const KEY_TOGGLE_FEATHER_SWITCHES: u32 = 66536;
pub const KEY_TOGGLE_FEATHER_SWITCH_1: u32 = 66537;
pub const KEY_TOGGLE_FEATHER_SWITCH_2: u32 = 66538;
pub const KEY_TOGGLE_FEATHER_SWITCH_3: u32 = 66539;
pub const KEY_TOGGLE_FEATHER_SWITCH_4: u32 = 66540;
pub const KEY_TOGGLE_TAILWHEEL_LOCK: u32 = 66541;
pub const KEY_ADF_WHOLE_INC: u32 = 66542;
pub const KEY_ADF_WHOLE_DEC: u32 = 66543;
pub const KEY_ADF2_100_INC: u32 = 66544;
pub const KEY_ADF2_10_INC: u32 = 66545;
pub const KEY_ADF2_1_INC: u32 = 66546;
pub const KEY_ADF2_RADIO_TENTHS_INC: u32 = 66547;
pub const KEY_ADF2_100_DEC: u32 = 66548;
pub const KEY_ADF2_10_DEC: u32 = 66549;
pub const KEY_ADF2_1_DEC: u32 = 66550;
pub const KEY_ADF2_RADIO_TENTHS_DEC: u32 = 66551;
pub const KEY_ADF2_WHOLE_INC: u32 = 66552;
pub const KEY_ADF2_WHOLE_DEC: u32 = 66553;
pub const KEY_ADF2_FRACT_INC_CARRY: u32 = 66554;
pub const KEY_ADF2_FRACT_DEC_CARRY: u32 = 66555;
pub const KEY_ADF2_COMPLETE_SET: u32 = 66556;
pub const KEY_RADIO_ADF2_IDENT_DISABLE: u32 = 66557;
pub const KEY_RADIO_ADF2_IDENT_ENABLE: u32 = 66558;
pub const KEY_RADIO_ADF2_IDENT_TOGGLE: u32 = 66559;
pub const KEY_RADIO_ADF2_IDENT_SET: u32 = 66560;
pub const KEY_FUEL_SELECTOR_3_OFF: u32 = 66561;
pub const KEY_FUEL_SELECTOR_3_ALL: u32 = 66562;
pub const KEY_FUEL_SELECTOR_3_LEFT: u32 = 66563;
pub const KEY_FUEL_SELECTOR_3_RIGHT: u32 = 66564;
pub const KEY_FUEL_SELECTOR_3_LEFT_AUX: u32 = 66565;
pub const KEY_FUEL_SELECTOR_3_RIGHT_AUX: u32 = 66566;
pub const KEY_FUEL_SELECTOR_3_CENTER: u32 = 66567;
pub const KEY_FUEL_SELECTOR_3_SET: u32 = 66568;
pub const KEY_FUEL_SELECTOR_4_OFF: u32 = 66569;
pub const KEY_FUEL_SELECTOR_4_ALL: u32 = 66570;
pub const KEY_FUEL_SELECTOR_4_LEFT: u32 = 66571;
pub const KEY_FUEL_SELECTOR_4_RIGHT: u32 = 66572;
pub const KEY_FUEL_SELECTOR_4_LEFT_AUX: u32 = 66573;
pub const KEY_FUEL_SELECTOR_4_RIGHT_AUX: u32 = 66574;
pub const KEY_FUEL_SELECTOR_4_CENTER: u32 = 66575;
pub const KEY_FUEL_SELECTOR_4_SET: u32 = 66576;
pub const KEY_INDUCTOR_COMPASS_REF_INC: u32 = 66577;
pub const KEY_INDUCTOR_COMPASS_REF_DEC: u32 = 66578;
pub const KEY_TOGGLE_CABIN_LIGHTS: u32 = 66579;
pub const KEY_RESET_G_FORCE_INDICATOR: u32 = 66580;
pub const KEY_RESET_MAX_RPM_INDICATOR: u32 = 66581;
pub const KEY_MANUAL_FUEL_TRANSFER: u32 = 66582;
pub const KEY_AP_PITCH_REF_INC_UP: u32 = 66583;
pub const KEY_AP_PITCH_REF_INC_DN: u32 = 66584;
pub const KEY_AP_PITCH_REF_SELECT: u32 = 66585;
pub const KEY_SIM_RESET: u32 = 66586;
pub const KEY_ROTOR_BRAKE: u32 = 66587;
pub const KEY_ROTOR_CLUTCH_SWITCH_TOGGLE: u32 = 66588;
pub const KEY_ROTOR_CLUTCH_SWITCH_SET: u32 = 66589;
pub const KEY_ROTOR_GOV_SWITCH_TOGGLE: u32 = 66590;
pub const KEY_ROTOR_GOV_SWITCH_SET: u32 = 66591;
pub const KEY_ROTOR_LATERAL_TRIM_INC: u32 = 66592;
pub const KEY_ROTOR_LATERAL_TRIM_DEC: u32 = 66593;
pub const KEY_ROTOR_LATERAL_TRIM_SET: u32 = 66594;
pub const KEY_CROSS_FEED_OPEN: u32 = 66595;
pub const KEY_CROSS_FEED_TOGGLE: u32 = 66596;
pub const KEY_VIRTUAL_COPILOT_TOGGLE: u32 = 66597;
pub const KEY_VIRTUAL_COPILOT_SET: u32 = 66598;
pub const KEY_VIRTUAL_COPILOT_ACTION: u32 = 66599;
pub const KEY_MIXTURE_SET_BEST: u32 = 66600;
pub const KEY_ADD_FUEL_QUANTITY: u32 = 66601;
pub const KEY_GPS_POWER_BUTTON: u32 = 66602;
pub const KEY_GPS_NEAREST_BUTTON: u32 = 66604;
pub const KEY_GPS_OBS_BUTTON: u32 = 66605;
pub const KEY_GPS_MSG_BUTTON: u32 = 66606;
pub const KEY_GPS_MSG_BUTTON_DOWN: u32 = 66607;
pub const KEY_GPS_MSG_BUTTON_UP: u32 = 66608;
pub const KEY_GPS_FLIGHTPLAN_BUTTON: u32 = 66609;
pub const KEY_GPS_VNAV_BUTTON: u32 = 66610;
pub const KEY_GPS_TERRAIN_BUTTON: u32 = 66611;
pub const KEY_GPS_PROCEDURE_BUTTON: u32 = 66612;
pub const KEY_GPS_SETUP_BUTTON: u32 = 66613;
pub const KEY_GPS_ACTIVATE_BUTTON: u32 = 66614;
pub const KEY_GPS_ZOOMIN_BUTTON: u32 = 66615;
pub const KEY_GPS_ZOOMOUT_BUTTON: u32 = 66616;
pub const KEY_GPS_DIRECTTO_BUTTON: u32 = 66617;
pub const KEY_GPS_MENU_BUTTON: u32 = 66618;
pub const KEY_GPS_CLEAR_BUTTON: u32 = 66619;
pub const KEY_GPS_CLEAR_ALL_BUTTON: u32 = 66620;
pub const KEY_GPS_CLEAR_BUTTON_DOWN: u32 = 66621;
pub const KEY_GPS_CLEAR_BUTTON_UP: u32 = 66622;
pub const KEY_GPS_ENTER_BUTTON: u32 = 66623;
pub const KEY_GPS_CURSOR_BUTTON: u32 = 66624;
pub const KEY_GPS_GROUP_KNOB_INC: u32 = 66625;
pub const KEY_GPS_GROUP_KNOB_DEC: u32 = 66626;
pub const KEY_GPS_PAGE_KNOB_INC: u32 = 66627;
pub const KEY_GPS_PAGE_KNOB_DEC: u32 = 66628;
pub const KEY_GPS_BUTTON1: u32 = 66629;
pub const KEY_GPS_BUTTON2: u32 = 66630;
pub const KEY_GPS_BUTTON3: u32 = 66631;
pub const KEY_GPS_BUTTON4: u32 = 66632;
pub const KEY_GPS_BUTTON5: u32 = 66633;
pub const KEY_THROTTLE_DECR_SMALL: u32 = 66634;
pub const KEY_THROTTLE1_DECR_SMALL: u32 = 66635;
pub const KEY_THROTTLE2_DECR_SMALL: u32 = 66636;
pub const KEY_THROTTLE3_DECR_SMALL: u32 = 66637;
pub const KEY_THROTTLE4_DECR_SMALL: u32 = 66638;
pub const KEY_PROP_PITCH_DECR_SMALL: u32 = 66639;
pub const KEY_PROP_PITCH1_DECR_SMALL: u32 = 66640;
pub const KEY_PROP_PITCH2_DECR_SMALL: u32 = 66641;
pub const KEY_PROP_PITCH3_DECR_SMALL: u32 = 66642;
pub const KEY_PROP_PITCH4_DECR_SMALL: u32 = 66643;
pub const KEY_MIXTURE_DECR_SMALL: u32 = 66644;
pub const KEY_MIXTURE1_DECR_SMALL: u32 = 66645;
pub const KEY_MIXTURE2_DECR_SMALL: u32 = 66646;
pub const KEY_MIXTURE3_DECR_SMALL: u32 = 66647;
pub const KEY_MIXTURE4_DECR_SMALL: u32 = 66648;
pub const KEY_REPAIR_AND_REFUEL: u32 = 66649;
pub const KEY_DME_SELECT: u32 = 66650;
pub const KEY_FUEL_DUMP_TOGGLE: u32 = 66651;
pub const KEY_HORN_TRIGGER: u32 = 66652;
pub const KEY_VIEW_COCKPIT_FORWARD: u32 = 66653;
pub const KEY_VIEW_VIRTUAL_COCKPIT_FORWARD: u32 = 66654;
pub const KEY_ADVENTURE_ACTION: u32 = 66655;
pub const KEY_REQUEST_FUEL: u32 = 66657;
pub const KEY_RELEASE_DROPPABLE_OBJECTS: u32 = 66658;
pub const KEY_VIEW_PANEL_ALPHA_SET: u32 = 66659;
pub const KEY_VIEW_PANEL_ALPHA_SELECT: u32 = 66660;
pub const KEY_VIEW_PANEL_ALPHA_INC: u32 = 66661;
pub const KEY_VIEW_PANEL_ALPHA_DEC: u32 = 66662;
pub const KEY_VIEW_LINKING_SET: u32 = 66663;
pub const KEY_VIEW_LINKING_TOGGLE: u32 = 66664;
pub const KEY_RADIO_SELECTED_DME_IDENT_ENABLE: u32 = 66665;
pub const KEY_RADIO_SELECTED_DME_IDENT_DISABLE: u32 = 66666;
pub const KEY_RADIO_SELECTED_DME_IDENT_SET: u32 = 66667;
pub const KEY_RADIO_SELECTED_DME_IDENT_TOGGLE: u32 = 66668;
pub const KEY_FUEL_SELECTOR_LEFT_MAIN: u32 = 66669;
pub const KEY_FUEL_SELECTOR_2_LEFT_MAIN: u32 = 66670;
pub const KEY_FUEL_SELECTOR_3_LEFT_MAIN: u32 = 66671;
pub const KEY_FUEL_SELECTOR_4_LEFT_MAIN: u32 = 66672;
pub const KEY_FUEL_SELECTOR_RIGHT_MAIN: u32 = 66673;
pub const KEY_FUEL_SELECTOR_2_RIGHT_MAIN: u32 = 66674;
pub const KEY_FUEL_SELECTOR_3_RIGHT_MAIN: u32 = 66675;
pub const KEY_FUEL_SELECTOR_4_RIGHT_MAIN: u32 = 66676;
pub const KEY_GAUGE_KEYSTROKE: u32 = 66683;
pub const KEY_MULTIPLAYER_VOICE_CAPTURE_START: u32 = 66684;
pub const KEY_MULTIPLAYER_VOICE_CAPTURE_STOP: u32 = 66685;
pub const KEY_SIMUI_WINDOW_HIDESHOW: u32 = 66686;
pub const KEY_TOGGLE_VARIOMETER_SWITCH: u32 = 66687;
pub const KEY_TOGGLE_TURN_INDICATOR_SWITCH: u32 = 66688;
pub const KEY_WINDOW_TITLES_TOGGLE: u32 = 66689;
pub const KEY_AXIS_INDICATOR_CYCLE: u32 = 66690;
pub const KEY_MAP_ORIENTATION_CYCLE: u32 = 66691;
pub const KEY_POINT_OF_INTEREST_TOGGLE_POINTER: u32 = 66692;
pub const KEY_POINT_OF_INTEREST_CYCLE_PREVIOUS: u32 = 66693;
pub const KEY_POINT_OF_INTEREST_CYCLE_NEXT: u32 = 66694;
pub const KEY_TOGGLE_JETWAY: u32 = 66695;
pub const KEY_RETRACT_FLOAT_SWITCH_DEC: u32 = 66696;
pub const KEY_RETRACT_FLOAT_SWITCH_INC: u32 = 66697;
pub const KEY_TOGGLE_WATER_BALLAST_VALVE: u32 = 66698;
pub const KEY_VIEW_CHASE_DISTANCE_ADD: u32 = 66699;
pub const KEY_VIEW_CHASE_DISTANCE_SUB: u32 = 66700;
pub const KEY_AVIONICS_MASTER_SET: u32 = 66701;
pub const KEY_EXTERNAL_SYSTEM_SET: u32 = 66702;
pub const KEY_EXTERNAL_SYSTEM_TOGGLE: u32 = 66703;
pub const KEY_APU_STARTER: u32 = 66704;
pub const KEY_APU_OFF_SWITCH: u32 = 66705;
pub const KEY_APU_GENERATOR_SWITCH_TOGGLE: u32 = 66706;
pub const KEY_APU_GENERATOR_SWITCH_SET: u32 = 66707;
pub const KEY_EXTINGUISH_ENGINE_FIRE: u32 = 66708;
pub const KEY_AP_MAX_BANK_INC: u32 = 66709;
pub const KEY_AP_MAX_BANK_DEC: u32 = 66710;
pub const KEY_AP_N1_HOLD: u32 = 66711;
pub const KEY_HYDRAULIC_SWITCH_TOGGLE: u32 = 66712;
pub const KEY_DECISION_ALTITUDE_MSL_INC: u32 = 66713;
pub const KEY_DECISION_ALTITUDE_MSL_DEC: u32 = 66714;
pub const KEY_BLEED_AIR_SOURCE_CONTROL_INC: u32 = 66715;
pub const KEY_BLEED_AIR_SOURCE_CONTROL_DEC: u32 = 66716;
pub const KEY_TURBINE_IGNITION_SWITCH_TOGGLE: u32 = 66717;
pub const KEY_CABIN_NO_SMOKING_ALERT_SWITCH_TOGGLE: u32 = 66718;
pub const KEY_CABIN_SEATBELTS_ALERT_SWITCH_TOGGLE: u32 = 66719;
pub const KEY_ANTISKID_BRAKES_TOGGLE: u32 = 66720;
pub const KEY_GPWS_SWITCH_TOGGLE: u32 = 66721;
pub const KEY_VIDEO_RECORD_TOGGLE: u32 = 66722;
pub const KEY_SET_AUTOBRAKE_CONTROL: u32 = 66723;
pub const KEY_TOGGLE_AIRPORT_NAME_DISPLAY: u32 = 66724;
pub const KEY_TOGGLE_MASTER_STARTER_SWITCH: u32 = 66725;
pub const KEY_GEAR_EMERGENCY_HANDLE_TOGGLE: u32 = 66726;
pub const KEY_AILERON_TRIM_SET: u32 = 66731;
pub const KEY_RUDDER_TRIM_SET: u32 = 66732;
pub const KEY_CAPTURE_SCREENSHOT: u32 = 66733;
pub const KEY_MOUSE_LOOK_TOGGLE: u32 = 66734;
pub const KEY_MULTIPLAYER_BROADCAST_VOICE_CAPTURE_START: u32 = 66735;
pub const KEY_MULTIPLAYER_BROADCAST_VOICE_CAPTURE_STOP: u32 = 66736;
pub const KEY_FLY_BY_WIRE_ELAC_TOGGLE: u32 = 66737;
pub const KEY_FLY_BY_WIRE_FAC_TOGGLE: u32 = 66738;
pub const KEY_FLY_BY_WIRE_SEC_TOGGLE: u32 = 66739;
pub const KEY_MANUAL_FUEL_PRESSURE_PUMP: u32 = 66740;
pub const KEY_ADF1_RADIO_SWAP: u32 = 66741;
pub const KEY_ADF2_RADIO_SWAP: u32 = 66742;
pub const KEY_YAXIS_INVERT_TOGGLE: u32 = 66743;
pub const KEY_LOW_HEIGHT_WARNING_SET: u32 = 66746;
pub const KEY_LOW_HEIGHT_WARNING_GAUGE_WILL_SET: u32 = 66747;
pub const KEY_G1000_PFD_ZOOMIN_BUTTON: u32 = 66748;
pub const KEY_G1000_PFD_ZOOMOUT_BUTTON: u32 = 66749;
pub const KEY_G1000_PFD_DIRECTTO_BUTTON: u32 = 66750;
pub const KEY_G1000_PFD_MENU_BUTTON: u32 = 66751;
pub const KEY_G1000_PFD_FLIGHTPLAN_BUTTON: u32 = 66752;
pub const KEY_G1000_PFD_PROCEDURE_BUTTON: u32 = 66753;
pub const KEY_G1000_PFD_CLEAR_BUTTON: u32 = 66754;
pub const KEY_G1000_PFD_ENTER_BUTTON: u32 = 66755;
pub const KEY_G1000_PFD_CURSOR_BUTTON: u32 = 66756;
pub const KEY_G1000_PFD_GROUP_KNOB_INC: u32 = 66757;
pub const KEY_G1000_PFD_GROUP_KNOB_DEC: u32 = 66758;
pub const KEY_G1000_PFD_PAGE_KNOB_INC: u32 = 66759;
pub const KEY_G1000_PFD_PAGE_KNOB_DEC: u32 = 66760;
pub const KEY_G1000_PFD_SOFTKEY1: u32 = 66761;
pub const KEY_G1000_PFD_SOFTKEY2: u32 = 66762;
pub const KEY_G1000_PFD_SOFTKEY3: u32 = 66763;
pub const KEY_G1000_PFD_SOFTKEY4: u32 = 66764;
pub const KEY_G1000_PFD_SOFTKEY5: u32 = 66765;
pub const KEY_G1000_PFD_SOFTKEY6: u32 = 66766;
pub const KEY_G1000_PFD_SOFTKEY7: u32 = 66767;
pub const KEY_G1000_PFD_SOFTKEY8: u32 = 66768;
pub const KEY_G1000_PFD_SOFTKEY9: u32 = 66769;
pub const KEY_G1000_PFD_SOFTKEY10: u32 = 66770;
pub const KEY_G1000_PFD_SOFTKEY11: u32 = 66771;
pub const KEY_G1000_PFD_SOFTKEY12: u32 = 66772;
pub const KEY_G1000_MFD_ZOOMIN_BUTTON: u32 = 66776;
pub const KEY_G1000_MFD_ZOOMOUT_BUTTON: u32 = 66777;
pub const KEY_G1000_MFD_DIRECTTO_BUTTON: u32 = 66778;
pub const KEY_G1000_MFD_MENU_BUTTON: u32 = 66779;
pub const KEY_G1000_MFD_FLIGHTPLAN_BUTTON: u32 = 66780;
pub const KEY_G1000_MFD_PROCEDURE_BUTTON: u32 = 66781;
pub const KEY_G1000_MFD_CLEAR_BUTTON: u32 = 66782;
pub const KEY_G1000_MFD_ENTER_BUTTON: u32 = 66783;
pub const KEY_G1000_MFD_CURSOR_BUTTON: u32 = 66784;
pub const KEY_G1000_MFD_GROUP_KNOB_INC: u32 = 66785;
pub const KEY_G1000_MFD_GROUP_KNOB_DEC: u32 = 66786;
pub const KEY_G1000_MFD_PAGE_KNOB_INC: u32 = 66787;
pub const KEY_G1000_MFD_PAGE_KNOB_DEC: u32 = 66788;
pub const KEY_G1000_MFD_SOFTKEY1: u32 = 66789;
pub const KEY_G1000_MFD_SOFTKEY2: u32 = 66790;
pub const KEY_G1000_MFD_SOFTKEY3: u32 = 66791;
pub const KEY_G1000_MFD_SOFTKEY4: u32 = 66792;
pub const KEY_G1000_MFD_SOFTKEY5: u32 = 66793;
pub const KEY_G1000_MFD_SOFTKEY6: u32 = 66794;
pub const KEY_G1000_MFD_SOFTKEY7: u32 = 66795;
pub const KEY_G1000_MFD_SOFTKEY8: u32 = 66796;
pub const KEY_G1000_MFD_SOFTKEY9: u32 = 66797;
pub const KEY_G1000_MFD_SOFTKEY10: u32 = 66798;
pub const KEY_G1000_MFD_SOFTKEY11: u32 = 66799;
pub const KEY_G1000_MFD_SOFTKEY12: u32 = 66800;
pub const KEY_TOW_PLANE_RELEASE: u32 = 66806;
pub const KEY_REQUEST_TOW_PLANE: u32 = 66807;
pub const KEY_STEERING_INC: u32 = 66816;
pub const KEY_STEERING_DEC: u32 = 66817;
pub const KEY_STEERING_SET: u32 = 66818;
pub const KEY_APU_EXTINGUISH_FIRE: u32 = 66826;
pub const KEY_FREEZE_ATTITUDE_TOGGLE: u32 = 66827;
pub const KEY_FREEZE_ATTITUDE_SET: u32 = 66828;
pub const KEY_FREEZE_LATITUDE_LONGITUDE_TOGGLE: u32 = 66829;
pub const KEY_FREEZE_LATITUDE_LONGITUDE_SET: u32 = 66830;
pub const KEY_FREEZE_LATITUDE_LONGITUE_TOGGLE: u32 = 66831;
pub const KEY_FREEZE_LATITUDE_LONGITUE_SET: u32 = 66832;
pub const KEY_FREEZE_ALTITUDE_TOGGLE: u32 = 66833;
pub const KEY_FREEZE_ALTITUDE_SET: u32 = 66834;
pub const KEY_PRESSURIZATION_PRESSURE_ALT_INC: u32 = 66836;
pub const KEY_PRESSURIZATION_PRESSURE_ALT_DEC: u32 = 66837;
pub const KEY_PRESSURIZATION_CLIMB_RATE_INC: u32 = 66838;
pub const KEY_PRESSURIZATION_CLIMB_RATE_DEC: u32 = 66839;
pub const KEY_PRESSURIZATION_CLIMB_RATE_SET: u32 = 66840;
pub const KEY_PRESSURIZATION_PRESSURE_DUMP_SWITCH: u32 = 66841;
pub const KEY_BAROMETRIC_STD_PRESSURE: u32 = 66846;
pub const KEY_MULTIPLAYER_PAUSE_SESSION: u32 = 66847;
pub const KEY_VIEW_CAMERA_SELECT_1: u32 = 66851;
pub const KEY_VIEW_CAMERA_SELECT_2: u32 = 66852;
pub const KEY_VIEW_CAMERA_SELECT_3: u32 = 66853;
pub const KEY_VIEW_CAMERA_SELECT_4: u32 = 66854;
pub const KEY_VIEW_CAMERA_SELECT_5: u32 = 66855;
pub const KEY_VIEW_CAMERA_SELECT_6: u32 = 66856;
pub const KEY_VIEW_CAMERA_SELECT_7: u32 = 66857;
pub const KEY_VIEW_CAMERA_SELECT_8: u32 = 66858;
pub const KEY_VIEW_CAMERA_SELECT_9: u32 = 66859;
pub const KEY_VIEW_CAMERA_SELECT_0: u32 = 66860;
pub const KEY_SLING_PICKUP_RELEASE: u32 = 66861;
pub const KEY_HOIST_SWITCH_EXTEND: u32 = 66862;
pub const KEY_HOIST_SWITCH_RETRACT: u32 = 66863;
pub const KEY_HOIST_SWITCH_SET: u32 = 66864;
pub const KEY_HOIST_SWITCH_SELECT: u32 = 66865;
pub const KEY_HOIST_DEPLOY_TOGGLE: u32 = 66866;
pub const KEY_HOIST_DEPLOY_SET: u32 = 66867;
pub const KEY_TOGGLE_ANTIDETONATION_TANK_VALVE: u32 = 66871;
pub const KEY_TOGGLE_NITROUS_TANK_VALVE: u32 = 66872;
pub const KEY_TAKEOFF_ASSIST_ARM_TOGGLE: u32 = 66876;
pub const KEY_TAKEOFF_ASSIST_ARM_SET: u32 = 66877;
pub const KEY_TAKEOFF_ASSIST_FIRE: u32 = 66878;
pub const KEY_TOGGLE_LAUNCH_BAR_SWITCH: u32 = 66879;
pub const KEY_SET_LAUNCH_BAR_SWITCH: u32 = 66880;
pub const KEY_SET_TAIL_HOOK_HANDLE: u32 = 66881;
pub const KEY_SET_WING_FOLD: u32 = 66882;
pub const KEY_TOGGLE_RACERESULTS_WINDOW: u32 = 66883;
pub const KEY_BLEED_AIR_SOURCE_CONTROL_SET: u32 = 66886;
pub const KEY_FUEL_DUMP_SWITCH_SET: u32 = 66887;
pub const KEY_ANNUNCIATOR_SWITCH_TOGGLE: u32 = 66888;
pub const KEY_ANNUNCIATOR_SWITCH_ON: u32 = 66889;
pub const KEY_ANNUNCIATOR_SWITCH_OFF: u32 = 66890;
pub const KEY_SHUTOFF_VALVE_TOGGLE: u32 = 66891;
pub const KEY_SHUTOFF_VALVE_ON: u32 = 66892;
pub const KEY_SHUTOFF_VALVE_OFF: u32 = 66893;
pub const KEY_LIGHT_POTENTIOMETER_INC: u32 = 66894;
pub const KEY_LIGHT_POTENTIOMETER_DEC: u32 = 66895;
pub const KEY_FUEL_SELECTOR_1_ISOLATE: u32 = 66896;
pub const KEY_FUEL_SELECTOR_1_CROSSFEED: u32 = 66897;
pub const KEY_FUEL_SELECTOR_2_ISOLATE: u32 = 66898;
pub const KEY_FUEL_SELECTOR_2_CROSSFEED: u32 = 66899;
pub const KEY_FUEL_SELECTOR_3_ISOLATE: u32 = 66900;
pub const KEY_FUEL_SELECTOR_3_CROSSFEED: u32 = 66901;
pub const KEY_FUEL_SELECTOR_4_ISOLATE: u32 = 66902;
pub const KEY_FUEL_SELECTOR_4_CROSSFEED: u32 = 66903;
pub const KEY_AUTOPILOT_DISENGAGE_TOGGLE: u32 = 66904;
pub const KEY_LIGHT_POTENTIOMETER_1_SET: u32 = 66905;
pub const KEY_LIGHT_POTENTIOMETER_2_SET: u32 = 66906;
pub const KEY_LIGHT_POTENTIOMETER_3_SET: u32 = 66907;
pub const KEY_LIGHT_POTENTIOMETER_4_SET: u32 = 66908;
pub const KEY_LIGHT_POTENTIOMETER_5_SET: u32 = 66909;
pub const KEY_LIGHT_POTENTIOMETER_6_SET: u32 = 66910;
pub const KEY_LIGHT_POTENTIOMETER_7_SET: u32 = 66911;
pub const KEY_LIGHT_POTENTIOMETER_8_SET: u32 = 66912;
pub const KEY_LIGHT_POTENTIOMETER_9_SET: u32 = 66913;
pub const KEY_LIGHT_POTENTIOMETER_10_SET: u32 = 66914;
pub const KEY_BREAKER_AVNFAN_TOGGLE: u32 = 66915;
pub const KEY_BREAKER_AUTOPILOT_TOGGLE: u32 = 66916;
pub const KEY_BREAKER_GPS_TOGGLE: u32 = 66917;
pub const KEY_BREAKER_NAVCOM1_TOGGLE: u32 = 66918;
pub const KEY_BREAKER_NAVCOM2_TOGGLE: u32 = 66919;
pub const KEY_BREAKER_ADF_TOGGLE: u32 = 66920;
pub const KEY_BREAKER_XPNDR_TOGGLE: u32 = 66921;
pub const KEY_BREAKER_FLAP_TOGGLE: u32 = 66922;
pub const KEY_BREAKER_INST_TOGGLE: u32 = 66923;
pub const KEY_BREAKER_AVNBUS1_TOGGLE: u32 = 66924;
pub const KEY_BREAKER_AVNBUS2_TOGGLE: u32 = 66925;
pub const KEY_BREAKER_TURNCOORD_TOGGLE: u32 = 66926;
pub const KEY_BREAKER_INSTLTS_TOGGLE: u32 = 66927;
pub const KEY_BREAKER_ALTFLD_TOGGLE: u32 = 66928;
pub const KEY_BREAKER_WARN_TOGGLE: u32 = 66929;
pub const KEY_BREAKER_AVNFAN_SET: u32 = 66930;
pub const KEY_BREAKER_AUTOPILOT_SET: u32 = 66931;
pub const KEY_BREAKER_GPS_SET: u32 = 66932;
pub const KEY_BREAKER_NAVCOM1_SET: u32 = 66933;
pub const KEY_BREAKER_NAVCOM2_SET: u32 = 66934;
pub const KEY_BREAKER_ADF_SET: u32 = 66935;
pub const KEY_BREAKER_XPNDR_SET: u32 = 66936;
pub const KEY_BREAKER_FLAP_SET: u32 = 66937;
pub const KEY_BREAKER_INST_SET: u32 = 66938;
pub const KEY_BREAKER_AVNBUS1_SET: u32 = 66939;
pub const KEY_BREAKER_AVNBUS2_SET: u32 = 66940;
pub const KEY_BREAKER_TURNCOORD_SET: u32 = 66941;
pub const KEY_BREAKER_INSTLTS_SET: u32 = 66942;
pub const KEY_BREAKER_ALTFLD_SET: u32 = 66943;
pub const KEY_BREAKER_WARN_SET: u32 = 66944;
pub const KEY_PILOT_TRANSMITTER_SET: u32 = 66945;
pub const KEY_COPILOT_TRANSMITTER_SET: u32 = 66946;
pub const KEY_TOGGLE_SPEAKER: u32 = 66947;
pub const KEY_TOGGLE_ICS: u32 = 66948;
pub const KEY_AUDIO_PANEL_VOLUME_INC: u32 = 66949;
pub const KEY_AUDIO_PANEL_VOLUME_DEC: u32 = 66950;
pub const KEY_MARKER_BEACON_SENSITIVITY_HIGH: u32 = 66951;
pub const KEY_MARKER_BEACON_TEST_MUTE: u32 = 66952;
pub const KEY_INTERCOM_MODE_SET: u32 = 66953;
pub const KEY_COM3_RADIO_SET: u32 = 66954;
pub const KEY_COM3_STBY_RADIO_SET: u32 = 66955;
pub const KEY_COM3_RADIO_WHOLE_DEC: u32 = 66956;
pub const KEY_COM3_RADIO_WHOLE_INC: u32 = 66957;
pub const KEY_COM3_RADIO_FRACT_DEC: u32 = 66958;
pub const KEY_COM3_RADIO_FRACT_INC: u32 = 66959;
pub const KEY_COM3_RADIO_FRACT_DEC_CARRY: u32 = 66960;
pub const KEY_COM3_RADIO_FRACT_INC_CARRY: u32 = 66961;
pub const KEY_COM3_RADIO_SWAP: u32 = 66962;
pub const KEY_RADIO_COMMNAV3_TEST_TOGGLE: u32 = 66963;
pub const KEY_COM1_RECEIVE_SELECT: u32 = 66964;
pub const KEY_COM2_RECEIVE_SELECT: u32 = 66965;
pub const KEY_COM3_RECEIVE_SELECT: u32 = 66966;
pub const KEY_PEDESTRAL_LIGHTS_TOGGLE: u32 = 66967;
pub const KEY_PEDESTRAL_LIGHTS_ON: u32 = 66968;
pub const KEY_PEDESTRAL_LIGHTS_OFF: u32 = 66969;
pub const KEY_PEDESTRAL_LIGHTS_SET: u32 = 66970;
pub const KEY_GLARESHIELD_LIGHTS_TOGGLE: u32 = 66971;
pub const KEY_GLARESHIELD_LIGHTS_ON: u32 = 66972;
pub const KEY_GLARESHIELD_LIGHTS_OFF: u32 = 66973;
pub const KEY_GLARESHIELD_LIGHTS_SET: u32 = 66974;
pub const KEY_CABIN_LIGHTS_ON: u32 = 66975;
pub const KEY_CABIN_LIGHTS_OFF: u32 = 66976;
pub const KEY_CABIN_LIGHTS_SET: u32 = 66977;
pub const KEY_COM1_VOLUME_SET: u32 = 66978;
pub const KEY_COM1_VOLUME_INC: u32 = 66979;
pub const KEY_COM1_VOLUME_DEC: u32 = 66980;
pub const KEY_COM2_VOLUME_SET: u32 = 66981;
pub const KEY_COM2_VOLUME_INC: u32 = 66982;
pub const KEY_COM2_VOLUME_DEC: u32 = 66983;
pub const KEY_COM3_VOLUME_SET: u32 = 66984;
pub const KEY_COM3_VOLUME_INC: u32 = 66985;
pub const KEY_COM3_VOLUME_DEC: u32 = 66986;
pub const KEY_NAV1_VOLUME_SET: u32 = 66987;
pub const KEY_NAV1_VOLUME_INC: u32 = 66988;
pub const KEY_NAV1_VOLUME_DEC: u32 = 66989;
pub const KEY_NAV2_VOLUME_SET: u32 = 66990;
pub const KEY_NAV2_VOLUME_INC: u32 = 66991;
pub const KEY_NAV2_VOLUME_DEC: u32 = 66992;
pub const KEY_ATTITUDE_BARS_POSITION_SET: u32 = 66993;
pub const KEY_COM1_STORED_FREQUENCY_SET: u32 = 66994;
pub const KEY_COM1_STORED_FREQUENCY_INDEX_SET: u32 = 66995;
pub const KEY_COM2_STORED_FREQUENCY_SET: u32 = 66996;
pub const KEY_COM2_STORED_FREQUENCY_INDEX_SET: u32 = 66997;
pub const KEY_COM3_STORED_FREQUENCY_SET: u32 = 66998;
pub const KEY_COM3_STORED_FREQUENCY_INDEX_SET: u32 = 66999;
pub const KEY_RUDDER_TRIM_DISABLED_SET: u32 = 67000;
pub const KEY_RUDDER_TRIM_DISABLED_TOGGLE: u32 = 67001;
pub const KEY_ELEVATOR_TRIM_DISABLED_SET: u32 = 67002;
pub const KEY_ELEVATOR_TRIM_DISABLED_TOGGLE: u32 = 67003;
pub const KEY_AILERON_TRIM_DISABLED_SET: u32 = 67004;
pub const KEY_AILERON_TRIM_DISABLED_TOGGLE: u32 = 67005;
pub const KEY_SET_STARTER_ALL_HELD: u32 = 67006;
pub const KEY_SET_STARTER1_HELD: u32 = 67007;
pub const KEY_SET_STARTER2_HELD: u32 = 67008;
pub const KEY_SET_STARTER3_HELD: u32 = 67009;
pub const KEY_SET_STARTER4_HELD: u32 = 67010;
pub const KEY_ANTI_ICE_GRADUAL_SET: u32 = 67011;
pub const KEY_ANTI_ICE_GRADUAL_SET_ENG1: u32 = 67012;
pub const KEY_ANTI_ICE_GRADUAL_SET_ENG2: u32 = 67013;
pub const KEY_ANTI_ICE_GRADUAL_SET_ENG3: u32 = 67014;
pub const KEY_ANTI_ICE_GRADUAL_SET_ENG4: u32 = 67015;
pub const KEY_TURBINE_IGNITION_SWITCH_SET: u32 = 67016;
pub const KEY_TURBINE_IGNITION_SWITCH_SET1: u32 = 67017;
pub const KEY_TURBINE_IGNITION_SWITCH_SET2: u32 = 67018;
pub const KEY_TURBINE_IGNITION_SWITCH_SET3: u32 = 67019;
pub const KEY_TURBINE_IGNITION_SWITCH_SET4: u32 = 67020;
pub const KEY_TOGGLE_AIRCRAFT_EXIT_FAST: u32 = 67021;
pub const KEY_ELT_TOGGLE: u32 = 67022;
pub const KEY_ELT_OFF: u32 = 67023;
pub const KEY_ELT_ON: u32 = 67024;
pub const KEY_ELT_SET: u32 = 67025;
pub const KEY_ENGINE_MASTER_SET: u32 = 67026;
pub const KEY_ENGINE_MASTER_TOGGLE: u32 = 67027;
pub const KEY_AUTOPILOT_DISENGAGE_SET: u32 = 67028;
pub const KEY_LIGHT_POTENTIOMETER_11_SET: u32 = 67029;
pub const KEY_LIGHT_POTENTIOMETER_12_SET: u32 = 67030;
pub const KEY_LIGHT_POTENTIOMETER_13_SET: u32 = 67031;
pub const KEY_LIGHT_POTENTIOMETER_14_SET: u32 = 67032;
pub const KEY_LIGHT_POTENTIOMETER_15_SET: u32 = 67033;
pub const KEY_LIGHT_POTENTIOMETER_16_SET: u32 = 67034;
pub const KEY_LIGHT_POTENTIOMETER_17_SET: u32 = 67035;
pub const KEY_LIGHT_POTENTIOMETER_18_SET: u32 = 67036;
pub const KEY_LIGHT_POTENTIOMETER_19_SET: u32 = 67037;
pub const KEY_LIGHT_POTENTIOMETER_20_SET: u32 = 67038;
pub const KEY_LIGHT_POTENTIOMETER_21_SET: u32 = 67039;
pub const KEY_LIGHT_POTENTIOMETER_22_SET: u32 = 67040;
pub const KEY_LIGHT_POTENTIOMETER_23_SET: u32 = 67041;
pub const KEY_LIGHT_POTENTIOMETER_24_SET: u32 = 67042;
pub const KEY_LIGHT_POTENTIOMETER_25_SET: u32 = 67043;
pub const KEY_LIGHT_POTENTIOMETER_26_SET: u32 = 67044;
pub const KEY_LIGHT_POTENTIOMETER_27_SET: u32 = 67045;
pub const KEY_LIGHT_POTENTIOMETER_28_SET: u32 = 67046;
pub const KEY_LIGHT_POTENTIOMETER_29_SET: u32 = 67047;
pub const KEY_LIGHT_POTENTIOMETER_30_SET: u32 = 67048;
pub const KEY_COM1_RADIO_SWAP: u32 = 67049;
pub const KEY_BREAKER_NAVCOM3_SET: u32 = 67050;
pub const KEY_BREAKER_NAVCOM3_TOGGLE: u32 = 67051;
pub const KEY_ELECT_FUEL_PUMP1_SET: u32 = 67052;
pub const KEY_ELECT_FUEL_PUMP2_SET: u32 = 67053;
pub const KEY_ELECT_FUEL_PUMP3_SET: u32 = 67054;
pub const KEY_ELECT_FUEL_PUMP4_SET: u32 = 67055;
pub const KEY_FLAPS_CONTINUOUS_INCR: u32 = 67056;
pub const KEY_FLAPS_CONTINUOUS_DECR: u32 = 67057;
pub const KEY_FLAPS_CONTINUOUS_SET: u32 = 67058;
pub const KEY_ENGINE_MASTER_1_SET: u32 = 67059;
pub const KEY_ENGINE_MASTER_2_SET: u32 = 67060;
pub const KEY_ENGINE_MASTER_3_SET: u32 = 67061;
pub const KEY_ENGINE_MASTER_4_SET: u32 = 67062;
pub const KEY_ENGINE_MASTER_1_TOGGLE: u32 = 67063;
pub const KEY_ENGINE_MASTER_2_TOGGLE: u32 = 67064;
pub const KEY_ENGINE_MASTER_3_TOGGLE: u32 = 67065;
pub const KEY_ENGINE_MASTER_4_TOGGLE: u32 = 67066;
pub const KEY_SET_FUEL_TRANSFER_CUSTOM: u32 = 67067;
pub const KEY_FUEL_TRANSFER_CUSTOM_INDEX_TOGGLE: u32 = 67068;
pub const KEY_AP_PITCH_LEVELER: u32 = 67069;
pub const KEY_AP_PITCH_LEVELER_ON: u32 = 67070;
pub const KEY_AP_PITCH_LEVELER_OFF: u32 = 67071;
pub const KEY_ELECTRICAL_CIRCUIT_TOGGLE: u32 = 67072;
pub const KEY_ELECTRICAL_BUS_TO_BUS_CONNECTION_TOGGLE: u32 = 67073;
pub const KEY_ELECTRICAL_BUS_TO_BATTERY_CONNECTION_TOGGLE: u32 = 67074;
pub const KEY_ELECTRICAL_BUS_TO_ALTERNATOR_CONNECTION_TOGGLE: u32 = 67075;
pub const KEY_ELECTRICAL_BUS_TO_CIRCUIT_CONNECTION_TOGGLE: u32 = 67076;
pub const KEY_ELECTRICAL_BUS_BREAKER_TOGGLE: u32 = 67077;
pub const KEY_ELECTRICAL_BATTERY_BREAKER_TOGGLE: u32 = 67078;
pub const KEY_ELECTRICAL_ALTERNATOR_BREAKER_TOGGLE: u32 = 67079;
pub const KEY_ELECTRICAL_CIRCUIT_BREAKER_TOGGLE: u32 = 67080;
pub const KEY_ADF_VOLUME_SET: u32 = 67081;
pub const KEY_ADF_VOLUME_INC: u32 = 67082;
pub const KEY_ADF_VOLUME_DEC: u32 = 67083;
pub const KEY_ENGINE_BLEED_AIR_SOURCE_SET: u32 = 67084;
pub const KEY_ENGINE_BLEED_AIR_SOURCE_TOGGLE: u32 = 67085;
pub const KEY_APU_BLEED_AIR_SOURCE_SET: u32 = 67086;
pub const KEY_APU_BLEED_AIR_SOURCE_TOGGLE: u32 = 67087;
pub const KEY_ELECTRICAL_BUS_TO_EXTERNAL_POWER_CONNECTION_TOGGLE: u32 = 67088;
pub const KEY_ELECTRICAL_EXTERNAL_POWER_BREAKER_TOGGLE: u32 = 67089;
pub const KEY_TOGGLE_EXTERNAL_POWER: u32 = 67090;
pub const KEY_SET_EXTERNAL_POWER: u32 = 67091;
pub const KEY_THROTTLE_REVERSE_THRUST_TOGGLE: u32 = 67092;
pub const KEY_THROTTLE_REVERSE_THRUST_HOLD: u32 = 67093;
pub const KEY_PROPELLER_REVERSE_THRUST_TOGGLE: u32 = 67094;
pub const KEY_PROPELLER_REVERSE_THRUST_HOLD: u32 = 67095;
pub const KEY_THROTTLE_AXIS_SET_EX1: u32 = 67096;
pub const KEY_THROTTLE_INCREASE_EX1: u32 = 67097;
pub const KEY_THROTTLE_INCREASE_SMALL_EX1: u32 = 67098;
pub const KEY_THROTTLE_DECREASE_EX1: u32 = 67099;
pub const KEY_THROTTLE_DECREASE_SMALL_EX1: u32 = 67100;
pub const KEY_THROTTLE_FULL_EX1: u32 = 67101;
pub const KEY_THROTTLE_CUT_EX1: u32 = 67102;
pub const KEY_THROTTLE1_AXIS_SET_EX1: u32 = 67103;
pub const KEY_THROTTLE1_INCREASE_EX1: u32 = 67104;
pub const KEY_THROTTLE1_INCREASE_SMALL_EX1: u32 = 67105;
pub const KEY_THROTTLE1_DECREASE_EX1: u32 = 67106;
pub const KEY_THROTTLE1_DECREASE_SMALL_EX1: u32 = 67107;
pub const KEY_THROTTLE1_FULL_EX1: u32 = 67108;
pub const KEY_THROTTLE1_CUT_EX1: u32 = 67109;
pub const KEY_THROTTLE2_AXIS_SET_EX1: u32 = 67110;
pub const KEY_THROTTLE2_INCREASE_EX1: u32 = 67111;
pub const KEY_THROTTLE2_INCREASE_SMALL_EX1: u32 = 67112;
pub const KEY_THROTTLE2_DECREASE_EX1: u32 = 67113;
pub const KEY_THROTTLE2_DECREASE_SMALL_EX1: u32 = 67114;
pub const KEY_THROTTLE2_FULL_EX1: u32 = 67115;
pub const KEY_THROTTLE2_CUT_EX1: u32 = 67116;
pub const KEY_THROTTLE3_AXIS_SET_EX1: u32 = 67117;
pub const KEY_THROTTLE3_INCREASE_EX1: u32 = 67118;
pub const KEY_THROTTLE3_INCREASE_SMALL_EX1: u32 = 67119;
pub const KEY_THROTTLE3_DECREASE_EX1: u32 = 67120;
pub const KEY_THROTTLE3_DECREASE_SMALL_EX1: u32 = 67121;
pub const KEY_THROTTLE3_FULL_EX1: u32 = 67122;
pub const KEY_THROTTLE3_CUT_EX1: u32 = 67123;
pub const KEY_THROTTLE4_AXIS_SET_EX1: u32 = 67124;
pub const KEY_THROTTLE4_INCREASE_EX1: u32 = 67125;
pub const KEY_THROTTLE4_INCREASE_SMALL_EX1: u32 = 67126;
pub const KEY_THROTTLE4_DECREASE_EX1: u32 = 67127;
pub const KEY_THROTTLE4_DECREASE_SMALL_EX1: u32 = 67128;
pub const KEY_THROTTLE4_FULL_EX1: u32 = 67129;
pub const KEY_THROTTLE4_CUT_EX1: u32 = 67130;
pub const KEY_PROP_PITCH_AXIS_SET_EX1: u32 = 67131;
pub const KEY_PROP_PITCH_INCREASE_EX1: u32 = 67132;
pub const KEY_PROP_PITCH_INCREASE_SMALL_EX1: u32 = 67133;
pub const KEY_PROP_PITCH_DECREASE_EX1: u32 = 67134;
pub const KEY_PROP_PITCH_DECREASE_SMALL_EX1: u32 = 67135;
pub const KEY_PROP_PITCH_LO_EX1: u32 = 67136;
pub const KEY_PROP_PITCH_HI_EX1: u32 = 67137;
pub const KEY_PROP_PITCH1_AXIS_SET_EX1: u32 = 67138;
pub const KEY_PROP_PITCH1_INCREASE_EX1: u32 = 67139;
pub const KEY_PROP_PITCH1_INCREASE_SMALL_EX1: u32 = 67140;
pub const KEY_PROP_PITCH1_DECREASE_EX1: u32 = 67141;
pub const KEY_PROP_PITCH1_DECREASE_SMALL_EX1: u32 = 67142;
pub const KEY_PROP_PITCH1_LO_EX1: u32 = 67143;
pub const KEY_PROP_PITCH1_HI_EX1: u32 = 67144;
pub const KEY_PROP_PITCH2_AXIS_SET_EX1: u32 = 67145;
pub const KEY_PROP_PITCH2_INCREASE_EX1: u32 = 67146;
pub const KEY_PROP_PITCH2_INCREASE_SMALL_EX1: u32 = 67147;
pub const KEY_PROP_PITCH2_DECREASE_EX1: u32 = 67148;
pub const KEY_PROP_PITCH2_DECREASE_SMALL_EX1: u32 = 67149;
pub const KEY_PROP_PITCH2_LO_EX1: u32 = 67150;
pub const KEY_PROP_PITCH2_HI_EX1: u32 = 67151;
pub const KEY_PROP_PITCH3_AXIS_SET_EX1: u32 = 67152;
pub const KEY_PROP_PITCH3_INCREASE_EX1: u32 = 67153;
pub const KEY_PROP_PITCH3_INCREASE_SMALL_EX1: u32 = 67154;
pub const KEY_PROP_PITCH3_DECREASE_EX1: u32 = 67155;
pub const KEY_PROP_PITCH3_DECREASE_SMALL_EX1: u32 = 67156;
pub const KEY_PROP_PITCH3_LO_EX1: u32 = 67157;
pub const KEY_PROP_PITCH3_HI_EX1: u32 = 67158;
pub const KEY_PROP_PITCH4_AXIS_SET_EX1: u32 = 67159;
pub const KEY_PROP_PITCH4_INCREASE_EX1: u32 = 67160;
pub const KEY_PROP_PITCH4_INCREASE_SMALL_EX1: u32 = 67161;
pub const KEY_PROP_PITCH4_DECREASE_EX1: u32 = 67162;
pub const KEY_PROP_PITCH4_DECREASE_SMALL_EX1: u32 = 67163;
pub const KEY_PROP_PITCH4_LO_EX1: u32 = 67164;
pub const KEY_PROP_PITCH4_HI_EX1: u32 = 67165;
pub const KEY_TAXI_LIGHTS_ON: u32 = 67166;
pub const KEY_TAXI_LIGHTS_OFF: u32 = 67167;
pub const KEY_BEACON_LIGHTS_ON: u32 = 67168;
pub const KEY_BEACON_LIGHTS_OFF: u32 = 67169;
pub const KEY_NAV_LIGHTS_ON: u32 = 67170;
pub const KEY_NAV_LIGHTS_OFF: u32 = 67171;
pub const KEY_MASTER_BATTERY_OFF: u32 = 67172;
pub const KEY_MASTER_BATTERY_ON: u32 = 67173;
pub const KEY_ALTERNATOR_OFF: u32 = 67174;
pub const KEY_ALTERNATOR_ON: u32 = 67175;
pub const KEY_AVIONICS_MASTER_1_ON: u32 = 67176;
pub const KEY_AVIONICS_MASTER_1_OFF: u32 = 67177;
pub const KEY_AVIONICS_MASTER_2_ON: u32 = 67178;
pub const KEY_AVIONICS_MASTER_2_OFF: u32 = 67179;
pub const KEY_MASTER_BATTERY_SET: u32 = 67180;
pub const KEY_ALTERNATOR_SET: u32 = 67181;
pub const KEY_AVIONICS_MASTER_1_SET: u32 = 67182;
pub const KEY_AVIONICS_MASTER_2_SET: u32 = 67183;
pub const KEY_TAXI_LIGHTS_SET: u32 = 67184;
pub const KEY_BEACON_LIGHTS_SET: u32 = 67185;
pub const KEY_NAV_LIGHTS_SET: u32 = 67186;
pub const KEY_BATTERY1_SET: u32 = 67187;
pub const KEY_BATTERY2_SET: u32 = 67188;
pub const KEY_BATTERY3_SET: u32 = 67189;
pub const KEY_BATTERY4_SET: u32 = 67190;
pub const KEY_FUELSYSTEM_PUMP_TOGGLE: u32 = 67191;
pub const KEY_FUELSYSTEM_PUMP_SET: u32 = 67192;
pub const KEY_FUELSYSTEM_PUMP_OFF: u32 = 67193;
pub const KEY_FUELSYSTEM_PUMP_ON: u32 = 67194;
pub const KEY_FUELSYSTEM_VALVE_TOGGLE: u32 = 67195;
pub const KEY_FUELSYSTEM_VALVE_SET: u32 = 67196;
pub const KEY_FUELSYSTEM_VALVE_CLOSE: u32 = 67197;
pub const KEY_FUELSYSTEM_VALVE_OPEN: u32 = 67198;
pub const KEY_FUELSYSTEM_JUNCTION_SET: u32 = 67199;
pub const KEY_FUELSYSTEM_TRIGGER_TOGGLE: u32 = 67200;
pub const KEY_FUELSYSTEM_TRIGGER_SET: u32 = 67201;
pub const KEY_FUELSYSTEM_TRIGGER_OFF: u32 = 67202;
pub const KEY_FUELSYSTEM_TRIGGER_ON: u32 = 67203;
pub const KEY_REQUEST_LUGGAGE: u32 = 67204;
pub const KEY_TOGGLE_RAMPTRUCK: u32 = 67205;
pub const KEY_REQUEST_POWER_SUPPLY: u32 = 67206;
pub const KEY_REQUEST_CATERING: u32 = 67207;
pub const KEY_ELECTRICAL_CIRCUIT_POWER_SETTING_SET: u32 = 67208;
pub const KEY_PANEL_LIGHTS_POWER_SETTING_SET: u32 = 67209;
pub const KEY_CABIN_LIGHTS_POWER_SETTING_SET: u32 = 67210;
pub const KEY_PEDESTRAL_LIGHTS_POWER_SETTING_SET: u32 = 67211;
pub const KEY_GLARESHIELD_LIGHTS_POWER_SETTING_SET: u32 = 67212;
pub const KEY_ELECTRICAL_EXECUTE_PROCEDURE: u32 = 67213;
pub const KEY_AP_FLIGHT_LEVEL_CHANGE: u32 = 67214;
pub const KEY_AP_FLIGHT_LEVEL_CHANGE_ON: u32 = 67215;
pub const KEY_AP_FLIGHT_LEVEL_CHANGE_OFF: u32 = 67216;
pub const KEY_AP_ALTITUDE_SLOT_INDEX_SET: u32 = 67217;
pub const KEY_AP_HEADING_SLOT_INDEX_SET: u32 = 67218;
pub const KEY_AP_VS_SLOT_INDEX_SET: u32 = 67219;
pub const KEY_AP_SPEED_SLOT_INDEX_SET: u32 = 67220;
pub const KEY_AP_RPM_SLOT_INDEX_SET: u32 = 67221;
pub const KEY_AUDIO_PANEL_VOLUME_SET: u32 = 67222;
pub const KEY_WINDSHIELD_DEICE_SET: u32 = 67223;
pub const KEY_WINDSHIELD_DEICE_TOGGLE: u32 = 67224;
pub const KEY_WINDSHIELD_DEICE_ON: u32 = 67225;
pub const KEY_WINDSHIELD_DEICE_OFF: u32 = 67226;
pub const KEY_LIGHT_POTENTIOMETER_SET: u32 = 67227;
pub const KEY_AP_MANAGED_SPEED_IN_MACH_SET: u32 = 67228;
pub const KEY_AP_MANAGED_SPEED_IN_MACH_ON: u32 = 67229;
pub const KEY_AP_MANAGED_SPEED_IN_MACH_OFF: u32 = 67230;
pub const KEY_AP_MANAGED_SPEED_IN_MACH_TOGGLE: u32 = 67231;
pub const KEY_AP_VS_VAR_SET_CURRENT: u32 = 67232;
pub const KEY_LOGO_LIGHTS_SET: u32 = 67233;
pub const KEY_RECOGNITION_LIGHTS_SET: u32 = 67234;
pub const KEY_RUDDER_TRIM_SET_EX1: u32 = 67235;
pub const KEY_AILERON_TRIM_SET_EX1: u32 = 67236;
pub const KEY_COM_1_SPACING_MODE_SWITCH: u32 = 67237;
pub const KEY_COM_2_SPACING_MODE_SWITCH: u32 = 67238;
pub const KEY_COM_3_SPACING_MODE_SWITCH: u32 = 67239;
pub const KEY_COM_RADIO_SET_HZ: u32 = 67240;
pub const KEY_COM_STBY_RADIO_SET_HZ: u32 = 67241;
pub const KEY_COM2_RADIO_SET_HZ: u32 = 67242;
pub const KEY_COM2_STBY_RADIO_SET_HZ: u32 = 67243;
pub const KEY_COM3_RADIO_SET_HZ: u32 = 67244;
pub const KEY_COM3_STBY_RADIO_SET_HZ: u32 = 67245;
pub const KEY_COM1_STORED_FREQUENCY_SET_HZ: u32 = 67246;
pub const KEY_COM2_STORED_FREQUENCY_SET_HZ: u32 = 67247;
pub const KEY_COM3_STORED_FREQUENCY_SET_HZ: u32 = 67248;
pub const KEY_NAV1_STBY_SET_HZ: u32 = 67249;
pub const KEY_NAV2_STBY_SET_HZ: u32 = 67250;
pub const KEY_NAV1_RADIO_SET_HZ: u32 = 67251;
pub const KEY_NAV2_RADIO_SET_HZ: u32 = 67252;
pub const KEY_AP_MAX_BANK_SET: u32 = 67253;
pub const KEY_NAV1_CLOSE_FREQ_SET: u32 = 67254;
pub const KEY_NAV2_CLOSE_FREQ_SET: u32 = 67255;
pub const KEY_NAV3_RADIO_SWAP: u32 = 67256;
pub const KEY_NAV3_RADIO_SET: u32 = 67257;
pub const KEY_NAV3_RADIO_SET_HZ: u32 = 67258;
pub const KEY_NAV3_STBY_SET: u32 = 67259;
pub const KEY_NAV3_STBY_SET_HZ: u32 = 67260;
pub const KEY_NAV3_CLOSE_FREQ_SET: u32 = 67261;
pub const KEY_NAV4_RADIO_SWAP: u32 = 67262;
pub const KEY_NAV4_RADIO_SET: u32 = 67263;
pub const KEY_NAV4_RADIO_SET_HZ: u32 = 67264;
pub const KEY_NAV4_STBY_SET: u32 = 67265;
pub const KEY_NAV4_STBY_SET_HZ: u32 = 67266;
pub const KEY_NAV4_CLOSE_FREQ_SET: u32 = 67267;
pub const KEY_AP_SPD_VAR_SET_EX1: u32 = 67268;
pub const KEY_AP_MACH_VAR_SET_EX1: u32 = 67269;
pub const KEY_HEADING_BUG_SET_EX1: u32 = 67270;
pub const KEY_PARKING_BRAKE_SET: u32 = 67271;
pub const KEY_RUDDER_TRIM_RESET: u32 = 67272;
pub const KEY_ENGINE_MODE_CRANK_SET: u32 = 67273;
pub const KEY_ENGINE_MODE_NORM_SET: u32 = 67274;
pub const KEY_ENGINE_MODE_IGN_START: u32 = 67275;
pub const KEY_AUTOBRAKE_LO_SET: u32 = 67276;
pub const KEY_AUTOBRAKE_MED_SET: u32 = 67277;
pub const KEY_AUTOBRAKE_HI_SET: u32 = 67278;
pub const KEY_AUTO_THROTTLE_DISCONNECT: u32 = 67279;
pub const KEY_SET_FUEL_VALVE_ENG1: u32 = 67280;
pub const KEY_SET_FUEL_VALVE_ENG2: u32 = 67281;
pub const KEY_SET_FUEL_VALVE_ENG3: u32 = 67282;
pub const KEY_SET_FUEL_VALVE_ENG4: u32 = 67283;
pub const KEY_RUDDER_AXIS_PLUS: u32 = 67284;
pub const KEY_RUDDER_AXIS_MINUS: u32 = 67285;
pub const KEY_GPS_OBS: u32 = 67286;
pub const KEY_GPS_OBS_ON: u32 = 67287;
pub const KEY_GPS_OBS_OFF: u32 = 67288;
pub const KEY_GPS_OBS_SET: u32 = 67289;
pub const KEY_GPS_OBS_INC: u32 = 67290;
pub const KEY_GPS_OBS_DEC: u32 = 67291;
pub const KEY_AUTOBRAKE_DISARM: u32 = 67292;
pub const KEY_MANUAL_FUEL_PRESSURE_PUMP_SET: u32 = 67293;
pub const KEY_ADF_ACTIVE_SET: u32 = 67294;
pub const KEY_ADF_STBY_SET: u32 = 67295;
pub const KEY_ADF2_ACTIVE_SET: u32 = 67296;
pub const KEY_ADF2_STBY_SET: u32 = 67297;
pub const KEY_AP_PITCH_REF_SET: u32 = 67298;
pub const KEY_AP_BANK_HOLD: u32 = 67299;
pub const KEY_AP_BANK_HOLD_ON: u32 = 67300;
pub const KEY_AP_BANK_HOLD_OFF: u32 = 67301;
pub const KEY_AXIS_LEFT_BRAKE_LINEAR_SET: u32 = 67302;
pub const KEY_AXIS_RIGHT_BRAKE_LINEAR_SET: u32 = 67303;
pub const KEY_GYRO_DRIFT_SET_EX1: u32 = 67304;
pub const KEY_WING_LIGHTS_OFF: u32 = 67305;
pub const KEY_WING_LIGHTS_ON: u32 = 67306;
pub const KEY_WING_LIGHTS_SET: u32 = 67307;
pub const KEY_AP_AVIONICS_MANAGED_ON: u32 = 67308;
pub const KEY_AP_AVIONICS_MANAGED_OFF: u32 = 67309;
pub const KEY_AP_AVIONICS_MANAGED_TOGGLE: u32 = 67310;
pub const KEY_AP_AVIONICS_MANAGED_SET: u32 = 67311;
pub const KEY_XPNDR_IDENT_SET: u32 = 67312;
pub const KEY_XPNDR_IDENT_TOGGLE: u32 = 67313;
pub const KEY_XPNDR_IDENT_ON: u32 = 67314;
pub const KEY_XPNDR_IDENT_OFF: u32 = 67315;
pub const KEY_AXIS_THROTTLE_PLUS: u32 = 67316;
pub const KEY_AXIS_THROTTLE_MINUS: u32 = 67317;
pub const KEY_OIL_COOLING_FLAPS_SET: u32 = 67318;
pub const KEY_OIL_COOLING_FLAPS_UP: u32 = 67319;
pub const KEY_OIL_COOLING_FLAPS_DOWN: u32 = 67320;
pub const KEY_OIL_COOLING_FLAPS_TOGGLE: u32 = 67321;
pub const KEY_RADIATOR_COOLING_FLAPS_SET: u32 = 67322;
pub const KEY_RADIATOR_COOLING_FLAPS_UP: u32 = 67323;
pub const KEY_RADIATOR_COOLING_FLAPS_DOWN: u32 = 67324;
pub const KEY_RADIATOR_COOLING_FLAPS_TOGGLE: u32 = 67325;
pub const KEY_NAV1_VOLUME_SET_EX1: u32 = 67326;
pub const KEY_NAV2_VOLUME_SET_EX1: u32 = 67327;
pub const KEY_TACAN1_ACTIVE_CHANNEL_SET: u32 = 67328;
pub const KEY_TACAN1_ACTIVE_MODE_SET: u32 = 67329;
pub const KEY_TACAN1_STANDBY_CHANNEL_SET: u32 = 67330;
pub const KEY_TACAN1_STANDBY_MODE_SET: u32 = 67331;
pub const KEY_TACAN1_SWAP: u32 = 67332;
pub const KEY_TACAN1_VOLUME_DEC: u32 = 67333;
pub const KEY_TACAN1_VOLUME_INC: u32 = 67334;
pub const KEY_TACAN1_VOLUME_SET: u32 = 67335;
pub const KEY_TACAN2_ACTIVE_CHANNEL_SET: u32 = 67336;
pub const KEY_TACAN2_ACTIVE_MODE_SET: u32 = 67337;
pub const KEY_TACAN2_STANDBY_CHANNEL_SET: u32 = 67338;
pub const KEY_TACAN2_STANDBY_MODE_SET: u32 = 67339;
pub const KEY_TACAN2_SWAP: u32 = 67340;
pub const KEY_TACAN2_VOLUME_DEC: u32 = 67341;
pub const KEY_TACAN2_VOLUME_INC: u32 = 67342;
pub const KEY_TACAN2_VOLUME_SET: u32 = 67343;
pub const KEY_G_LIMITER_ON: u32 = 67344;
pub const KEY_G_LIMITER_OFF: u32 = 67345;
pub const KEY_G_LIMITER_SET: u32 = 67346;
pub const KEY_G_LIMITER_TOGGLE: u32 = 67347;
pub const KEY_TACAN1_SET: u32 = 67348;
pub const KEY_TACAN2_SET: u32 = 67349;
pub const KEY_TACAN1_OBI_DEC: u32 = 67350;
pub const KEY_TACAN2_OBI_DEC: u32 = 67351;
pub const KEY_TACAN1_OBI_INC: u32 = 67352;
pub const KEY_TACAN2_OBI_INC: u32 = 67353;
pub const KEY_TACAN1_OBI_FAST_DEC: u32 = 67354;
pub const KEY_TACAN2_OBI_FAST_DEC: u32 = 67355;
pub const KEY_TACAN1_OBI_FAST_INC: u32 = 67356;
pub const KEY_TACAN2_OBI_FAST_INC: u32 = 67357;
pub const KEY_TOGGLE_TACAN_DRIVES_NAV1: u32 = 67358;
pub const KEY_CONDITION_LEVER_SET: u32 = 67359;
pub const KEY_CONDITION_LEVER_INC: u32 = 67360;
pub const KEY_CONDITION_LEVER_DEC: u32 = 67361;
pub const KEY_CONDITION_LEVER_HIGH_IDLE: u32 = 67362;
pub const KEY_CONDITION_LEVER_LOW_IDLE: u32 = 67363;
pub const KEY_CONDITION_LEVER_CUT_OFF: u32 = 67364;
pub const KEY_AXIS_CONDITION_LEVER_SET: u32 = 67365;
pub const KEY_CONDITION_LEVER_1_SET: u32 = 67366;
pub const KEY_CONDITION_LEVER_1_INC: u32 = 67367;
pub const KEY_CONDITION_LEVER_1_DEC: u32 = 67368;
pub const KEY_CONDITION_LEVER_1_HIGH_IDLE: u32 = 67369;
pub const KEY_CONDITION_LEVER_1_LOW_IDLE: u32 = 67370;
pub const KEY_CONDITION_LEVER_1_CUT_OFF: u32 = 67371;
pub const KEY_AXIS_CONDITION_LEVER_1_SET: u32 = 67372;
pub const KEY_CONDITION_LEVER_2_SET: u32 = 67373;
pub const KEY_CONDITION_LEVER_2_INC: u32 = 67374;
pub const KEY_CONDITION_LEVER_2_DEC: u32 = 67375;
pub const KEY_CONDITION_LEVER_2_HIGH_IDLE: u32 = 67376;
pub const KEY_CONDITION_LEVER_2_LOW_IDLE: u32 = 67377;
pub const KEY_CONDITION_LEVER_2_CUT_OFF: u32 = 67378;
pub const KEY_AXIS_CONDITION_LEVER_2_SET: u32 = 67379;
pub const KEY_CONDITION_LEVER_3_SET: u32 = 67380;
pub const KEY_CONDITION_LEVER_3_INC: u32 = 67381;
pub const KEY_CONDITION_LEVER_3_DEC: u32 = 67382;
pub const KEY_CONDITION_LEVER_3_HIGH_IDLE: u32 = 67383;
pub const KEY_CONDITION_LEVER_3_LOW_IDLE: u32 = 67384;
pub const KEY_CONDITION_LEVER_3_CUT_OFF: u32 = 67385;
pub const KEY_AXIS_CONDITION_LEVER_3_SET: u32 = 67386;
pub const KEY_CONDITION_LEVER_4_SET: u32 = 67387;
pub const KEY_CONDITION_LEVER_4_INC: u32 = 67388;
pub const KEY_CONDITION_LEVER_4_DEC: u32 = 67389;
pub const KEY_CONDITION_LEVER_4_HIGH_IDLE: u32 = 67390;
pub const KEY_CONDITION_LEVER_4_LOW_IDLE: u32 = 67391;
pub const KEY_CONDITION_LEVER_4_CUT_OFF: u32 = 67392;
pub const KEY_AXIS_CONDITION_LEVER_4_SET: u32 = 67393;
pub const KEY_TOGGLE_THROTTLE1_REVERSE_THRUST: u32 = 67394;
pub const KEY_TOGGLE_THROTTLE2_REVERSE_THRUST: u32 = 67395;
pub const KEY_TOGGLE_THROTTLE3_REVERSE_THRUST: u32 = 67396;
pub const KEY_TOGGLE_THROTTLE4_REVERSE_THRUST: u32 = 67397;
pub const KEY_SET_THROTTLE_REVERSE_THRUST_ON: u32 = 67398;
pub const KEY_SET_THROTTLE_REVERSE_THRUST_OFF: u32 = 67399;
pub const KEY_SET_THROTTLE1_REVERSE_THRUST_ON: u32 = 67400;
pub const KEY_SET_THROTTLE2_REVERSE_THRUST_ON: u32 = 67401;
pub const KEY_SET_THROTTLE3_REVERSE_THRUST_ON: u32 = 67402;
pub const KEY_SET_THROTTLE4_REVERSE_THRUST_ON: u32 = 67403;
pub const KEY_SET_THROTTLE1_REVERSE_THRUST_OFF: u32 = 67404;
pub const KEY_SET_THROTTLE2_REVERSE_THRUST_OFF: u32 = 67405;
pub const KEY_SET_THROTTLE3_REVERSE_THRUST_OFF: u32 = 67406;
pub const KEY_SET_THROTTLE4_REVERSE_THRUST_OFF: u32 = 67407;
pub const KEY_THROTTLE1_REVERSE_THRUST_HOLD: u32 = 67408;
pub const KEY_THROTTLE2_REVERSE_THRUST_HOLD: u32 = 67409;
pub const KEY_THROTTLE3_REVERSE_THRUST_HOLD: u32 = 67410;
pub const KEY_THROTTLE4_REVERSE_THRUST_HOLD: u32 = 67411;
pub const KEY_DECISION_HEIGHT_SET: u32 = 67412;
pub const KEY_DECISION_ALTITUDE_MSL_SET: u32 = 67413;
pub const KEY_MASTER_WARNING_SET: u32 = 67414;
pub const KEY_MASTER_WARNING_ON: u32 = 67415;
pub const KEY_MASTER_WARNING_OFF: u32 = 67416;
pub const KEY_MASTER_WARNING_TOGGLE: u32 = 67417;
pub const KEY_MASTER_WARNING_ACKNOWLEDGE: u32 = 67418;
pub const KEY_MASTER_CAUTION_SET: u32 = 67419;
pub const KEY_MASTER_CAUTION_ON: u32 = 67420;
pub const KEY_MASTER_CAUTION_OFF: u32 = 67421;
pub const KEY_MASTER_CAUTION_TOGGLE: u32 = 67422;
pub const KEY_MASTER_CAUTION_ACKNOWLEDGE: u32 = 67423;
pub const KEY_AP_ALT_RADIO_MODE_TOGGLE: u32 = 67424;
pub const KEY_AP_ALT_RADIO_MODE_SET: u32 = 67425;
pub const KEY_AP_ALT_RADIO_MODE_ON: u32 = 67426;
pub const KEY_AP_ALT_RADIO_MODE_OFF: u32 = 67427;
pub const KEY_MENU_RENO_KICK_PLAYER: u32 = 67428;
pub const KEY_ISOLATE_TURBINE_SET: u32 = 67429;
pub const KEY_ISOLATE_TURBINE_ON: u32 = 67430;
pub const KEY_ISOLATE_TURBINE_OFF: u32 = 67431;
pub const KEY_ISOLATE_TURBINE_TOGGLE: u32 = 67432;
pub const KEY_AP_MAX_BANK_ANGLE_SET: u32 = 67433;
pub const KEY_AP_MAX_BANK_VELOCITY_SET: u32 = 67434;
pub const KEY_NOSE_WHEEL_STEERING_LIMIT_SET: u32 = 67435;
pub const KEY_VOR3_SET: u32 = 67436;
pub const KEY_VOR4_SET: u32 = 67437;
pub const KEY_VOR3_OBI_DEC: u32 = 67438;
pub const KEY_VOR4_OBI_DEC: u32 = 67439;
pub const KEY_VOR3_OBI_INC: u32 = 67440;
pub const KEY_VOR4_OBI_INC: u32 = 67441;
pub const KEY_VOR3_OBI_FAST_DEC: u32 = 67442;
pub const KEY_VOR4_OBI_FAST_DEC: u32 = 67443;
pub const KEY_VOR3_OBI_FAST_INC: u32 = 67444;
pub const KEY_VOR4_OBI_FAST_INC: u32 = 67445;
pub const KEY_NAV3_VOLUME_INC: u32 = 67446;
pub const KEY_NAV4_VOLUME_INC: u32 = 67447;
pub const KEY_NAV3_VOLUME_DEC: u32 = 67448;
pub const KEY_NAV4_VOLUME_DEC: u32 = 67449;
pub const KEY_NAV3_VOLUME_SET: u32 = 67450;
pub const KEY_NAV4_VOLUME_SET: u32 = 67451;
pub const KEY_NAV3_VOLUME_SET_EX1: u32 = 67452;
pub const KEY_NAV4_VOLUME_SET_EX1: u32 = 67453;
pub const KEY_NAV3_RADIO_WHOLE_DEC: u32 = 67454;
pub const KEY_NAV4_RADIO_WHOLE_DEC: u32 = 67455;
pub const KEY_NAV3_RADIO_WHOLE_INC: u32 = 67456;
pub const KEY_NAV4_RADIO_WHOLE_INC: u32 = 67457;
pub const KEY_NAV3_RADIO_FRACT_DEC: u32 = 67458;
pub const KEY_NAV4_RADIO_FRACT_DEC: u32 = 67459;
pub const KEY_NAV3_RADIO_FRACT_INC: u32 = 67460;
pub const KEY_NAV4_RADIO_FRACT_INC: u32 = 67461;
pub const KEY_NAV3_RADIO_FRACT_DEC_CARRY: u32 = 67462;
pub const KEY_NAV4_RADIO_FRACT_DEC_CARRY: u32 = 67463;
pub const KEY_NAV3_RADIO_FRACT_INC_CARRY: u32 = 67464;
pub const KEY_NAV4_RADIO_FRACT_INC_CARRY: u32 = 67465;
pub const KEY_AXIS_STEERING_SET: u32 = 67466;
pub const KEY_AXIS_VERTICAL_SPEED_SET: u32 = 67467;
pub const KEY_VERTICAL_SPEED_INC: u32 = 67468;
pub const KEY_VERTICAL_SPEED_DEC: u32 = 67469;
pub const KEY_VERTICAL_SPEED_ZERO: u32 = 67470;
pub const KEY_PROP_FORCE_BETA_SET: u32 = 67471;
pub const KEY_PROP_FORCE_BETA_TOGGLE: u32 = 67472;
pub const KEY_PROP_FORCE_BETA_ON: u32 = 67473;
pub const KEY_PROP_FORCE_BETA_OFF: u32 = 67474;
pub const KEY_PROP_FORCE_BETA_VALUE_SET: u32 = 67475;
pub const THIRD_PARTY_EVENT_ID_MIN: u32 = 69632;
pub const THIRD_PARTY_EVENT_ID_MAX: u32 = 131071;
pub const IDENT_MAIN_PANEL: u32 = 0;
pub const IDENT_MAIN_PANEL_ALT1: u32 = 1;
pub const IDENT_MAIN_PANEL_ALT2: u32 = 2;
pub const IDENT_MAIN_PANEL_ALT3: u32 = 3;
pub const IDENT_MAIN_PANEL_ALT4: u32 = 4;
pub const IDENT_MAIN_PANEL_ALT5: u32 = 5;
pub const IDENT_MAIN_PANEL_ALT6: u32 = 6;
pub const IDENT_MAIN_PANEL_ALT7: u32 = 7;
pub const IDENT_MAIN_PANEL_ALT8: u32 = 8;
pub const IDENT_MAIN_PANEL_ALT9: u32 = 9;
pub const IDENT_THROTTLE_PANEL: u32 = 10;
pub const IDENT_RADIO_STACK_PANEL: u32 = 50;
pub const IDENT_COMPASS_PANEL: u32 = 75;
pub const IDENT_MINI_CONTROLS_PANEL: u32 = 100;
pub const IDENT_ANNUNCIATOR_PANEL: u32 = 125;
pub const IDENT_ANNUNCIATOR2_PANEL: u32 = 150;
pub const IDENT_IFR_MAIN_PANEL: u32 = 175;
pub const IDENT_COLLECTIVE_PANEL: u32 = 200;
pub const IDENT_GPS_PANEL: u32 = 225;
pub const IDENT_OVERHEAD_PANEL: u32 = 250;
pub const IDENT_PARKING_BRAKE_PANEL: u32 = 251;
pub const IDENT_FLAPS_TRIM_PANEL: u32 = 252;
pub const IDENT_FUEL_PANEL: u32 = 253;
pub const IDENT_ELECTRICAL_PANEL: u32 = 254;
pub const IDENT_TRIM_PANEL: u32 = 255;
pub const IDENT_LANDING_GEAR_PANEL: u32 = 256;
pub const IDENT_MISC_POPUP_1: u32 = 260;
pub const IDENT_MISC_POPUP_2: u32 = 261;
pub const IDENT_MISC_POPUP_3: u32 = 262;
pub const IDENT_MISC_POPUP_4: u32 = 263;
pub const IDENT_MISC_POPUP_5: u32 = 264;
pub const IDENT_MISC_POPUP_6: u32 = 265;
pub const IDENT_MISC_POPUP_7: u32 = 266;
pub const IDENT_MISC_POPUP_8: u32 = 267;
pub const IDENT_MISC_POPUP_9: u32 = 268;
pub const IDENT_MISC_POPUP_10: u32 = 269;
pub const IDENT_USER: u32 = 10000;
pub const IDENT_USER_MAX: u32 = 19999;
pub const MIN_HUD_IDENT: u32 = 20000;
pub const IDENT_AIRCRAFT_HUD_3D_PANEL: u32 = 20000;
pub const IDENT_HELICOPTER_HUD_3D_PANEL: u32 = 20001;
pub const IDENT_CONTROLS_HUD_3D_PANEL: u32 = 20002;
pub const IDENT_TEXT_HUD_3D_PANEL: u32 = 20003;
pub const IDENT_DAMAGE_HUD_3D_PANEL: u32 = 20004;
pub const IDENT_SCORE_HUD_3D_PANEL: u32 = 20005;
pub const MAX_HUD_IDENT: u32 = 20006;
pub const IDENT_LSO_WINDOW: u32 = 22000;
pub const IDENT_POI_WINDOW: u32 = 22001;
pub const IDENT_TIMER_WINDOW: u32 = 22002;
pub const IDENT_DROPPABLE_OBJ_WINDOW: u32 = 22003;
pub const IDENT_INVALID: u32 = 4294967295;
pub const HUD_ON: u32 = 1;
pub const HUD_METRIC: u32 = 2;
pub const PS_MAIN_PANEL_VISIBLE: u32 = 2;
pub const PS_MAIN_PANEL_COMPOSED: u32 = 4;
pub const PS_PADLOCK_SERVER: u32 = 8;
pub const PS_PADLOCK_CLIENT: u32 = 16;
pub const PS_HELICOPTER_HUD_VISIBLE: u32 = 32;
pub const PS_AIRCRAFT_HUD_VISIBLE: u32 = 64;
pub const PS_AIRCRAFT_HUD_ON: u32 = 128;
pub const PS_RADIO_STACK_VISIBLE: u32 = 256;
pub const PS_HUD_METRIC_OUTPUT: u32 = 512;
pub const PS_MAIN_PANEL_ON: u32 = 1024;
pub const PS_CONTROLS_HUD_VISIBLE: u32 = 2048;
pub const PS_RADIO_STACK_AUTOPOPED: u32 = 4096;
pub const PS_MAIN_PANEL_UNDOCKED: u32 = 8192;
pub const PS_AIRCRAFT_HUD_EXIST: u32 = 16384;
pub const PS_HELICOPTER_HUD_EXIST: u32 = 32768;
pub const PS_HUD_EXIST: u32 = 49152;
pub const PS_PANELS_LOAD_VISIBLE: u32 = 65536;
pub const PS_HUD_LOAD_VISIBLE: u32 = 131072;
pub const PS_PANEL_VISIBLE: u32 = 262144;
pub const PS_HUD_PANEL_VISIBLE: u32 = 524288;
pub const PS_READONLY: i32 = -537;
pub const PS_SET: u32 = 4294967295;
pub const PS_CLEAR: u32 = 0;
pub const GAUGE_FLAG_NORMAL: u32 = 0;
pub const GAUGE_FLAG_HIDDEN: u32 = 1;
pub const GAUGE_FLAG_BLINKING: u32 = 2;
pub const GAUGE_FLAG_GRAYED: u32 = 4;
pub const GAUGE_FLAG_HILIGHTED: u32 = 8;
pub const UNITS_UNKNOWN: i32 = -1;
pub const UNITS_STRING: i32 = -2;
pub const ISERIALIZABLE_GAUGECCALLBACK_NAME: &[u8; 28usize] = b"ISerializableGaugeCCallback\0";
pub const IFSX_PANELCCALLBACK_NAME: &[u8; 19usize] = b"IFSXPanelCCallback\0";
pub const SELECT_NONE: u32 = 0;
pub const SELECT_1: u32 = 1;
pub const SELECT_ZOOM: u32 = 2;
pub const SELECT_MAGNETO: u32 = 3;
pub const SELECT_COM_WHOLE: u32 = 4;
pub const SELECT_COM_FRACTION: u32 = 5;
pub const SELECT_NAV1_WHOLE: u32 = 6;
pub const SELECT_NAV1_FRACTION: u32 = 7;
pub const SELECT_NAV2_WHOLE: u32 = 8;
pub const SELECT_NAV2_FRACTION: u32 = 9;
pub const SELECT_XPNDR_1000: u32 = 10;
pub const SELECT_XPNDR_0100: u32 = 11;
pub const SELECT_XPNDR_0010: u32 = 12;
pub const SELECT_XPNDR_0001: u32 = 13;
pub const SELECT_VOR1: u32 = 14;
pub const SELECT_VOR2: u32 = 15;
pub const SELECT_ENGINE: u32 = 16;
pub const SELECT_DME1: u32 = 17;
pub const SELECT_DME2: u32 = 18;
pub const SELECT_ADF_100: u32 = 19;
pub const SELECT_ADF_010: u32 = 20;
pub const SELECT_ADF_001: u32 = 21;
pub const SELECT_EGT_BUG: u32 = 22;
pub const SELECT_SIM_RATE: u32 = 23;
pub const SELECT_CLOCK_HOURS: u32 = 24;
pub const SELECT_CLOCK_MINUTES: u32 = 25;
pub const SELECT_CLOCK_SECONDS: u32 = 26;
pub const SELECT_COM2_WHOLE: u32 = 27;
pub const SELECT_COM2_FRACTION: u32 = 28;
pub const SELECT_ADF_TENTHS: u32 = 29;
pub const IMAGE_USE_TRANSPARENCY: u32 = 1;
pub const IMAGE_USE_ERASE: u32 = 2;
pub const IMAGE_USE_BRIGHT: u32 = 4;
pub const IMAGE_ERASE_ON_FAILURE: u32 = 8;
pub const IMAGE_NO_STATIC_BLENDING: u32 = 16;
pub const IMAGE_CREATE_DIBSECTION: u32 = 32;
pub const IMAGE_BILINEAR_GRAY: u32 = 64;
pub const IMAGE_BILINEAR_COLOR: u32 = 128;
pub const IMAGE_PRESERVE_COLOR_IN_HUD: u32 = 256;
pub const IMAGE_CONTAINS_NO_MASK: u32 = 512;
pub const IMAGE_SPRITE_FORCE_TRANS: u32 = 1024;
pub const IMAGE_BLT_MASK_ONLY: u32 = 2048;
pub const IMAGE_CONTAINS_MASK: u32 = 4096;
pub const IMAGE_USE_ALPHA: u32 = 8192;
pub const IMAGE_USE_LUMINOUS: u32 = 16384;
pub const IMAGE_USE_LUMINOUS_PARTIAL: u32 = 32768;
pub const IMAGE_ERASE_ALWAYS: u32 = 65536;
pub const IMAGE_HIDDEN_TREE: u32 = 33554432;
pub const IMAGE_NO_STRETCH: u32 = 134217728;
pub const IMAGE_HUD_COLOR_MAP: u32 = 268435456;
pub const IMAGE_NO_TRANSLATION: u32 = 536870912;
pub const IMAGE_HIDDEN: u32 = 1073741824;
pub const IMAGE_ON_SCREEN: u32 = 2147483648;
pub const ASI_ALT_MANUALLY_TUNABLE: u32 = 1;
pub const ASI_HEADING_MANUALLY_TUNABLE: u32 = 2;
pub const PANEL_SERVICE_PRE_QUERY: u32 = 0;
pub const PANEL_SERVICE_POST_QUERY: u32 = 1;
pub const PANEL_SERVICE_PRE_INSTALL: u32 = 2;
pub const PANEL_SERVICE_POST_INSTALL: u32 = 3;
pub const PANEL_SERVICE_PRE_INITIALIZE: u32 = 4;
pub const PANEL_SERVICE_POST_INITIALIZE: u32 = 5;
pub const PANEL_SERVICE_PRE_UPDATE: u32 = 6;
pub const PANEL_SERVICE_POST_UPDATE: u32 = 7;
pub const PANEL_SERVICE_PRE_GENERATE: u32 = 8;
pub const PANEL_SERVICE_POST_GENERATE: u32 = 9;
pub const PANEL_SERVICE_PRE_DRAW: u32 = 10;
pub const PANEL_SERVICE_POST_DRAW: u32 = 11;
pub const PANEL_SERVICE_PRE_KILL: u32 = 12;
pub const PANEL_SERVICE_POST_KILL: u32 = 13;
pub const PANEL_SERVICE_CONNECT_TO_WINDOW: u32 = 14;
pub const PANEL_SERVICE_DISCONNECT: u32 = 15;
pub const PANEL_SERVICE_PANEL_OPEN: u32 = 16;
pub const PANEL_SERVICE_PANEL_CLOSE: u32 = 17;
pub const GAUGE_HEADER_VERSION_FS610: u32 = 610;
pub const GAUGE_HEADER_VERSION_FSNEW: u32 = 625;
pub const GAUGE_HEADER_VERSION_CFS1: u32 = 650;
pub const GAUGE_HEADER_VERSION_FS700: u32 = 700;
pub const GAUGE_HEADER_VERSION_CFS2: u32 = 750;
pub const GAUGE_HEADER_VERSION_FS800: u32 = 800;
pub const GAUGE_HEADER_VERSION_FS900: u32 = 900;
pub const GAUGE_HEADER_VERSION_FS1000: u32 = 1000;
pub const ICON_SWITCH_TYPE_SET_CUR_ICON: u32 = 0;
pub const ICON_SWITCH_TYPE_SET_CUR_USING_RANGE: u32 = 1;
pub const ICON_SWITCH_TYPE_STEP_TO: u32 = 3;
pub const ICON_SWITCH_TYPE_STEP_TO_USING_RANGE: u32 = 4;
pub const HELP_NONE: u32 = 0;
pub const MOUSE_RIGHTSINGLE: u32 = 2147483648;
pub const MOUSE_MIDDLESINGLE: u32 = 1073741824;
pub const MOUSE_LEFTSINGLE: u32 = 536870912;
pub const MOUSE_RIGHTDOUBLE: u32 = 268435456;
pub const MOUSE_MIDDLEDOUBLE: u32 = 134217728;
pub const MOUSE_LEFTDOUBLE: u32 = 67108864;
pub const MOUSE_RIGHTDRAG: u32 = 33554432;
pub const MOUSE_MIDDLEDRAG: u32 = 16777216;
pub const MOUSE_LEFTDRAG: u32 = 8388608;
pub const MOUSE_MOVE: u32 = 4194304;
pub const MOUSE_DOWN_REPEAT: u32 = 2097152;
pub const MOUSE_RIGHTRELEASE: u32 = 524288;
pub const MOUSE_MIDDLERELEASE: u32 = 262144;
pub const MOUSE_LEFTRELEASE: u32 = 131072;
pub const MOUSE_WHEEL_FLIP: u32 = 65536;
pub const MOUSE_WHEEL_SKIP: u32 = 32768;
pub const MOUSE_WHEEL_UP: u32 = 16384;
pub const MOUSE_WHEEL_DOWN: u32 = 8192;
pub const MOUSE_MOVE_REPEAT: u32 = 4096;
pub const MOUSE_LEAVE: u32 = 2048;
pub const MOUSE_GETALL: u32 = 1024;
pub const MOUSE_LEFTALL: u32 = 545390592;
pub const MOUSE_RIGHTALL: u32 = 2181562368;
pub const MOUSE_MIDDLEALL: u32 = 1090781184;
pub const MOUSE_WHEEL: u32 = 24576;
pub const MOUSE_NONE: u32 = 0;
pub const MOUSE_MAXIMUM_TOOLTIP_TEXT: u32 = 80;
pub const FS9LINK_VERSION: u32 = 2304;
pub const NVG_PI: f64 = 3.141592653589793;
pub const DWORD_MAX: u32 = 4294967295;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const FLT_EVAL_METHOD: u32 = 2;
pub const DBL_DECIMAL_DIG: u32 = 17;
pub const DBL_DIG: u32 = 15;
pub const DBL_HAS_SUBNORM: u32 = 1;
pub const DBL_MANT_DIG: u32 = 53;
pub const DBL_MAX_10_EXP: u32 = 308;
pub const DBL_MAX_EXP: u32 = 1024;
pub const DBL_MIN_10_EXP: i32 = -307;
pub const DBL_MIN_EXP: i32 = -1021;
pub const _DBL_RADIX: u32 = 2;
pub const FLT_DECIMAL_DIG: u32 = 9;
pub const FLT_DIG: u32 = 6;
pub const FLT_HAS_SUBNORM: u32 = 1;
pub const FLT_GUARD: u32 = 0;
pub const FLT_MANT_DIG: u32 = 24;
pub const FLT_MAX_10_EXP: u32 = 38;
pub const FLT_MAX_EXP: u32 = 128;
pub const FLT_MIN_10_EXP: i32 = -37;
pub const FLT_MIN_EXP: i32 = -125;
pub const FLT_NORMALIZE: u32 = 0;
pub const FLT_RADIX: u32 = 2;
pub const LDBL_DIG: u32 = 15;
pub const LDBL_HAS_SUBNORM: u32 = 1;
pub const LDBL_MANT_DIG: u32 = 53;
pub const LDBL_MAX_10_EXP: u32 = 308;
pub const LDBL_MAX_EXP: u32 = 1024;
pub const LDBL_MIN_10_EXP: i32 = -307;
pub const LDBL_MIN_EXP: i32 = -1021;
pub const _LDBL_RADIX: u32 = 2;
pub const DECIMAL_DIG: u32 = 17;
pub const _SW_INEXACT: u32 = 1;
pub const _SW_UNDERFLOW: u32 = 2;
pub const _SW_OVERFLOW: u32 = 4;
pub const _SW_ZERODIVIDE: u32 = 8;
pub const _SW_INVALID: u32 = 16;
pub const _SW_DENORMAL: u32 = 524288;
pub const _EM_AMBIGUIOUS: u32 = 2147483648;
pub const _EM_AMBIGUOUS: u32 = 2147483648;
pub const _MCW_EM: u32 = 524319;
pub const _EM_INEXACT: u32 = 1;
pub const _EM_UNDERFLOW: u32 = 2;
pub const _EM_OVERFLOW: u32 = 4;
pub const _EM_ZERODIVIDE: u32 = 8;
pub const _EM_INVALID: u32 = 16;
pub const _EM_DENORMAL: u32 = 524288;
pub const _MCW_RC: u32 = 768;
pub const _RC_NEAR: u32 = 0;
pub const _RC_DOWN: u32 = 256;
pub const _RC_UP: u32 = 512;
pub const _RC_CHOP: u32 = 768;
pub const _MCW_PC: u32 = 196608;
pub const _PC_64: u32 = 0;
pub const _PC_53: u32 = 65536;
pub const _PC_24: u32 = 131072;
pub const _MCW_IC: u32 = 262144;
pub const _IC_AFFINE: u32 = 262144;
pub const _IC_PROJECTIVE: u32 = 0;
pub const _MCW_DN: u32 = 50331648;
pub const _DN_SAVE: u32 = 0;
pub const _DN_FLUSH: u32 = 16777216;
pub const _DN_FLUSH_OPERANDS_SAVE_RESULTS: u32 = 33554432;
pub const _DN_SAVE_OPERANDS_FLUSH_RESULTS: u32 = 50331648;
pub const _SW_UNEMULATED: u32 = 64;
pub const _SW_SQRTNEG: u32 = 128;
pub const _SW_STACKOVERFLOW: u32 = 512;
pub const _SW_STACKUNDERFLOW: u32 = 1024;
pub const _FPE_INVALID: u32 = 129;
pub const _FPE_DENORMAL: u32 = 130;
pub const _FPE_ZERODIVIDE: u32 = 131;
pub const _FPE_OVERFLOW: u32 = 132;
pub const _FPE_UNDERFLOW: u32 = 133;
pub const _FPE_INEXACT: u32 = 134;
pub const _FPE_UNEMULATED: u32 = 135;
pub const _FPE_SQRTNEG: u32 = 136;
pub const _FPE_STACKOVERFLOW: u32 = 138;
pub const _FPE_STACKUNDERFLOW: u32 = 139;
pub const _FPE_EXPLICITGEN: u32 = 140;
pub const _FPE_MULTIPLE_TRAPS: u32 = 141;
pub const _FPE_MULTIPLE_FAULTS: u32 = 142;
pub const _FPCLASS_SNAN: u32 = 1;
pub const _FPCLASS_QNAN: u32 = 2;
pub const _FPCLASS_NINF: u32 = 4;
pub const _FPCLASS_NN: u32 = 8;
pub const _FPCLASS_ND: u32 = 16;
pub const _FPCLASS_NZ: u32 = 32;
pub const _FPCLASS_PZ: u32 = 64;
pub const _FPCLASS_PD: u32 = 128;
pub const _FPCLASS_PN: u32 = 256;
pub const _FPCLASS_PINF: u32 = 512;
pub const _CW_DEFAULT: u32 = 589855;
pub const DBL_RADIX: u32 = 2;
pub const LDBL_RADIX: u32 = 2;
pub const EM_AMBIGUIOUS: u32 = 2147483648;
pub const EM_AMBIGUOUS: u32 = 2147483648;
pub const MCW_EM: u32 = 524319;
pub const EM_INVALID: u32 = 16;
pub const EM_DENORMAL: u32 = 524288;
pub const EM_ZERODIVIDE: u32 = 8;
pub const EM_OVERFLOW: u32 = 4;
pub const EM_UNDERFLOW: u32 = 2;
pub const EM_INEXACT: u32 = 1;
pub const MCW_IC: u32 = 262144;
pub const IC_AFFINE: u32 = 262144;
pub const IC_PROJECTIVE: u32 = 0;
pub const MCW_RC: u32 = 768;
pub const RC_CHOP: u32 = 768;
pub const RC_UP: u32 = 512;
pub const RC_DOWN: u32 = 256;
pub const RC_NEAR: u32 = 0;
pub const MCW_PC: u32 = 196608;
pub const PC_24: u32 = 131072;
pub const PC_53: u32 = 65536;
pub const PC_64: u32 = 0;
pub const CW_DEFAULT: u32 = 589855;
pub const SW_INVALID: u32 = 16;
pub const SW_DENORMAL: u32 = 524288;
pub const SW_ZERODIVIDE: u32 = 8;
pub const SW_OVERFLOW: u32 = 4;
pub const SW_UNDERFLOW: u32 = 2;
pub const SW_INEXACT: u32 = 1;
pub const SW_UNEMULATED: u32 = 64;
pub const SW_SQRTNEG: u32 = 128;
pub const SW_STACKOVERFLOW: u32 = 512;
pub const SW_STACKUNDERFLOW: u32 = 1024;
pub const FPE_INVALID: u32 = 129;
pub const FPE_DENORMAL: u32 = 130;
pub const FPE_ZERODIVIDE: u32 = 131;
pub const FPE_OVERFLOW: u32 = 132;
pub const FPE_UNDERFLOW: u32 = 133;
pub const FPE_INEXACT: u32 = 134;
pub const FPE_UNEMULATED: u32 = 135;
pub const FPE_SQRTNEG: u32 = 136;
pub const FPE_STACKOVERFLOW: u32 = 138;
pub const FPE_STACKUNDERFLOW: u32 = 139;
pub const FPE_EXPLICITGEN: u32 = 140;
pub type va_list = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_va_list_is_reference {
    pub _address: u8,
}
pub const __vcrt_va_list_is_reference___the_value: bool = false;
pub type __vcrt_va_list_is_reference__bindgen_ty_1 = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_assert_va_start_is_not_reference {
    pub _address: u8,
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure();
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type WCHAR = u16;
pub type TCHAR = WCHAR;
pub type PTCHAR = *mut WCHAR;
pub type TBYTE = WCHAR;
pub type PTBYTE = *mut WCHAR;
pub type __uint64 = ::std::os::raw::c_ulonglong;
pub type BOOL = ::std::os::raw::c_int;
pub type CHAR = ::std::os::raw::c_char;
pub type INT8 = ::std::os::raw::c_schar;
pub type UCHAR = ::std::os::raw::c_uchar;
pub type UINT8 = ::std::os::raw::c_uchar;
pub type BYTE = ::std::os::raw::c_uchar;
pub type SHORT = ::std::os::raw::c_short;
pub type INT16 = ::std::os::raw::c_short;
pub type USHORT = ::std::os::raw::c_ushort;
pub type UINT16 = ::std::os::raw::c_ushort;
pub type WORD = ::std::os::raw::c_ushort;
pub type INT = ::std::os::raw::c_int;
pub type INT32 = ::std::os::raw::c_int;
pub type UINT = ::std::os::raw::c_uint;
pub type UINT32 = ::std::os::raw::c_uint;
pub type LONG = ::std::os::raw::c_long;
pub type ULONG = ::std::os::raw::c_ulong;
pub type DWORD = ::std::os::raw::c_ulong;
pub type FLOAT = f32;
pub type PFLOAT = *mut FLOAT;
pub type PBOOL = *mut BOOL;
pub type LPBOOL = *mut BOOL;
pub type PBYTE = *mut BYTE;
pub type LPBYTE = *mut BYTE;
pub type PINT = *mut ::std::os::raw::c_int;
pub type LPINT = *mut ::std::os::raw::c_int;
pub type PWORD = *mut WORD;
pub type LPWORD = *mut WORD;
pub type LPLONG = *mut ::std::os::raw::c_long;
pub type PDWORD = *mut DWORD;
pub type LPDWORD = *mut DWORD;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type LPCVOID = *const ::std::os::raw::c_void;
pub type LONGLONG = ::std::os::raw::c_longlong;
pub type LONG64 = ::std::os::raw::c_longlong;
pub type INT64 = ::std::os::raw::c_longlong;
pub type ULONGLONG = __uint64;
pub type DWORDLONG = __uint64;
pub type ULONG64 = __uint64;
pub type DWORD64 = __uint64;
pub type UINT64 = __uint64;
pub type INT_PTR = ::std::os::raw::c_int;
pub type UINT_PTR = ::std::os::raw::c_uint;
pub type LONG_PTR = ::std::os::raw::c_long;
pub type ULONG_PTR = ::std::os::raw::c_ulong;
pub type DWORD_PTR = ULONG_PTR;
pub type PDWORD_PTR = *mut ULONG_PTR;
pub type SIZE_T = ULONG_PTR;
pub type PSIZE_T = *mut ULONG_PTR;
pub type SSIZE_T = LONG_PTR;
pub type PSSIZE_T = *mut LONG_PTR;
pub type WPARAM = UINT_PTR;
pub type LPARAM = LONG_PTR;
pub type LRESULT = LONG_PTR;
pub type LPCSTR = *const CHAR;
pub type LPSTR = *mut CHAR;
pub type PSTR = *mut CHAR;
pub type LPCWSTR = *const WCHAR;
pub type LPWSTR = *mut WCHAR;
pub type PTSTR = LPWSTR;
pub type LPTSTR = LPWSTR;
pub type PCTSTR = LPCWSTR;
pub type LPCTSTR = LPCWSTR;
pub type byte = ::std::os::raw::c_uchar;
pub type cs_byte = byte;
pub type boolean = ::std::os::raw::c_uchar;
pub type HRESULT = ::std::os::raw::c_long;
pub type HANDLE = ::std::os::raw::c_ulonglong;
pub type PHANDLE = *mut HANDLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HDC__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HDC__() {
    assert_eq!(
        ::std::mem::size_of::<HDC__>(),
        4usize,
        concat!("Size of: ", stringify!(HDC__))
    );
    assert_eq!(
        ::std::mem::align_of::<HDC__>(),
        4usize,
        concat!("Alignment of ", stringify!(HDC__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HDC__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HDC__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HDC = *mut HDC__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HBITMAP__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HBITMAP__() {
    assert_eq!(
        ::std::mem::size_of::<HBITMAP__>(),
        4usize,
        concat!("Size of: ", stringify!(HBITMAP__))
    );
    assert_eq!(
        ::std::mem::align_of::<HBITMAP__>(),
        4usize,
        concat!("Alignment of ", stringify!(HBITMAP__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HBITMAP__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HBITMAP__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HBITMAP = *mut HBITMAP__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HBRUSH__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HBRUSH__() {
    assert_eq!(
        ::std::mem::size_of::<HBRUSH__>(),
        4usize,
        concat!("Size of: ", stringify!(HBRUSH__))
    );
    assert_eq!(
        ::std::mem::align_of::<HBRUSH__>(),
        4usize,
        concat!("Alignment of ", stringify!(HBRUSH__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HBRUSH__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HBRUSH__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HBRUSH = *mut HBRUSH__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HPEN__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HPEN__() {
    assert_eq!(
        ::std::mem::size_of::<HPEN__>(),
        4usize,
        concat!("Size of: ", stringify!(HPEN__))
    );
    assert_eq!(
        ::std::mem::align_of::<HPEN__>(),
        4usize,
        concat!("Alignment of ", stringify!(HPEN__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HPEN__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HPEN__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HPEN = *mut HPEN__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HFONT__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HFONT__() {
    assert_eq!(
        ::std::mem::size_of::<HFONT__>(),
        4usize,
        concat!("Size of: ", stringify!(HFONT__))
    );
    assert_eq!(
        ::std::mem::align_of::<HFONT__>(),
        4usize,
        concat!("Alignment of ", stringify!(HFONT__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HFONT__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HFONT__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HFONT = *mut HFONT__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HINSTANCE__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HINSTANCE__() {
    assert_eq!(
        ::std::mem::size_of::<HINSTANCE__>(),
        4usize,
        concat!("Size of: ", stringify!(HINSTANCE__))
    );
    assert_eq!(
        ::std::mem::align_of::<HINSTANCE__>(),
        4usize,
        concat!("Alignment of ", stringify!(HINSTANCE__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HINSTANCE__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HINSTANCE__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HINSTANCE = *mut HINSTANCE__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWND__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HWND__() {
    assert_eq!(
        ::std::mem::size_of::<HWND__>(),
        4usize,
        concat!("Size of: ", stringify!(HWND__))
    );
    assert_eq!(
        ::std::mem::align_of::<HWND__>(),
        4usize,
        concat!("Alignment of ", stringify!(HWND__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HWND__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HWND__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HWND = *mut HWND__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HHOOK__ {
    pub unused: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_HHOOK__() {
    assert_eq!(
        ::std::mem::size_of::<HHOOK__>(),
        4usize,
        concat!("Size of: ", stringify!(HHOOK__))
    );
    assert_eq!(
        ::std::mem::align_of::<HHOOK__>(),
        4usize,
        concat!("Alignment of ", stringify!(HHOOK__))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HHOOK__>())).unused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HHOOK__),
            "::",
            stringify!(unused)
        )
    );
}
pub type HHOOK = *mut HHOOK__;
pub type HMODULE = HINSTANCE;
pub type COLORREF = DWORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUID {
    pub Data1: ::std::os::raw::c_ulong,
    pub Data2: ::std::os::raw::c_ushort,
    pub Data3: ::std::os::raw::c_ushort,
    pub Data4: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout__GUID() {
    assert_eq!(
        ::std::mem::size_of::<_GUID>(),
        16usize,
        concat!("Size of: ", stringify!(_GUID))
    );
    assert_eq!(
        ::std::mem::align_of::<_GUID>(),
        4usize,
        concat!("Alignment of ", stringify!(_GUID))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data3 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GUID>())).Data4 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data4)
        )
    );
}
pub type GUID = _GUID;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _LARGE_INTEGER {
    pub DUMMYSTRUCTNAME: _LARGE_INTEGER__bindgen_ty_1,
    pub u: _LARGE_INTEGER__bindgen_ty_2,
    pub QuadPart: LONGLONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LARGE_INTEGER__bindgen_ty_1 {
    pub LowPart: DWORD,
    pub HighPart: LONG,
}
#[test]
fn bindgen_test_layout__LARGE_INTEGER__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_LARGE_INTEGER__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_LARGE_INTEGER__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_LARGE_INTEGER__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_LARGE_INTEGER__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_LARGE_INTEGER__bindgen_ty_1>())).LowPart as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER__bindgen_ty_1),
            "::",
            stringify!(LowPart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_LARGE_INTEGER__bindgen_ty_1>())).HighPart as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER__bindgen_ty_1),
            "::",
            stringify!(HighPart)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LARGE_INTEGER__bindgen_ty_2 {
    pub LowPart: DWORD,
    pub HighPart: LONG,
}
#[test]
fn bindgen_test_layout__LARGE_INTEGER__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_LARGE_INTEGER__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_LARGE_INTEGER__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_LARGE_INTEGER__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(_LARGE_INTEGER__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_LARGE_INTEGER__bindgen_ty_2>())).LowPart as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER__bindgen_ty_2),
            "::",
            stringify!(LowPart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_LARGE_INTEGER__bindgen_ty_2>())).HighPart as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER__bindgen_ty_2),
            "::",
            stringify!(HighPart)
        )
    );
}
#[test]
fn bindgen_test_layout__LARGE_INTEGER() {
    assert_eq!(
        ::std::mem::size_of::<_LARGE_INTEGER>(),
        8usize,
        concat!("Size of: ", stringify!(_LARGE_INTEGER))
    );
    assert_eq!(
        ::std::mem::align_of::<_LARGE_INTEGER>(),
        8usize,
        concat!("Alignment of ", stringify!(_LARGE_INTEGER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LARGE_INTEGER>())).DUMMYSTRUCTNAME as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER),
            "::",
            stringify!(DUMMYSTRUCTNAME)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LARGE_INTEGER>())).u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LARGE_INTEGER>())).QuadPart as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LARGE_INTEGER),
            "::",
            stringify!(QuadPart)
        )
    );
}
impl ::std::fmt::Debug for _LARGE_INTEGER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "_LARGE_INTEGER {{ union }}")
    }
}
pub type LARGE_INTEGER = _LARGE_INTEGER;
pub type PVOID = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FLOATING_SAVE_AREA {
    pub ControlWord: DWORD,
    pub StatusWord: DWORD,
    pub TagWord: DWORD,
    pub ErrorOffset: DWORD,
    pub ErrorSelector: DWORD,
    pub DataOffset: DWORD,
    pub DataSelector: DWORD,
    pub RegisterArea: [BYTE; 80usize],
    pub Spare0: DWORD,
}
#[test]
fn bindgen_test_layout__FLOATING_SAVE_AREA() {
    assert_eq!(
        ::std::mem::size_of::<_FLOATING_SAVE_AREA>(),
        112usize,
        concat!("Size of: ", stringify!(_FLOATING_SAVE_AREA))
    );
    assert_eq!(
        ::std::mem::align_of::<_FLOATING_SAVE_AREA>(),
        4usize,
        concat!("Alignment of ", stringify!(_FLOATING_SAVE_AREA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FLOATING_SAVE_AREA>())).ControlWord as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(ControlWord)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FLOATING_SAVE_AREA>())).StatusWord as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(StatusWord)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FLOATING_SAVE_AREA>())).TagWord as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(TagWord)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FLOATING_SAVE_AREA>())).ErrorOffset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(ErrorOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_FLOATING_SAVE_AREA>())).ErrorSelector as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(ErrorSelector)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FLOATING_SAVE_AREA>())).DataOffset as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(DataOffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_FLOATING_SAVE_AREA>())).DataSelector as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(DataSelector)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_FLOATING_SAVE_AREA>())).RegisterArea as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(RegisterArea)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FLOATING_SAVE_AREA>())).Spare0 as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOATING_SAVE_AREA),
            "::",
            stringify!(Spare0)
        )
    );
}
pub type FLOATING_SAVE_AREA = _FLOATING_SAVE_AREA;
pub type PFLOATING_SAVE_AREA = *mut FLOATING_SAVE_AREA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CONTEXT {
    pub ContextFlags: DWORD,
    pub Dr0: DWORD,
    pub Dr1: DWORD,
    pub Dr2: DWORD,
    pub Dr3: DWORD,
    pub Dr6: DWORD,
    pub Dr7: DWORD,
    pub FloatSave: FLOATING_SAVE_AREA,
    pub SegGs: DWORD,
    pub SegFs: DWORD,
    pub SegEs: DWORD,
    pub SegDs: DWORD,
    pub Edi: DWORD,
    pub Esi: DWORD,
    pub Ebx: DWORD,
    pub Edx: DWORD,
    pub Ecx: DWORD,
    pub Eax: DWORD,
    pub Ebp: DWORD,
    pub Eip: DWORD,
    pub SegCs: DWORD,
    pub EFlags: DWORD,
    pub Esp: DWORD,
    pub SegSs: DWORD,
    pub ExtendedRegisters: [BYTE; 512usize],
}
#[test]
fn bindgen_test_layout__CONTEXT() {
    assert_eq!(
        ::std::mem::size_of::<_CONTEXT>(),
        716usize,
        concat!("Size of: ", stringify!(_CONTEXT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CONTEXT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CONTEXT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).ContextFlags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(ContextFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).Dr0 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Dr0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).Dr1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Dr1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).Dr2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Dr2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).Dr3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Dr3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).Dr6 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Dr6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).Dr7 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Dr7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).FloatSave as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(FloatSave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).SegGs as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(SegGs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).SegFs as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(SegFs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).SegEs as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(SegEs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).SegDs as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(SegDs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).Edi as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Edi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).Esi as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Esi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).Ebx as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Ebx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).Edx as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Edx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).Ecx as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Ecx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).Eax as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Eax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).Ebp as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Ebp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).Eip as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Eip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).SegCs as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(SegCs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).EFlags as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(EFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).Esp as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(Esp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).SegSs as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(SegSs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CONTEXT>())).ExtendedRegisters as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(_CONTEXT),
            "::",
            stringify!(ExtendedRegisters)
        )
    );
}
pub type CONTEXT = _CONTEXT;
pub type PCONTEXT = *mut CONTEXT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EXCEPTION_RECORD {
    pub ExceptionCode: DWORD,
    pub ExceptionFlags: DWORD,
    pub ExceptionRecord: *mut _EXCEPTION_RECORD,
    pub ExceptionAddress: PVOID,
    pub NumberParameters: DWORD,
    pub ExceptionInformation: [ULONG_PTR; 15usize],
}
#[test]
fn bindgen_test_layout__EXCEPTION_RECORD() {
    assert_eq!(
        ::std::mem::size_of::<_EXCEPTION_RECORD>(),
        88usize,
        concat!("Size of: ", stringify!(_EXCEPTION_RECORD))
    );
    assert_eq!(
        ::std::mem::align_of::<_EXCEPTION_RECORD>(),
        8usize,
        concat!("Alignment of ", stringify!(_EXCEPTION_RECORD))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_EXCEPTION_RECORD>())).ExceptionCode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_EXCEPTION_RECORD),
            "::",
            stringify!(ExceptionCode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_EXCEPTION_RECORD>())).ExceptionFlags as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_EXCEPTION_RECORD),
            "::",
            stringify!(ExceptionFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_EXCEPTION_RECORD>())).ExceptionRecord as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_EXCEPTION_RECORD),
            "::",
            stringify!(ExceptionRecord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_EXCEPTION_RECORD>())).ExceptionAddress as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_EXCEPTION_RECORD),
            "::",
            stringify!(ExceptionAddress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_EXCEPTION_RECORD>())).NumberParameters as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_EXCEPTION_RECORD),
            "::",
            stringify!(NumberParameters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_EXCEPTION_RECORD>())).ExceptionInformation as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_EXCEPTION_RECORD),
            "::",
            stringify!(ExceptionInformation)
        )
    );
}
pub type EXCEPTION_RECORD = _EXCEPTION_RECORD;
pub type PEXCEPTION_RECORD = *mut EXCEPTION_RECORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EXCEPTION_POINTERS {
    pub ExceptionRecord: PEXCEPTION_RECORD,
    pub ContextRecord: PCONTEXT,
}
#[test]
fn bindgen_test_layout__EXCEPTION_POINTERS() {
    assert_eq!(
        ::std::mem::size_of::<_EXCEPTION_POINTERS>(),
        16usize,
        concat!("Size of: ", stringify!(_EXCEPTION_POINTERS))
    );
    assert_eq!(
        ::std::mem::align_of::<_EXCEPTION_POINTERS>(),
        8usize,
        concat!("Alignment of ", stringify!(_EXCEPTION_POINTERS))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_EXCEPTION_POINTERS>())).ExceptionRecord as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_EXCEPTION_POINTERS),
            "::",
            stringify!(ExceptionRecord)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_EXCEPTION_POINTERS>())).ContextRecord as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_EXCEPTION_POINTERS),
            "::",
            stringify!(ContextRecord)
        )
    );
}
pub type EXCEPTION_POINTERS = _EXCEPTION_POINTERS;
pub type PEXCEPTION_POINTERS = *mut _EXCEPTION_POINTERS;
pub type REAL = f32;
pub type ARGB = DWORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_ATTRIBUTES {
    pub nLength: DWORD,
    pub lpSecurityDescriptor: LPVOID,
    pub bInheritHandle: BOOL,
}
#[test]
fn bindgen_test_layout__SECURITY_ATTRIBUTES() {
    assert_eq!(
        ::std::mem::size_of::<_SECURITY_ATTRIBUTES>(),
        24usize,
        concat!("Size of: ", stringify!(_SECURITY_ATTRIBUTES))
    );
    assert_eq!(
        ::std::mem::align_of::<_SECURITY_ATTRIBUTES>(),
        8usize,
        concat!("Alignment of ", stringify!(_SECURITY_ATTRIBUTES))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SECURITY_ATTRIBUTES>())).nLength as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SECURITY_ATTRIBUTES),
            "::",
            stringify!(nLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SECURITY_ATTRIBUTES>())).lpSecurityDescriptor as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SECURITY_ATTRIBUTES),
            "::",
            stringify!(lpSecurityDescriptor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SECURITY_ATTRIBUTES>())).bInheritHandle as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SECURITY_ATTRIBUTES),
            "::",
            stringify!(bInheritHandle)
        )
    );
}
pub type SECURITY_ATTRIBUTES = _SECURITY_ATTRIBUTES;
pub type PSECURITY_ATTRIBUTES = *mut _SECURITY_ATTRIBUTES;
pub type LPSECURITY_ATTRIBUTES = *mut _SECURITY_ATTRIBUTES;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FsColor {
    pub __bindgen_anon_1: FsColor__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union FsColor__bindgen_ty_1 {
    pub rgba: [f32; 4usize],
    pub __bindgen_anon_1: FsColor__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FsColor__bindgen_ty_1__bindgen_ty_1 {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[test]
fn bindgen_test_layout_FsColor__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<FsColor__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(FsColor__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<FsColor__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(FsColor__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FsColor__bindgen_ty_1__bindgen_ty_1>())).r as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FsColor__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FsColor__bindgen_ty_1__bindgen_ty_1>())).g as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FsColor__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FsColor__bindgen_ty_1__bindgen_ty_1>())).b as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FsColor__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FsColor__bindgen_ty_1__bindgen_ty_1>())).a as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FsColor__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(a)
        )
    );
}
#[test]
fn bindgen_test_layout_FsColor__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<FsColor__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(FsColor__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<FsColor__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(FsColor__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsColor__bindgen_ty_1>())).rgba as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FsColor__bindgen_ty_1),
            "::",
            stringify!(rgba)
        )
    );
}
impl ::std::fmt::Debug for FsColor__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "FsColor__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_FsColor() {
    assert_eq!(
        ::std::mem::size_of::<FsColor>(),
        16usize,
        concat!("Size of: ", stringify!(FsColor))
    );
    assert_eq!(
        ::std::mem::align_of::<FsColor>(),
        4usize,
        concat!("Alignment of ", stringify!(FsColor))
    );
}
impl ::std::fmt::Debug for FsColor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "FsColor {{ __bindgen_anon_1: {:?} }}",
            self.__bindgen_anon_1
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FsVec2f {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_FsVec2f() {
    assert_eq!(
        ::std::mem::size_of::<FsVec2f>(),
        8usize,
        concat!("Size of: ", stringify!(FsVec2f))
    );
    assert_eq!(
        ::std::mem::align_of::<FsVec2f>(),
        4usize,
        concat!("Alignment of ", stringify!(FsVec2f))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsVec2f>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FsVec2f),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsVec2f>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FsVec2f),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct FsVec2d {
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout_FsVec2d() {
    assert_eq!(
        ::std::mem::size_of::<FsVec2d>(),
        16usize,
        concat!("Size of: ", stringify!(FsVec2d))
    );
    assert_eq!(
        ::std::mem::align_of::<FsVec2d>(),
        4usize,
        concat!("Alignment of ", stringify!(FsVec2d))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsVec2d>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FsVec2d),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsVec2d>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FsVec2d),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FsVec3f {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_FsVec3f() {
    assert_eq!(
        ::std::mem::size_of::<FsVec3f>(),
        12usize,
        concat!("Size of: ", stringify!(FsVec3f))
    );
    assert_eq!(
        ::std::mem::align_of::<FsVec3f>(),
        4usize,
        concat!("Alignment of ", stringify!(FsVec3f))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsVec3f>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FsVec3f),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsVec3f>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FsVec3f),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsVec3f>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FsVec3f),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct FsVec3d {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[test]
fn bindgen_test_layout_FsVec3d() {
    assert_eq!(
        ::std::mem::size_of::<FsVec3d>(),
        24usize,
        concat!("Size of: ", stringify!(FsVec3d))
    );
    assert_eq!(
        ::std::mem::align_of::<FsVec3d>(),
        4usize,
        concat!("Alignment of ", stringify!(FsVec3d))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsVec3d>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FsVec3d),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsVec3d>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FsVec3d),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsVec3d>())).z as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FsVec3d),
            "::",
            stringify!(z)
        )
    );
}
pub type FsTextureId = ::std::os::raw::c_int;
pub type FsContext = ::std::os::raw::c_ulonglong;
pub type FsRenderImageFlags = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FsPaint {
    pub xform: [f32; 6usize],
    pub extent: [f32; 2usize],
    pub radius: f32,
    pub feather: f32,
    pub innerColor: FsColor,
    pub outerColor: FsColor,
    pub image: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FsPaint() {
    assert_eq!(
        ::std::mem::size_of::<FsPaint>(),
        76usize,
        concat!("Size of: ", stringify!(FsPaint))
    );
    assert_eq!(
        ::std::mem::align_of::<FsPaint>(),
        4usize,
        concat!("Alignment of ", stringify!(FsPaint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsPaint>())).xform as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FsPaint),
            "::",
            stringify!(xform)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsPaint>())).extent as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FsPaint),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsPaint>())).radius as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FsPaint),
            "::",
            stringify!(radius)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsPaint>())).feather as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FsPaint),
            "::",
            stringify!(feather)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsPaint>())).innerColor as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FsPaint),
            "::",
            stringify!(innerColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsPaint>())).outerColor as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FsPaint),
            "::",
            stringify!(outerColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsPaint>())).image as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FsPaint),
            "::",
            stringify!(image)
        )
    );
}
impl ::std::fmt::Debug for FsPaint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "FsPaint {{ xform: {:?}, extent: {:?}, radius: {:?}, feather: {:?}, innerColor: {:?}, outerColor: {:?}, image: {:?} }}" , self . xform , self . extent , self . radius , self . feather , self . innerColor , self . outerColor , self . image)
    }
}
pub const FsBlendFactor_FS_ZERO: FsBlendFactor = 1;
pub const FsBlendFactor_FS_ONE: FsBlendFactor = 2;
pub const FsBlendFactor_FS_SRC_COLOR: FsBlendFactor = 4;
pub const FsBlendFactor_FS_ONE_MINUS_SRC_COLOR: FsBlendFactor = 8;
pub const FsBlendFactor_FS_DST_COLOR: FsBlendFactor = 16;
pub const FsBlendFactor_FS_ONE_MINUS_DST_COLOR: FsBlendFactor = 32;
pub const FsBlendFactor_FS_SRC_ALPHA: FsBlendFactor = 64;
pub const FsBlendFactor_FS_ONE_MINUS_SRC_ALPHA: FsBlendFactor = 128;
pub const FsBlendFactor_FS_DST_ALPHA: FsBlendFactor = 256;
pub const FsBlendFactor_FS_ONE_MINUS_DST_ALPHA: FsBlendFactor = 512;
pub const FsBlendFactor_FS_SRC_ALPHA_SATURATE: FsBlendFactor = 1024;
pub type FsBlendFactor = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FsCompositeOperationState {
    pub srcRGB: ::std::os::raw::c_int,
    pub dstRGB: ::std::os::raw::c_int,
    pub srcAlpha: ::std::os::raw::c_int,
    pub dstAlpha: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FsCompositeOperationState() {
    assert_eq!(
        ::std::mem::size_of::<FsCompositeOperationState>(),
        16usize,
        concat!("Size of: ", stringify!(FsCompositeOperationState))
    );
    assert_eq!(
        ::std::mem::align_of::<FsCompositeOperationState>(),
        4usize,
        concat!("Alignment of ", stringify!(FsCompositeOperationState))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FsCompositeOperationState>())).srcRGB as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FsCompositeOperationState),
            "::",
            stringify!(srcRGB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FsCompositeOperationState>())).dstRGB as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FsCompositeOperationState),
            "::",
            stringify!(dstRGB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FsCompositeOperationState>())).srcAlpha as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FsCompositeOperationState),
            "::",
            stringify!(srcAlpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<FsCompositeOperationState>())).dstAlpha as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FsCompositeOperationState),
            "::",
            stringify!(dstAlpha)
        )
    );
}
pub const FsClipMode_FS_CLIP_MODE_REPLACE: FsClipMode = 0;
pub const FsClipMode_FS_CLIP_MODE_INTERSECT: FsClipMode = 1;
pub const FsClipMode_FS_CLIP_MODE_UNION: FsClipMode = 2;
pub const FsClipMode_FS_CLIP_MODE_XOR: FsClipMode = 3;
pub const FsClipMode_FS_CLIP_MODE_EXCLUDE: FsClipMode = 4;
pub const FsClipMode_FS_CLIP_MODE_COMPLEMENT: FsClipMode = 5;
pub const FsClipMode_FS_CLIP_MODE_IGNORE: FsClipMode = 8;
pub const FsClipMode_FS_CLIP_MODE_USE: FsClipMode = 16;
pub type FsClipMode = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FsScissor {
    pub xform: [f32; 6usize],
    pub extent: [f32; 2usize],
    pub use_: bool,
    pub set: bool,
    pub mode: FsClipMode,
}
#[test]
fn bindgen_test_layout_FsScissor() {
    assert_eq!(
        ::std::mem::size_of::<FsScissor>(),
        40usize,
        concat!("Size of: ", stringify!(FsScissor))
    );
    assert_eq!(
        ::std::mem::align_of::<FsScissor>(),
        4usize,
        concat!("Alignment of ", stringify!(FsScissor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsScissor>())).xform as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FsScissor),
            "::",
            stringify!(xform)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsScissor>())).extent as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FsScissor),
            "::",
            stringify!(extent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsScissor>())).use_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FsScissor),
            "::",
            stringify!(use_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsScissor>())).set as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(FsScissor),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsScissor>())).mode as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FsScissor),
            "::",
            stringify!(mode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FsVertex {
    pub x: f32,
    pub y: f32,
    pub u: f32,
    pub v: f32,
}
#[test]
fn bindgen_test_layout_FsVertex() {
    assert_eq!(
        ::std::mem::size_of::<FsVertex>(),
        16usize,
        concat!("Size of: ", stringify!(FsVertex))
    );
    assert_eq!(
        ::std::mem::align_of::<FsVertex>(),
        4usize,
        concat!("Alignment of ", stringify!(FsVertex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsVertex>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FsVertex),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsVertex>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FsVertex),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsVertex>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FsVertex),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsVertex>())).v as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FsVertex),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct FsPath {
    pub first: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub closed: ::std::os::raw::c_uchar,
    pub nbevel: ::std::os::raw::c_int,
    pub fill: *mut FsVertex,
    pub nfill: ::std::os::raw::c_int,
    pub stroke: *mut FsVertex,
    pub nstroke: ::std::os::raw::c_int,
    pub winding: ::std::os::raw::c_int,
    pub convex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FsPath() {
    assert_eq!(
        ::std::mem::size_of::<FsPath>(),
        48usize,
        concat!("Size of: ", stringify!(FsPath))
    );
    assert_eq!(
        ::std::mem::align_of::<FsPath>(),
        4usize,
        concat!("Alignment of ", stringify!(FsPath))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsPath>())).first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FsPath),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsPath>())).count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FsPath),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsPath>())).closed as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FsPath),
            "::",
            stringify!(closed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsPath>())).nbevel as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FsPath),
            "::",
            stringify!(nbevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsPath>())).fill as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FsPath),
            "::",
            stringify!(fill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsPath>())).nfill as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FsPath),
            "::",
            stringify!(nfill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsPath>())).stroke as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FsPath),
            "::",
            stringify!(stroke)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsPath>())).nstroke as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FsPath),
            "::",
            stringify!(nstroke)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsPath>())).winding as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FsPath),
            "::",
            stringify!(winding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FsPath>())).convex as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(FsPath),
            "::",
            stringify!(convex)
        )
    );
}
extern "C" {
    pub fn fsRenderCreate(ctx: FsContext) -> FsTextureId;
}
extern "C" {
    pub fn fsRenderCreateTexture(
        ctx: FsContext,
        type_: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        imageFlags: FsRenderImageFlags,
        data: *const ::std::os::raw::c_uchar,
        debugName: *const ::std::os::raw::c_char,
    ) -> FsTextureId;
}
extern "C" {
    pub fn fsRenderDeleteTexture(ctx: FsContext, image: ::std::os::raw::c_int) -> FsTextureId;
}
extern "C" {
    pub fn fsRenderUpdateTexture(
        ctx: FsContext,
        image: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_uchar,
    ) -> FsTextureId;
}
extern "C" {
    pub fn fsRenderGetTextureSize(
        ctx: FsContext,
        image: ::std::os::raw::c_int,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsRenderViewport(ctx: FsContext, width: f32, height: f32, devicePixelRatio: f32);
}
extern "C" {
    pub fn fsRenderCancel(ctx: FsContext);
}
extern "C" {
    pub fn fsRenderFlush(ctx: FsContext);
}
extern "C" {
    pub fn fsRenderFill(
        ctx: FsContext,
        paint: *mut FsPaint,
        compositeOperation: FsCompositeOperationState,
        scissor: *mut FsScissor,
        fringe: f32,
        bounds: *const f32,
        paths: *const FsPath,
        npaths: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fsRenderStroke(
        ctx: FsContext,
        paint: *mut FsPaint,
        compositeOperation: FsCompositeOperationState,
        scissor: *mut FsScissor,
        fringe: f32,
        strokeWidth: f32,
        paths: *const FsPath,
        npaths: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fsRenderTriangles(
        ctx: FsContext,
        paint: *mut FsPaint,
        compositeOperation: FsCompositeOperationState,
        scissor: *mut FsScissor,
        verts: *const FsVertex,
        nverts: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fsRenderClearStencil(ctx: FsContext);
}
extern "C" {
    pub fn fsRenderDelete(ctx: FsContext);
}
pub const SURFACE_TYPE_SURFACE_TYPE_CONCRETE: SURFACE_TYPE = 0;
pub const SURFACE_TYPE_SURFACE_TYPE_GRASS: SURFACE_TYPE = 1;
pub const SURFACE_TYPE_SURFACE_TYPE_WATER: SURFACE_TYPE = 2;
pub const SURFACE_TYPE_SURFACE_TYPE_GRASS_BUMPY: SURFACE_TYPE = 3;
pub const SURFACE_TYPE_SURFACE_TYPE_ASPHALT: SURFACE_TYPE = 4;
pub const SURFACE_TYPE_SURFACE_TYPE_SHORT_GRASS: SURFACE_TYPE = 5;
pub const SURFACE_TYPE_SURFACE_TYPE_LONG_GRASS: SURFACE_TYPE = 6;
pub const SURFACE_TYPE_SURFACE_TYPE_HARD_TURF: SURFACE_TYPE = 7;
pub const SURFACE_TYPE_SURFACE_TYPE_SNOW: SURFACE_TYPE = 8;
pub const SURFACE_TYPE_SURFACE_TYPE_ICE: SURFACE_TYPE = 9;
pub const SURFACE_TYPE_SURFACE_TYPE_URBAN: SURFACE_TYPE = 10;
pub const SURFACE_TYPE_SURFACE_TYPE_FOREST: SURFACE_TYPE = 11;
pub const SURFACE_TYPE_SURFACE_TYPE_DIRT: SURFACE_TYPE = 12;
pub const SURFACE_TYPE_SURFACE_TYPE_CORAL: SURFACE_TYPE = 13;
pub const SURFACE_TYPE_SURFACE_TYPE_GRAVEL: SURFACE_TYPE = 14;
pub const SURFACE_TYPE_SURFACE_TYPE_OIL_TREATED: SURFACE_TYPE = 15;
pub const SURFACE_TYPE_SURFACE_TYPE_STEEL_MATS: SURFACE_TYPE = 16;
pub const SURFACE_TYPE_SURFACE_TYPE_BITUMINUS: SURFACE_TYPE = 17;
pub const SURFACE_TYPE_SURFACE_TYPE_BRICK: SURFACE_TYPE = 18;
pub const SURFACE_TYPE_SURFACE_TYPE_MACADAM: SURFACE_TYPE = 19;
pub const SURFACE_TYPE_SURFACE_TYPE_PLANKS: SURFACE_TYPE = 20;
pub const SURFACE_TYPE_SURFACE_TYPE_SAND: SURFACE_TYPE = 21;
pub const SURFACE_TYPE_SURFACE_TYPE_SHALE: SURFACE_TYPE = 22;
pub const SURFACE_TYPE_SURFACE_TYPE_TARMAC: SURFACE_TYPE = 23;
pub const SURFACE_TYPE_SURFACE_TYPE_WRIGHT_FLYER_TRACK: SURFACE_TYPE = 24;
pub const SURFACE_TYPE_SURFACE_TYPE_UNKNOWN: SURFACE_TYPE = 254;
pub const SURFACE_TYPE_SURFACE_TYPE_UNDEFINED: SURFACE_TYPE = 255;
pub type SURFACE_TYPE = ::std::os::raw::c_int;
pub type PSURFACE_TYPE = *mut SURFACE_TYPE;
pub const SURFACE_CONDITION_SURFACE_CONDITION_NORMAL: SURFACE_CONDITION = 0;
pub const SURFACE_CONDITION_SURFACE_CONDITION_WET: SURFACE_CONDITION = 1;
pub const SURFACE_CONDITION_SURFACE_CONDITION_ICY: SURFACE_CONDITION = 2;
pub const SURFACE_CONDITION_SURFACE_CONDITION_SNOW: SURFACE_CONDITION = 3;
pub const SURFACE_CONDITION_SURFACE_CONDITION_MAX: SURFACE_CONDITION = 4;
pub type SURFACE_CONDITION = ::std::os::raw::c_int;
pub const TOOLTIP_UNITS_TYPE_TOOLTIP_UNITS_TYPE_DEFAULT: TOOLTIP_UNITS_TYPE = 0;
pub const TOOLTIP_UNITS_TYPE_TOOLTIP_UNITS_TYPE_METRIC: TOOLTIP_UNITS_TYPE = 1;
pub const TOOLTIP_UNITS_TYPE_TOOLTIP_UNITS_TYPE_US: TOOLTIP_UNITS_TYPE = 2;
pub type TOOLTIP_UNITS_TYPE = ::std::os::raw::c_int;
pub type PPVOID = *mut PVOID;
pub type PUINT8 = *mut ::std::os::raw::c_uchar;
pub type PPUINT8 = *mut *mut ::std::os::raw::c_uchar;
pub type SINT8 = ::std::os::raw::c_schar;
pub type PSINT8 = *mut ::std::os::raw::c_schar;
pub type PPSINT8 = *mut *mut ::std::os::raw::c_schar;
pub type PUINT16 = *mut ::std::os::raw::c_ushort;
pub type PPUINT16 = *mut *mut ::std::os::raw::c_ushort;
pub type SINT16 = ::std::os::raw::c_short;
pub type PSINT16 = *mut ::std::os::raw::c_short;
pub type PPSINT16 = *mut *mut ::std::os::raw::c_short;
pub type SINT32 = ::std::os::raw::c_int;
pub type PSINT32 = *mut ::std::os::raw::c_int;
pub type PPSINT32 = *mut *mut ::std::os::raw::c_int;
pub type VAR8 = ::std::os::raw::c_uchar;
pub type PVAR8 = *mut ::std::os::raw::c_uchar;
pub type PPVAR8 = *mut *mut ::std::os::raw::c_uchar;
pub type VAR16 = ::std::os::raw::c_ushort;
pub type PVAR16 = *mut ::std::os::raw::c_ushort;
pub type PPVAR16 = *mut *mut ::std::os::raw::c_ushort;
pub type VAR32 = ::std::os::raw::c_uint;
pub type PVAR32 = *mut ::std::os::raw::c_uint;
pub type PPVAR32 = *mut *mut ::std::os::raw::c_uint;
pub type PPUINT32 = *mut *mut ::std::os::raw::c_uint;
pub type SINT64 = ::std::os::raw::c_longlong;
pub type PSINT64 = *mut ::std::os::raw::c_longlong;
pub type PPSINT64 = *mut *mut ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VAR64 {
    pub lo: VAR32,
    pub hi: VAR32,
}
#[test]
fn bindgen_test_layout_VAR64() {
    assert_eq!(
        ::std::mem::size_of::<VAR64>(),
        8usize,
        concat!("Size of: ", stringify!(VAR64))
    );
    assert_eq!(
        ::std::mem::align_of::<VAR64>(),
        4usize,
        concat!("Alignment of ", stringify!(VAR64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VAR64>())).lo as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(VAR64), "::", stringify!(lo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<VAR64>())).hi as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(VAR64), "::", stringify!(hi))
    );
}
pub type PVAR64 = *mut VAR64;
pub type PPVAR64 = *mut *mut VAR64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UIF64 {
    pub f: UINT32,
    pub i: UINT32,
}
#[test]
fn bindgen_test_layout_UIF64() {
    assert_eq!(
        ::std::mem::size_of::<UIF64>(),
        8usize,
        concat!("Size of: ", stringify!(UIF64))
    );
    assert_eq!(
        ::std::mem::align_of::<UIF64>(),
        4usize,
        concat!("Alignment of ", stringify!(UIF64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UIF64>())).f as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(UIF64), "::", stringify!(f))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UIF64>())).i as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(UIF64), "::", stringify!(i))
    );
}
pub type PUIF4 = *mut UIF64;
pub type PPUIF64 = *mut *mut UIF64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SVAR64 {
    pub lo: UINT32,
    pub hi: SINT32,
}
#[test]
fn bindgen_test_layout_SVAR64() {
    assert_eq!(
        ::std::mem::size_of::<SVAR64>(),
        8usize,
        concat!("Size of: ", stringify!(SVAR64))
    );
    assert_eq!(
        ::std::mem::align_of::<SVAR64>(),
        4usize,
        concat!("Alignment of ", stringify!(SVAR64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SVAR64>())).lo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SVAR64),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SVAR64>())).hi as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SVAR64),
            "::",
            stringify!(hi)
        )
    );
}
pub type PSVAR64 = *mut SVAR64;
pub type PPSVAR64 = *mut *mut SVAR64;
pub type PPBOOL = *mut *mut ::std::os::raw::c_int;
pub type BOOL8 = VAR8;
pub type PBOOL8 = *mut VAR8;
pub type PPBOOL8 = *mut *mut VAR8;
pub type BOOL16 = VAR16;
pub type PBOOL16 = *mut VAR16;
pub type PPBOOL16 = *mut *mut VAR16;
pub type BOOL32 = VAR32;
pub type PBOOL32 = *mut VAR32;
pub type PPBOOL32 = *mut *mut VAR32;
pub type FLAGS = ::std::os::raw::c_int;
pub type PFLAGS = *mut ::std::os::raw::c_int;
pub type PPFLAGS = *mut *mut ::std::os::raw::c_int;
pub type FLAGS8 = VAR8;
pub type PFLAGS8 = *mut VAR8;
pub type PPFLAGS8 = *mut *mut VAR8;
pub type FLAGS16 = VAR16;
pub type PFLAGS16 = *mut VAR16;
pub type PPFLAGS16 = *mut *mut VAR16;
pub type FLAGS32 = VAR32;
pub type PFLAGS32 = *mut VAR32;
pub type PPFLAGS32 = *mut *mut VAR32;
pub type ENUM = ::std::os::raw::c_int;
pub type PENUM = *mut ::std::os::raw::c_int;
pub type PPENUM = *mut *mut ::std::os::raw::c_int;
pub type ENUM8 = VAR8;
pub type PENUM8 = *mut VAR8;
pub type PPENUM8 = *mut *mut VAR8;
pub type ENUM16 = VAR16;
pub type PENUM16 = *mut VAR16;
pub type PPENUM16 = *mut *mut VAR16;
pub type ENUM32 = VAR32;
pub type PENUM32 = *mut VAR32;
pub type PPENUM32 = *mut *mut VAR32;
pub type INDX = ::std::os::raw::c_int;
pub type PINDX = *mut ::std::os::raw::c_int;
pub type PPINDX = *mut *mut ::std::os::raw::c_int;
pub type INDX8 = VAR8;
pub type PINDX8 = *mut VAR8;
pub type PPINDX8 = *mut *mut VAR8;
pub type INDX16 = VAR16;
pub type PINDX16 = *mut VAR16;
pub type PPINDX16 = *mut *mut VAR16;
pub type INDX32 = VAR32;
pub type PINDX32 = *mut VAR32;
pub type PPINDX32 = *mut *mut VAR32;
pub type ID = ::std::os::raw::c_int;
pub type PID = *mut ::std::os::raw::c_int;
pub type PPID = *mut *mut ::std::os::raw::c_int;
pub type ID8 = VAR8;
pub type PID8 = *mut VAR8;
pub type PPID8 = *mut *mut VAR8;
pub type ID16 = VAR16;
pub type PID16 = *mut VAR16;
pub type PPID16 = *mut *mut VAR16;
pub type ID32 = VAR32;
pub type PID32 = *mut VAR32;
pub type PPID32 = *mut *mut VAR32;
pub type ERR = VAR32;
pub type PERR = *mut VAR32;
pub type PPERR = *mut *mut VAR32;
pub type UFRAC8 = UINT8;
pub type PUFRAC8 = *mut UINT8;
pub type PPUFRAC8 = *mut *mut UINT8;
pub type SFRAC8 = SINT8;
pub type PSFRAC8 = *mut SINT8;
pub type PPSFRAC8 = *mut *mut SINT8;
pub type UFRAC16 = UINT16;
pub type PUFRAC16 = *mut UINT16;
pub type PPUFRAC16 = *mut *mut UINT16;
pub type SFRAC16 = SINT16;
pub type PSFRAC16 = *mut SINT16;
pub type PPSFRAC16 = *mut *mut SINT16;
pub type UFRAC32 = UINT32;
pub type PUFRAC32 = *mut UINT32;
pub type PPUFRAC32 = *mut *mut UINT32;
pub type SFRAC32 = SINT32;
pub type PSFRAC32 = *mut SINT32;
pub type PPSFRAC32 = *mut *mut SINT32;
pub type FLOAT64 = f64;
pub type PFLOAT64 = *mut f64;
pub type PPFLOAT64 = *mut *mut f64;
pub type FLOAT32 = f32;
pub type PFLOAT32 = *mut f32;
pub type PPFLOAT32 = *mut *mut f32;
pub type UIF16 = UINT16;
pub type PUIF16 = *mut UINT16;
pub type PPUIF16 = *mut *mut UINT16;
pub type SIF16 = SINT16;
pub type PSIF16 = *mut SINT16;
pub type PPSIF16 = *mut *mut SINT16;
pub type UIF32 = UINT32;
pub type PUIF32 = *mut UINT32;
pub type PPUIF32 = *mut *mut UINT32;
pub type SIF32 = SINT32;
pub type PSIF32 = *mut SINT32;
pub type PPSIF32 = *mut *mut SINT32;
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union UIF48 {
    pub __bindgen_anon_1: UIF48__bindgen_ty_1,
    pub i64_: UINT64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UIF48__bindgen_ty_1 {
    pub pad: UINT16,
    pub f: UINT16,
    pub i: UINT32,
}
#[test]
fn bindgen_test_layout_UIF48__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<UIF48__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(UIF48__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<UIF48__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(UIF48__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UIF48__bindgen_ty_1>())).pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UIF48__bindgen_ty_1),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UIF48__bindgen_ty_1>())).f as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(UIF48__bindgen_ty_1),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UIF48__bindgen_ty_1>())).i as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UIF48__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
}
#[test]
fn bindgen_test_layout_UIF48() {
    assert_eq!(
        ::std::mem::size_of::<UIF48>(),
        8usize,
        concat!("Size of: ", stringify!(UIF48))
    );
    assert_eq!(
        ::std::mem::align_of::<UIF48>(),
        4usize,
        concat!("Alignment of ", stringify!(UIF48))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UIF48>())).i64_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UIF48),
            "::",
            stringify!(i64_)
        )
    );
}
impl ::std::fmt::Debug for UIF48 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "UIF48 {{ union }}")
    }
}
pub type PUIF48 = *mut UIF48;
pub type PPUIF48 = *mut *mut UIF48;
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union SIF48 {
    pub __bindgen_anon_1: SIF48__bindgen_ty_1,
    pub i64_: SINT64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIF48__bindgen_ty_1 {
    pub pad: UINT16,
    pub f: UINT16,
    pub i: SINT32,
}
#[test]
fn bindgen_test_layout_SIF48__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<SIF48__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(SIF48__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<SIF48__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(SIF48__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SIF48__bindgen_ty_1>())).pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SIF48__bindgen_ty_1),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SIF48__bindgen_ty_1>())).f as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SIF48__bindgen_ty_1),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SIF48__bindgen_ty_1>())).i as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SIF48__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
}
#[test]
fn bindgen_test_layout_SIF48() {
    assert_eq!(
        ::std::mem::size_of::<SIF48>(),
        8usize,
        concat!("Size of: ", stringify!(SIF48))
    );
    assert_eq!(
        ::std::mem::align_of::<SIF48>(),
        4usize,
        concat!("Alignment of ", stringify!(SIF48))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SIF48>())).i64_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SIF48),
            "::",
            stringify!(i64_)
        )
    );
}
impl ::std::fmt::Debug for SIF48 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "SIF48 {{ union }}")
    }
}
pub type PSIF48 = *mut SIF48;
pub type PPSIF48 = *mut *mut SIF48;
pub type SIF64 = SVAR64;
pub type PSIF64 = *mut SVAR64;
pub type PPSIF64 = *mut *mut SVAR64;
pub type PCHAR = *mut ::std::os::raw::c_char;
pub type PPCHAR = *mut PCHAR;
pub type STRING = CHAR;
pub type PSTRING = *mut CHAR;
pub type PPSTRING = *mut *mut CHAR;
pub type STRINGZ = CHAR;
pub type PSTRINGZ = *mut CHAR;
pub type PPSTRINGZ = *mut *mut CHAR;
pub type PCSTRINGZ = *const CHAR;
pub type PPCSTRINGZ = *mut *const CHAR;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct SUBSTRING {
    pub string: PSTRINGZ,
    pub leng: UINT32,
}
#[test]
fn bindgen_test_layout_SUBSTRING() {
    assert_eq!(
        ::std::mem::size_of::<SUBSTRING>(),
        12usize,
        concat!("Size of: ", stringify!(SUBSTRING))
    );
    assert_eq!(
        ::std::mem::align_of::<SUBSTRING>(),
        4usize,
        concat!("Alignment of ", stringify!(SUBSTRING))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SUBSTRING>())).string as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SUBSTRING),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SUBSTRING>())).leng as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SUBSTRING),
            "::",
            stringify!(leng)
        )
    );
}
pub type PSUBSTRING = *mut SUBSTRING;
pub type PPSUBSTRING = *mut *mut SUBSTRING;
pub type BCD16 = VAR16;
pub type PBCD16 = *mut VAR16;
pub type PPBCD16 = *mut *mut VAR16;
pub type BCO16 = VAR16;
pub type PBCO16 = *mut VAR16;
pub type PPBCO16 = *mut *mut VAR16;
pub type BCD32 = VAR32;
pub type PBCD32 = *mut VAR32;
pub type PPBCD32 = *mut *mut VAR32;
pub type BCO32 = VAR32;
pub type PBCO32 = *mut VAR32;
pub type PPBCO32 = *mut *mut VAR32;
pub type ANGL8 = VAR8;
pub type PANGL8 = *mut VAR8;
pub type PPANGL8 = *mut *mut VAR8;
pub type ANGL16 = VAR16;
pub type PANGL16 = *mut VAR16;
pub type PPANGL16 = *mut *mut VAR16;
pub type ANGL32 = VAR32;
pub type PANGL32 = *mut VAR32;
pub type PPANGL32 = *mut *mut VAR32;
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union ANGL48 {
    pub __bindgen_anon_1: ANGL48__bindgen_ty_1,
    pub i64_: UINT64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ANGL48__bindgen_ty_1 {
    pub pad: UINT16,
    pub lo: UINT16,
    pub hi: UINT32,
}
#[test]
fn bindgen_test_layout_ANGL48__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ANGL48__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ANGL48__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ANGL48__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ANGL48__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ANGL48__bindgen_ty_1>())).pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ANGL48__bindgen_ty_1),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ANGL48__bindgen_ty_1>())).lo as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ANGL48__bindgen_ty_1),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ANGL48__bindgen_ty_1>())).hi as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ANGL48__bindgen_ty_1),
            "::",
            stringify!(hi)
        )
    );
}
#[test]
fn bindgen_test_layout_ANGL48() {
    assert_eq!(
        ::std::mem::size_of::<ANGL48>(),
        8usize,
        concat!("Size of: ", stringify!(ANGL48))
    );
    assert_eq!(
        ::std::mem::align_of::<ANGL48>(),
        4usize,
        concat!("Alignment of ", stringify!(ANGL48))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ANGL48>())).i64_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ANGL48),
            "::",
            stringify!(i64_)
        )
    );
}
impl ::std::fmt::Debug for ANGL48 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ANGL48 {{ union }}")
    }
}
pub type PANGL48 = *mut ANGL48;
pub type PPANGL48 = *mut *mut ANGL48;
pub type SINT48 = ANGL48;
pub type PSINT48 = *mut ANGL48;
pub type PPSINT48 = *mut *mut ANGL48;
pub type RADIANS = FLOAT64;
pub type CNTR8 = VAR8;
pub type PCNTR8 = *mut VAR8;
pub type PPCNTR8 = *mut *mut VAR8;
pub type CNTR16 = VAR16;
pub type PCNTR16 = *mut VAR16;
pub type PPCNTR16 = *mut *mut VAR16;
pub type CNTR32 = VAR32;
pub type PCNTR32 = *mut VAR32;
pub type PPCNTR32 = *mut *mut VAR32;
pub type RCNTR8 = VAR8;
pub type PRCNTR8 = *mut VAR8;
pub type PPRCNTR8 = *mut *mut VAR8;
pub type RCNTR16 = VAR16;
pub type PRCNTR16 = *mut VAR16;
pub type PPRCNTR16 = *mut *mut VAR16;
pub type RCNTR32 = VAR32;
pub type PRCNTR32 = *mut VAR32;
pub type PPRCNTR32 = *mut *mut VAR32;
pub type SPARE8 = VAR8;
pub type SPARE16 = VAR16;
pub type SPARE32 = VAR32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct APP_VERSION {
    pub major: UINT32,
    pub minor: UINT32,
    pub build: UINT32,
}
#[test]
fn bindgen_test_layout_APP_VERSION() {
    assert_eq!(
        ::std::mem::size_of::<APP_VERSION>(),
        12usize,
        concat!("Size of: ", stringify!(APP_VERSION))
    );
    assert_eq!(
        ::std::mem::align_of::<APP_VERSION>(),
        4usize,
        concat!("Alignment of ", stringify!(APP_VERSION))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<APP_VERSION>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(APP_VERSION),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<APP_VERSION>())).minor as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(APP_VERSION),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<APP_VERSION>())).build as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(APP_VERSION),
            "::",
            stringify!(build)
        )
    );
}
pub type PAPP_VERSION = *mut APP_VERSION;
pub type PPAPP_VERSION = *mut *mut APP_VERSION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LATLON {
    pub lat: SIF48,
    pub lon: ANGL48,
}
#[test]
fn bindgen_test_layout_LATLON() {
    assert_eq!(
        ::std::mem::size_of::<LATLON>(),
        16usize,
        concat!("Size of: ", stringify!(LATLON))
    );
    assert_eq!(
        ::std::mem::align_of::<LATLON>(),
        4usize,
        concat!("Alignment of ", stringify!(LATLON))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLON>())).lat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLON),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLON>())).lon as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLON),
            "::",
            stringify!(lon)
        )
    );
}
impl ::std::fmt::Debug for LATLON {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "LATLON {{ lat: {:?}, lon: {:?} }}", self.lat, self.lon)
    }
}
pub type PLATLON = *mut LATLON;
pub type PPLATLON = *mut *mut LATLON;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LATLON32 {
    pub lat: SINT32,
    pub lon: ANGL32,
}
#[test]
fn bindgen_test_layout_LATLON32() {
    assert_eq!(
        ::std::mem::size_of::<LATLON32>(),
        8usize,
        concat!("Size of: ", stringify!(LATLON32))
    );
    assert_eq!(
        ::std::mem::align_of::<LATLON32>(),
        4usize,
        concat!("Alignment of ", stringify!(LATLON32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLON32>())).lat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLON32),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLON32>())).lon as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLON32),
            "::",
            stringify!(lon)
        )
    );
}
pub type PLATLON32 = *mut LATLON32;
pub type PPLATLON32 = *mut *mut LATLON32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LATLONALT {
    pub lat: SIF48,
    pub lon: ANGL48,
    pub alt: SIF48,
}
#[test]
fn bindgen_test_layout_LATLONALT() {
    assert_eq!(
        ::std::mem::size_of::<LATLONALT>(),
        24usize,
        concat!("Size of: ", stringify!(LATLONALT))
    );
    assert_eq!(
        ::std::mem::align_of::<LATLONALT>(),
        4usize,
        concat!("Alignment of ", stringify!(LATLONALT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONALT>())).lat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALT),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONALT>())).lon as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALT),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONALT>())).alt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALT),
            "::",
            stringify!(alt)
        )
    );
}
impl ::std::fmt::Debug for LATLONALT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "LATLONALT {{ lat: {:?}, lon: {:?}, alt: {:?} }}",
            self.lat, self.lon, self.alt
        )
    }
}
pub type PLATLONALT = *mut LATLONALT;
pub type PPLATLONALT = *mut *mut LATLONALT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LATLONALT32 {
    pub lat: SINT32,
    pub lon: ANGL32,
    pub alt: SINT32,
}
#[test]
fn bindgen_test_layout_LATLONALT32() {
    assert_eq!(
        ::std::mem::size_of::<LATLONALT32>(),
        12usize,
        concat!("Size of: ", stringify!(LATLONALT32))
    );
    assert_eq!(
        ::std::mem::align_of::<LATLONALT32>(),
        4usize,
        concat!("Alignment of ", stringify!(LATLONALT32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONALT32>())).lat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALT32),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONALT32>())).lon as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALT32),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONALT32>())).alt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALT32),
            "::",
            stringify!(alt)
        )
    );
}
pub type PLATLONALT32 = *mut LATLONALT32;
pub type PPLATLONALT32 = *mut *mut LATLONALT32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _latlonalt_float32 {
    pub lat: FLOAT32,
    pub lon: FLOAT32,
    pub alt: FLOAT32,
}
#[test]
fn bindgen_test_layout__latlonalt_float32() {
    assert_eq!(
        ::std::mem::size_of::<_latlonalt_float32>(),
        12usize,
        concat!("Size of: ", stringify!(_latlonalt_float32))
    );
    assert_eq!(
        ::std::mem::align_of::<_latlonalt_float32>(),
        4usize,
        concat!("Alignment of ", stringify!(_latlonalt_float32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_latlonalt_float32>())).lat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_latlonalt_float32),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_latlonalt_float32>())).lon as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_latlonalt_float32),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_latlonalt_float32>())).alt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_latlonalt_float32),
            "::",
            stringify!(alt)
        )
    );
}
pub type LATLONALT_FLOAT32 = _latlonalt_float32;
pub type PLATLONALT_FLOAT32 = *mut _latlonalt_float32;
pub type PPLATLONALT_FLOAT32 = *mut *mut _latlonalt_float32;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _llf64 {
    pub lat: FLOAT64,
    pub lon: FLOAT64,
}
#[test]
fn bindgen_test_layout__llf64() {
    assert_eq!(
        ::std::mem::size_of::<_llf64>(),
        16usize,
        concat!("Size of: ", stringify!(_llf64))
    );
    assert_eq!(
        ::std::mem::align_of::<_llf64>(),
        4usize,
        concat!("Alignment of ", stringify!(_llf64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_llf64>())).lat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_llf64),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_llf64>())).lon as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_llf64),
            "::",
            stringify!(lon)
        )
    );
}
pub type LLF64 = _llf64;
pub type PLLF64 = *mut _llf64;
pub type PPLLF64 = *mut *mut _llf64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _llaf64 {
    pub lat: FLOAT64,
    pub lon: FLOAT64,
    pub alt: FLOAT64,
}
#[test]
fn bindgen_test_layout__llaf64() {
    assert_eq!(
        ::std::mem::size_of::<_llaf64>(),
        24usize,
        concat!("Size of: ", stringify!(_llaf64))
    );
    assert_eq!(
        ::std::mem::align_of::<_llaf64>(),
        4usize,
        concat!("Alignment of ", stringify!(_llaf64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_llaf64>())).lat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_llaf64),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_llaf64>())).lon as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_llaf64),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_llaf64>())).alt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_llaf64),
            "::",
            stringify!(alt)
        )
    );
}
pub type LLAF64 = _llaf64;
pub type PLLAF64 = *mut _llaf64;
pub type PPLLAF64 = *mut *mut _llaf64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ZXY48 {
    pub z: SIF48,
    pub x: SIF48,
    pub y: SIF48,
}
#[test]
fn bindgen_test_layout_ZXY48() {
    assert_eq!(
        ::std::mem::size_of::<ZXY48>(),
        24usize,
        concat!("Size of: ", stringify!(ZXY48))
    );
    assert_eq!(
        ::std::mem::align_of::<ZXY48>(),
        4usize,
        concat!("Alignment of ", stringify!(ZXY48))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZXY48>())).z as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(ZXY48), "::", stringify!(z))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZXY48>())).x as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ZXY48), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ZXY48>())).y as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ZXY48), "::", stringify!(y))
    );
}
impl ::std::fmt::Debug for ZXY48 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "ZXY48 {{ z: {:?}, x: {:?}, y: {:?} }}",
            self.z, self.x, self.y
        )
    }
}
pub type PZXY48 = *mut ZXY48;
pub type PPZXY48 = *mut *mut ZXY48;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _FLOAT64_VECTOR3 {
    pub i: FLOAT64,
    pub j: FLOAT64,
    pub k: FLOAT64,
}
#[test]
fn bindgen_test_layout__FLOAT64_VECTOR3() {
    assert_eq!(
        ::std::mem::size_of::<_FLOAT64_VECTOR3>(),
        24usize,
        concat!("Size of: ", stringify!(_FLOAT64_VECTOR3))
    );
    assert_eq!(
        ::std::mem::align_of::<_FLOAT64_VECTOR3>(),
        4usize,
        concat!("Alignment of ", stringify!(_FLOAT64_VECTOR3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FLOAT64_VECTOR3>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOAT64_VECTOR3),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FLOAT64_VECTOR3>())).j as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOAT64_VECTOR3),
            "::",
            stringify!(j)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FLOAT64_VECTOR3>())).k as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOAT64_VECTOR3),
            "::",
            stringify!(k)
        )
    );
}
pub type FLOAT64_VECTOR3 = _FLOAT64_VECTOR3;
pub type PFLOAT64_VECTOR3 = *mut _FLOAT64_VECTOR3;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _FLOAT64_VECTOR2 {
    pub i: FLOAT64,
    pub j: FLOAT64,
}
#[test]
fn bindgen_test_layout__FLOAT64_VECTOR2() {
    assert_eq!(
        ::std::mem::size_of::<_FLOAT64_VECTOR2>(),
        16usize,
        concat!("Size of: ", stringify!(_FLOAT64_VECTOR2))
    );
    assert_eq!(
        ::std::mem::align_of::<_FLOAT64_VECTOR2>(),
        4usize,
        concat!("Alignment of ", stringify!(_FLOAT64_VECTOR2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FLOAT64_VECTOR2>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOAT64_VECTOR2),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_FLOAT64_VECTOR2>())).j as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_FLOAT64_VECTOR2),
            "::",
            stringify!(j)
        )
    );
}
pub type FLOAT64_VECTOR2 = _FLOAT64_VECTOR2;
pub type PFLOAT64_VECTOR2 = *mut _FLOAT64_VECTOR2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PBH32 {
    pub pitch: ANGL32,
    pub bank: ANGL32,
    pub heading: ANGL32,
}
#[test]
fn bindgen_test_layout_PBH32() {
    assert_eq!(
        ::std::mem::size_of::<PBH32>(),
        12usize,
        concat!("Size of: ", stringify!(PBH32))
    );
    assert_eq!(
        ::std::mem::align_of::<PBH32>(),
        4usize,
        concat!("Alignment of ", stringify!(PBH32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PBH32>())).pitch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PBH32),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PBH32>())).bank as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PBH32),
            "::",
            stringify!(bank)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PBH32>())).heading as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PBH32),
            "::",
            stringify!(heading)
        )
    );
}
pub type PPBH32 = *mut PBH32;
pub type PPPBH32 = *mut *mut PBH32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PBH16 {
    pub pitch: ANGL16,
    pub bank: ANGL16,
    pub heading: ANGL16,
}
#[test]
fn bindgen_test_layout_PBH16() {
    assert_eq!(
        ::std::mem::size_of::<PBH16>(),
        6usize,
        concat!("Size of: ", stringify!(PBH16))
    );
    assert_eq!(
        ::std::mem::align_of::<PBH16>(),
        2usize,
        concat!("Alignment of ", stringify!(PBH16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PBH16>())).pitch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PBH16),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PBH16>())).bank as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(PBH16),
            "::",
            stringify!(bank)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PBH16>())).heading as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PBH16),
            "::",
            stringify!(heading)
        )
    );
}
pub type PPBH16 = *mut PBH16;
pub type PPPBH16 = *mut *mut PBH16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LATLONBOX {
    pub top: SIF48,
    pub left: ANGL48,
    pub bottom: SIF48,
    pub right: ANGL48,
}
#[test]
fn bindgen_test_layout_LATLONBOX() {
    assert_eq!(
        ::std::mem::size_of::<LATLONBOX>(),
        32usize,
        concat!("Size of: ", stringify!(LATLONBOX))
    );
    assert_eq!(
        ::std::mem::align_of::<LATLONBOX>(),
        4usize,
        concat!("Alignment of ", stringify!(LATLONBOX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONBOX>())).top as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONBOX),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONBOX>())).left as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONBOX),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONBOX>())).bottom as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONBOX),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONBOX>())).right as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONBOX),
            "::",
            stringify!(right)
        )
    );
}
impl ::std::fmt::Debug for LATLONBOX {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "LATLONBOX {{ top: {:?}, left: {:?}, bottom: {:?}, right: {:?} }}",
            self.top, self.left, self.bottom, self.right
        )
    }
}
pub type PLATLONBOX = *mut LATLONBOX;
pub type PPLATLONBOX = *mut *mut LATLONBOX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LATLONRECT32 {
    pub north: SINT32,
    pub south: SINT32,
    pub east: ANGL32,
    pub west: ANGL32,
}
#[test]
fn bindgen_test_layout_LATLONRECT32() {
    assert_eq!(
        ::std::mem::size_of::<LATLONRECT32>(),
        16usize,
        concat!("Size of: ", stringify!(LATLONRECT32))
    );
    assert_eq!(
        ::std::mem::align_of::<LATLONRECT32>(),
        4usize,
        concat!("Alignment of ", stringify!(LATLONRECT32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONRECT32>())).north as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONRECT32),
            "::",
            stringify!(north)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONRECT32>())).south as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONRECT32),
            "::",
            stringify!(south)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONRECT32>())).east as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONRECT32),
            "::",
            stringify!(east)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONRECT32>())).west as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONRECT32),
            "::",
            stringify!(west)
        )
    );
}
pub type PLATLONRECT32 = *mut LATLONRECT32;
pub type PPLATLONRECT32 = *mut *mut LATLONRECT32;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct LATLONRECTF64 {
    pub north: FLOAT64,
    pub south: FLOAT64,
    pub east: FLOAT64,
    pub west: FLOAT64,
}
#[test]
fn bindgen_test_layout_LATLONRECTF64() {
    assert_eq!(
        ::std::mem::size_of::<LATLONRECTF64>(),
        32usize,
        concat!("Size of: ", stringify!(LATLONRECTF64))
    );
    assert_eq!(
        ::std::mem::align_of::<LATLONRECTF64>(),
        4usize,
        concat!("Alignment of ", stringify!(LATLONRECTF64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONRECTF64>())).north as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONRECTF64),
            "::",
            stringify!(north)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONRECTF64>())).south as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONRECTF64),
            "::",
            stringify!(south)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONRECTF64>())).east as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONRECTF64),
            "::",
            stringify!(east)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONRECTF64>())).west as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONRECTF64),
            "::",
            stringify!(west)
        )
    );
}
pub type PLATLONRECTF64 = *mut LATLONRECTF64;
pub type PPLATLONRECTF64 = *mut *mut LATLONRECTF64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LLAPBH {
    pub lla: LATLONALT,
    pub pbh: PBH32,
}
#[test]
fn bindgen_test_layout_LLAPBH() {
    assert_eq!(
        ::std::mem::size_of::<LLAPBH>(),
        36usize,
        concat!("Size of: ", stringify!(LLAPBH))
    );
    assert_eq!(
        ::std::mem::align_of::<LLAPBH>(),
        4usize,
        concat!("Alignment of ", stringify!(LLAPBH))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LLAPBH>())).lla as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LLAPBH),
            "::",
            stringify!(lla)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LLAPBH>())).pbh as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LLAPBH),
            "::",
            stringify!(pbh)
        )
    );
}
impl ::std::fmt::Debug for LLAPBH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "LLAPBH {{ lla: {:?}, pbh: {:?} }}", self.lla, self.pbh)
    }
}
pub type PLLAPBH = *mut LLAPBH;
pub type PPLLAPBH = *mut *mut LLAPBH;
#[repr(C)]
#[derive(Copy, Clone)]
pub union LATLONALTPBH {
    pub __bindgen_anon_1: LATLONALTPBH__bindgen_ty_1,
    pub __bindgen_anon_2: LATLONALTPBH__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LATLONALTPBH__bindgen_ty_1 {
    pub lat: SIF48,
    pub lon: ANGL48,
    pub alt: SIF48,
    pub pitch: ANGL32,
    pub bank: ANGL32,
    pub heading: ANGL32,
}
#[test]
fn bindgen_test_layout_LATLONALTPBH__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<LATLONALTPBH__bindgen_ty_1>(),
        36usize,
        concat!("Size of: ", stringify!(LATLONALTPBH__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<LATLONALTPBH__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(LATLONALTPBH__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONALTPBH__bindgen_ty_1>())).lat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTPBH__bindgen_ty_1),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONALTPBH__bindgen_ty_1>())).lon as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTPBH__bindgen_ty_1),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONALTPBH__bindgen_ty_1>())).alt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTPBH__bindgen_ty_1),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LATLONALTPBH__bindgen_ty_1>())).pitch as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTPBH__bindgen_ty_1),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONALTPBH__bindgen_ty_1>())).bank as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTPBH__bindgen_ty_1),
            "::",
            stringify!(bank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LATLONALTPBH__bindgen_ty_1>())).heading as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTPBH__bindgen_ty_1),
            "::",
            stringify!(heading)
        )
    );
}
impl ::std::fmt::Debug for LATLONALTPBH__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "LATLONALTPBH__bindgen_ty_1 {{ lat: {:?}, lon: {:?}, alt: {:?}, pitch: {:?}, bank: {:?}, heading: {:?} }}" , self . lat , self . lon , self . alt , self . pitch , self . bank , self . heading)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LATLONALTPBH__bindgen_ty_2 {
    pub lla: LATLONALT,
    pub pbh: PBH32,
}
#[test]
fn bindgen_test_layout_LATLONALTPBH__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<LATLONALTPBH__bindgen_ty_2>(),
        36usize,
        concat!("Size of: ", stringify!(LATLONALTPBH__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<LATLONALTPBH__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(LATLONALTPBH__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONALTPBH__bindgen_ty_2>())).lla as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTPBH__bindgen_ty_2),
            "::",
            stringify!(lla)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONALTPBH__bindgen_ty_2>())).pbh as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTPBH__bindgen_ty_2),
            "::",
            stringify!(pbh)
        )
    );
}
impl ::std::fmt::Debug for LATLONALTPBH__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "LATLONALTPBH__bindgen_ty_2 {{ lla: {:?}, pbh: {:?} }}",
            self.lla, self.pbh
        )
    }
}
#[test]
fn bindgen_test_layout_LATLONALTPBH() {
    assert_eq!(
        ::std::mem::size_of::<LATLONALTPBH>(),
        36usize,
        concat!("Size of: ", stringify!(LATLONALTPBH))
    );
    assert_eq!(
        ::std::mem::align_of::<LATLONALTPBH>(),
        4usize,
        concat!("Alignment of ", stringify!(LATLONALTPBH))
    );
}
impl ::std::fmt::Debug for LATLONALTPBH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "LATLONALTPBH {{ union }}")
    }
}
pub type PLATLONALTPBH = *mut LATLONALTPBH;
pub type PPLATLONALTPBH = *mut *mut LATLONALTPBH;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LATLONALTTPO {
    pub time: UINT32,
    pub __bindgen_anon_1: LATLONALTTPO__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union LATLONALTTPO__bindgen_ty_1 {
    pub __bindgen_anon_1: LATLONALTTPO__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: LATLONALTTPO__bindgen_ty_1__bindgen_ty_2,
    pub llapbh: LATLONALTPBH,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LATLONALTTPO__bindgen_ty_1__bindgen_ty_1 {
    pub lat: SIF48,
    pub lon: ANGL48,
    pub alt: SIF48,
    pub pitch: ANGL32,
    pub bank: ANGL32,
    pub heading: ANGL32,
}
#[test]
fn bindgen_test_layout_LATLONALTTPO__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<LATLONALTTPO__bindgen_ty_1__bindgen_ty_1>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(LATLONALTTPO__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LATLONALTTPO__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(LATLONALTTPO__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LATLONALTTPO__bindgen_ty_1__bindgen_ty_1>())).lat as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTTPO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LATLONALTTPO__bindgen_ty_1__bindgen_ty_1>())).lon as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTTPO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LATLONALTTPO__bindgen_ty_1__bindgen_ty_1>())).alt as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTTPO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LATLONALTTPO__bindgen_ty_1__bindgen_ty_1>())).pitch as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTTPO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LATLONALTTPO__bindgen_ty_1__bindgen_ty_1>())).bank as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTTPO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(bank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LATLONALTTPO__bindgen_ty_1__bindgen_ty_1>())).heading as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTTPO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(heading)
        )
    );
}
impl ::std::fmt::Debug for LATLONALTTPO__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "LATLONALTTPO__bindgen_ty_1__bindgen_ty_1 {{ lat: {:?}, lon: {:?}, alt: {:?}, pitch: {:?}, bank: {:?}, heading: {:?} }}" , self . lat , self . lon , self . alt , self . pitch , self . bank , self . heading)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LATLONALTTPO__bindgen_ty_1__bindgen_ty_2 {
    pub lla: LATLONALT,
    pub pbh: PBH32,
}
#[test]
fn bindgen_test_layout_LATLONALTTPO__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<LATLONALTTPO__bindgen_ty_1__bindgen_ty_2>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(LATLONALTTPO__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LATLONALTTPO__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(LATLONALTTPO__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LATLONALTTPO__bindgen_ty_1__bindgen_ty_2>())).lla as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTTPO__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(lla)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LATLONALTTPO__bindgen_ty_1__bindgen_ty_2>())).pbh as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTTPO__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(pbh)
        )
    );
}
impl ::std::fmt::Debug for LATLONALTTPO__bindgen_ty_1__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "LATLONALTTPO__bindgen_ty_1__bindgen_ty_2 {{ lla: {:?}, pbh: {:?} }}",
            self.lla, self.pbh
        )
    }
}
#[test]
fn bindgen_test_layout_LATLONALTTPO__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<LATLONALTTPO__bindgen_ty_1>(),
        36usize,
        concat!("Size of: ", stringify!(LATLONALTTPO__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<LATLONALTTPO__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(LATLONALTTPO__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LATLONALTTPO__bindgen_ty_1>())).llapbh as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTTPO__bindgen_ty_1),
            "::",
            stringify!(llapbh)
        )
    );
}
impl ::std::fmt::Debug for LATLONALTTPO__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "LATLONALTTPO__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_LATLONALTTPO() {
    assert_eq!(
        ::std::mem::size_of::<LATLONALTTPO>(),
        40usize,
        concat!("Size of: ", stringify!(LATLONALTTPO))
    );
    assert_eq!(
        ::std::mem::align_of::<LATLONALTTPO>(),
        4usize,
        concat!("Alignment of ", stringify!(LATLONALTTPO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LATLONALTTPO>())).time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LATLONALTTPO),
            "::",
            stringify!(time)
        )
    );
}
impl ::std::fmt::Debug for LATLONALTTPO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "LATLONALTTPO {{ time: {:?}, __bindgen_anon_1: {:?} }}",
            self.time, self.__bindgen_anon_1
        )
    }
}
pub type PLATLONALTTPO = *mut LATLONALTTPO;
pub type PPLATLONALTTPO = *mut *mut LATLONALTTPO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LLA2416 {
    pub stream: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_LLA2416() {
    assert_eq!(
        ::std::mem::size_of::<LLA2416>(),
        8usize,
        concat!("Size of: ", stringify!(LLA2416))
    );
    assert_eq!(
        ::std::mem::align_of::<LLA2416>(),
        1usize,
        concat!("Alignment of ", stringify!(LLA2416))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LLA2416>())).stream as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LLA2416),
            "::",
            stringify!(stream)
        )
    );
}
pub type PLLA2416 = *mut LLA2416;
pub type PPLLA2416 = *mut *mut LLA2416;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LLA2424 {
    pub stream: [::std::os::raw::c_char; 9usize],
}
#[test]
fn bindgen_test_layout_LLA2424() {
    assert_eq!(
        ::std::mem::size_of::<LLA2424>(),
        9usize,
        concat!("Size of: ", stringify!(LLA2424))
    );
    assert_eq!(
        ::std::mem::align_of::<LLA2424>(),
        1usize,
        concat!("Alignment of ", stringify!(LLA2424))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LLA2424>())).stream as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LLA2424),
            "::",
            stringify!(stream)
        )
    );
}
pub type PLLA2424 = *mut LLA2424;
pub type PPLLA2424 = *mut *mut LLA2424;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XYZ16 {
    pub x: SINT16,
    pub y: SINT16,
    pub z: SINT16,
}
#[test]
fn bindgen_test_layout_XYZ16() {
    assert_eq!(
        ::std::mem::size_of::<XYZ16>(),
        6usize,
        concat!("Size of: ", stringify!(XYZ16))
    );
    assert_eq!(
        ::std::mem::align_of::<XYZ16>(),
        2usize,
        concat!("Alignment of ", stringify!(XYZ16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZ16>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(XYZ16), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZ16>())).y as *const _ as usize },
        2usize,
        concat!("Offset of field: ", stringify!(XYZ16), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZ16>())).z as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(XYZ16), "::", stringify!(z))
    );
}
pub type PXYZ16 = *mut XYZ16;
pub type PPXYZ16 = *mut *mut XYZ16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XYZ32 {
    pub x: SINT32,
    pub y: SINT32,
    pub z: SINT32,
}
#[test]
fn bindgen_test_layout_XYZ32() {
    assert_eq!(
        ::std::mem::size_of::<XYZ32>(),
        12usize,
        concat!("Size of: ", stringify!(XYZ32))
    );
    assert_eq!(
        ::std::mem::align_of::<XYZ32>(),
        4usize,
        concat!("Alignment of ", stringify!(XYZ32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZ32>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(XYZ32), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZ32>())).y as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(XYZ32), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZ32>())).z as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(XYZ32), "::", stringify!(z))
    );
}
pub type PXYZ32 = *mut XYZ32;
pub type PPXYZ32 = *mut *mut XYZ32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xyz_float32 {
    pub x: FLOAT32,
    pub y: FLOAT32,
    pub z: FLOAT32,
}
#[test]
fn bindgen_test_layout__xyz_float32() {
    assert_eq!(
        ::std::mem::size_of::<_xyz_float32>(),
        12usize,
        concat!("Size of: ", stringify!(_xyz_float32))
    );
    assert_eq!(
        ::std::mem::align_of::<_xyz_float32>(),
        4usize,
        concat!("Alignment of ", stringify!(_xyz_float32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xyz_float32>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xyz_float32),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xyz_float32>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_xyz_float32),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xyz_float32>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xyz_float32),
            "::",
            stringify!(z)
        )
    );
}
pub type XYZ_FLOAT32 = _xyz_float32;
pub type PXYZ_FLOAT32 = *mut _xyz_float32;
pub type PPXYZ_FLOAT32 = *mut *mut _xyz_float32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EAN32 {
    pub east: SINT32,
    pub altit: SINT32,
    pub north: SINT32,
}
#[test]
fn bindgen_test_layout_EAN32() {
    assert_eq!(
        ::std::mem::size_of::<EAN32>(),
        12usize,
        concat!("Size of: ", stringify!(EAN32))
    );
    assert_eq!(
        ::std::mem::align_of::<EAN32>(),
        4usize,
        concat!("Alignment of ", stringify!(EAN32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EAN32>())).east as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EAN32),
            "::",
            stringify!(east)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EAN32>())).altit as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EAN32),
            "::",
            stringify!(altit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EAN32>())).north as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(EAN32),
            "::",
            stringify!(north)
        )
    );
}
pub type PEAN32 = *mut EAN32;
pub type PPEAN32 = *mut *mut EAN32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XZF32 {
    pub x: FLOAT32,
    pub z: FLOAT32,
}
#[test]
fn bindgen_test_layout_XZF32() {
    assert_eq!(
        ::std::mem::size_of::<XZF32>(),
        8usize,
        concat!("Size of: ", stringify!(XZF32))
    );
    assert_eq!(
        ::std::mem::align_of::<XZF32>(),
        4usize,
        concat!("Alignment of ", stringify!(XZF32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XZF32>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(XZF32), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XZF32>())).z as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(XZF32), "::", stringify!(z))
    );
}
pub type PXZF32 = *mut XZF32;
pub type PPXZF32 = *mut *mut XZF32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XZ32 {
    pub x: SINT32,
    pub z: SINT32,
}
#[test]
fn bindgen_test_layout_XZ32() {
    assert_eq!(
        ::std::mem::size_of::<XZ32>(),
        8usize,
        concat!("Size of: ", stringify!(XZ32))
    );
    assert_eq!(
        ::std::mem::align_of::<XZ32>(),
        4usize,
        concat!("Alignment of ", stringify!(XZ32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XZ32>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(XZ32), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XZ32>())).z as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(XZ32), "::", stringify!(z))
    );
}
pub type PXZ32 = *mut XZ32;
pub type PPXZ32 = *mut *mut XZ32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EN32 {
    pub east: SINT32,
    pub north: SINT32,
}
#[test]
fn bindgen_test_layout_EN32() {
    assert_eq!(
        ::std::mem::size_of::<EN32>(),
        8usize,
        concat!("Size of: ", stringify!(EN32))
    );
    assert_eq!(
        ::std::mem::align_of::<EN32>(),
        4usize,
        concat!("Alignment of ", stringify!(EN32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EN32>())).east as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EN32),
            "::",
            stringify!(east)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<EN32>())).north as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EN32),
            "::",
            stringify!(north)
        )
    );
}
pub type PEN32 = *mut EN32;
pub type PPEN32 = *mut *mut EN32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ANGLSINCOS16 {
    pub angle: ANGL16,
    pub sine: SFRAC16,
    pub cosine: SFRAC16,
}
#[test]
fn bindgen_test_layout_ANGLSINCOS16() {
    assert_eq!(
        ::std::mem::size_of::<ANGLSINCOS16>(),
        6usize,
        concat!("Size of: ", stringify!(ANGLSINCOS16))
    );
    assert_eq!(
        ::std::mem::align_of::<ANGLSINCOS16>(),
        2usize,
        concat!("Alignment of ", stringify!(ANGLSINCOS16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ANGLSINCOS16>())).angle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ANGLSINCOS16),
            "::",
            stringify!(angle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ANGLSINCOS16>())).sine as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ANGLSINCOS16),
            "::",
            stringify!(sine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ANGLSINCOS16>())).cosine as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ANGLSINCOS16),
            "::",
            stringify!(cosine)
        )
    );
}
pub type PANGLSINCOS16 = *mut ANGLSINCOS16;
pub type PPANGLSINCOS16 = *mut *mut ANGLSINCOS16;
#[repr(C)]
#[derive(Copy, Clone)]
pub union XYZPBH {
    pub __bindgen_anon_1: XYZPBH__bindgen_ty_1,
    pub __bindgen_anon_2: XYZPBH__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XYZPBH__bindgen_ty_1 {
    pub x: SINT32,
    pub y: SINT32,
    pub z: SINT32,
    pub pitch: ANGL16,
    pub bank: ANGL16,
    pub heading: ANGL16,
}
#[test]
fn bindgen_test_layout_XYZPBH__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XYZPBH__bindgen_ty_1>(),
        20usize,
        concat!("Size of: ", stringify!(XYZPBH__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<XYZPBH__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(XYZPBH__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZPBH__bindgen_ty_1>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZPBH__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZPBH__bindgen_ty_1>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZPBH__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZPBH__bindgen_ty_1>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZPBH__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZPBH__bindgen_ty_1>())).pitch as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZPBH__bindgen_ty_1),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZPBH__bindgen_ty_1>())).bank as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZPBH__bindgen_ty_1),
            "::",
            stringify!(bank)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZPBH__bindgen_ty_1>())).heading as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZPBH__bindgen_ty_1),
            "::",
            stringify!(heading)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XYZPBH__bindgen_ty_2 {
    pub xyz: XYZ32,
    pub pbh: PBH16,
}
#[test]
fn bindgen_test_layout_XYZPBH__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<XYZPBH__bindgen_ty_2>(),
        20usize,
        concat!("Size of: ", stringify!(XYZPBH__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<XYZPBH__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(XYZPBH__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZPBH__bindgen_ty_2>())).xyz as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZPBH__bindgen_ty_2),
            "::",
            stringify!(xyz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZPBH__bindgen_ty_2>())).pbh as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZPBH__bindgen_ty_2),
            "::",
            stringify!(pbh)
        )
    );
}
#[test]
fn bindgen_test_layout_XYZPBH() {
    assert_eq!(
        ::std::mem::size_of::<XYZPBH>(),
        20usize,
        concat!("Size of: ", stringify!(XYZPBH))
    );
    assert_eq!(
        ::std::mem::align_of::<XYZPBH>(),
        4usize,
        concat!("Alignment of ", stringify!(XYZPBH))
    );
}
impl ::std::fmt::Debug for XYZPBH {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "XYZPBH {{ union }}")
    }
}
pub type PXYZPBH = *mut XYZPBH;
pub type PPXYZPBH = *mut *mut XYZPBH;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XYZTPO {
    pub time: UINT32,
    pub __bindgen_anon_1: XYZTPO__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XYZTPO__bindgen_ty_1 {
    pub __bindgen_anon_1: XYZTPO__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: XYZTPO__bindgen_ty_1__bindgen_ty_2,
    pub xyzpbh: XYZPBH,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XYZTPO__bindgen_ty_1__bindgen_ty_1 {
    pub x: SINT32,
    pub y: SINT32,
    pub z: SINT32,
    pub pitch: ANGL16,
    pub bank: ANGL16,
    pub heading: ANGL16,
}
#[test]
fn bindgen_test_layout_XYZTPO__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XYZTPO__bindgen_ty_1__bindgen_ty_1>(),
        20usize,
        concat!("Size of: ", stringify!(XYZTPO__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<XYZTPO__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(XYZTPO__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XYZTPO__bindgen_ty_1__bindgen_ty_1>())).x as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZTPO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XYZTPO__bindgen_ty_1__bindgen_ty_1>())).y as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZTPO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XYZTPO__bindgen_ty_1__bindgen_ty_1>())).z as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZTPO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XYZTPO__bindgen_ty_1__bindgen_ty_1>())).pitch as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZTPO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XYZTPO__bindgen_ty_1__bindgen_ty_1>())).bank as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZTPO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(bank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XYZTPO__bindgen_ty_1__bindgen_ty_1>())).heading as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZTPO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(heading)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XYZTPO__bindgen_ty_1__bindgen_ty_2 {
    pub xyz: XYZ32,
    pub pbh: PBH16,
}
#[test]
fn bindgen_test_layout_XYZTPO__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<XYZTPO__bindgen_ty_1__bindgen_ty_2>(),
        20usize,
        concat!("Size of: ", stringify!(XYZTPO__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<XYZTPO__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(XYZTPO__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XYZTPO__bindgen_ty_1__bindgen_ty_2>())).xyz as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZTPO__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(xyz)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XYZTPO__bindgen_ty_1__bindgen_ty_2>())).pbh as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZTPO__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(pbh)
        )
    );
}
#[test]
fn bindgen_test_layout_XYZTPO__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XYZTPO__bindgen_ty_1>(),
        20usize,
        concat!("Size of: ", stringify!(XYZTPO__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<XYZTPO__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(XYZTPO__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZTPO__bindgen_ty_1>())).xyzpbh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZTPO__bindgen_ty_1),
            "::",
            stringify!(xyzpbh)
        )
    );
}
impl ::std::fmt::Debug for XYZTPO__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "XYZTPO__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_XYZTPO() {
    assert_eq!(
        ::std::mem::size_of::<XYZTPO>(),
        24usize,
        concat!("Size of: ", stringify!(XYZTPO))
    );
    assert_eq!(
        ::std::mem::align_of::<XYZTPO>(),
        4usize,
        concat!("Alignment of ", stringify!(XYZTPO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZTPO>())).time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZTPO),
            "::",
            stringify!(time)
        )
    );
}
impl ::std::fmt::Debug for XYZTPO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "XYZTPO {{ time: {:?}, __bindgen_anon_1: {:?} }}",
            self.time, self.__bindgen_anon_1
        )
    }
}
pub type PXYZTPO = *mut XYZTPO;
pub type PPXYZTPO = *mut *mut XYZTPO;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct XYZF64_ {
    pub x: FLOAT64,
    pub y: FLOAT64,
    pub z: FLOAT64,
}
#[test]
fn bindgen_test_layout_XYZF64_() {
    assert_eq!(
        ::std::mem::size_of::<XYZF64_>(),
        24usize,
        concat!("Size of: ", stringify!(XYZF64_))
    );
    assert_eq!(
        ::std::mem::align_of::<XYZF64_>(),
        4usize,
        concat!("Alignment of ", stringify!(XYZF64_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZF64_>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZF64_),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZF64_>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZF64_),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZF64_>())).z as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZF64_),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XYZF64 {
    pub __bindgen_anon_1: XYZF64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XYZF64__bindgen_ty_1 {
    pub __bindgen_anon_1: XYZF64__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: XYZF64__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: XYZF64__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct XYZF64__bindgen_ty_1__bindgen_ty_1 {
    pub lon: FLOAT64,
    pub alt: FLOAT64,
    pub lat: FLOAT64,
}
#[test]
fn bindgen_test_layout_XYZF64__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XYZF64__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(XYZF64__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<XYZF64__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(XYZF64__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XYZF64__bindgen_ty_1__bindgen_ty_1>())).lon as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZF64__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XYZF64__bindgen_ty_1__bindgen_ty_1>())).alt as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZF64__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(alt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XYZF64__bindgen_ty_1__bindgen_ty_1>())).lat as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZF64__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(lat)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct XYZF64__bindgen_ty_1__bindgen_ty_2 {
    pub x: FLOAT64,
    pub y: FLOAT64,
    pub z: FLOAT64,
}
#[test]
fn bindgen_test_layout_XYZF64__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<XYZF64__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!("Size of: ", stringify!(XYZF64__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<XYZF64__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(XYZF64__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XYZF64__bindgen_ty_1__bindgen_ty_2>())).x as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZF64__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XYZF64__bindgen_ty_1__bindgen_ty_2>())).y as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZF64__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XYZF64__bindgen_ty_1__bindgen_ty_2>())).z as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZF64__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct XYZF64__bindgen_ty_1__bindgen_ty_3 {
    pub pitch: FLOAT64,
    pub heading: FLOAT64,
    pub bank: FLOAT64,
}
#[test]
fn bindgen_test_layout_XYZF64__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<XYZF64__bindgen_ty_1__bindgen_ty_3>(),
        24usize,
        concat!("Size of: ", stringify!(XYZF64__bindgen_ty_1__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<XYZF64__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(XYZF64__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XYZF64__bindgen_ty_1__bindgen_ty_3>())).pitch as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZF64__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XYZF64__bindgen_ty_1__bindgen_ty_3>())).heading as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZF64__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(heading)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XYZF64__bindgen_ty_1__bindgen_ty_3>())).bank as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XYZF64__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(bank)
        )
    );
}
#[test]
fn bindgen_test_layout_XYZF64__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XYZF64__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(XYZF64__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<XYZF64__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(XYZF64__bindgen_ty_1))
    );
}
impl ::std::fmt::Debug for XYZF64__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "XYZF64__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_XYZF64() {
    assert_eq!(
        ::std::mem::size_of::<XYZF64>(),
        24usize,
        concat!("Size of: ", stringify!(XYZF64))
    );
    assert_eq!(
        ::std::mem::align_of::<XYZF64>(),
        4usize,
        concat!("Alignment of ", stringify!(XYZF64))
    );
}
impl ::std::fmt::Debug for XYZF64 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "XYZF64 {{ __bindgen_anon_1: {:?} }}",
            self.__bindgen_anon_1
        )
    }
}
pub type PXYZF64 = *mut XYZF64;
pub type PPXYZF64 = *mut *mut XYZF64;
pub type POS3_FLOAT64 = XYZF64;
pub type VEL3_FLOAT64 = XYZF64;
pub type PVEL3_FLOAT64 = *mut XYZF64;
pub type PPVEL3_FLOAT64 = *mut *mut XYZF64;
pub type ACC3_FLOAT64 = XYZF64;
pub type ROT3_FLOAT64 = XYZF64;
pub type ROV3_FLOAT64 = XYZF64;
pub type ROA3_FLOAT64 = XYZF64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct XYF64 {
    pub x: FLOAT64,
    pub y: FLOAT64,
}
#[test]
fn bindgen_test_layout_XYF64() {
    assert_eq!(
        ::std::mem::size_of::<XYF64>(),
        16usize,
        concat!("Size of: ", stringify!(XYF64))
    );
    assert_eq!(
        ::std::mem::align_of::<XYF64>(),
        4usize,
        concat!("Alignment of ", stringify!(XYF64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYF64>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(XYF64), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYF64>())).y as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(XYF64), "::", stringify!(y))
    );
}
pub type PXYF64 = *mut XYF64;
pub type PPXYF64 = *mut *mut XYF64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XYZF32 {
    pub x: FLOAT32,
    pub y: FLOAT32,
    pub z: FLOAT32,
    pub w: FLOAT32,
}
#[test]
fn bindgen_test_layout_XYZF32() {
    assert_eq!(
        ::std::mem::size_of::<XYZF32>(),
        16usize,
        concat!("Size of: ", stringify!(XYZF32))
    );
    assert_eq!(
        ::std::mem::align_of::<XYZF32>(),
        4usize,
        concat!("Alignment of ", stringify!(XYZF32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZF32>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(XYZF32), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZF32>())).y as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(XYZF32), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZF32>())).z as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(XYZF32), "::", stringify!(z))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XYZF32>())).w as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(XYZF32), "::", stringify!(w))
    );
}
pub type PXYZF32 = *mut XYZF32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CXYZF32 {
    pub _base: XYZF32,
}
#[test]
fn bindgen_test_layout_CXYZF32() {
    assert_eq!(
        ::std::mem::size_of::<CXYZF32>(),
        16usize,
        concat!("Size of: ", stringify!(CXYZF32))
    );
    assert_eq!(
        ::std::mem::align_of::<CXYZF32>(),
        4usize,
        concat!("Alignment of ", stringify!(CXYZF32))
    );
}
pub type ANGLF64 = FLOAT64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct PBHF64 {
    pub pitch: ANGLF64,
    pub bank: ANGLF64,
    pub heading: ANGLF64,
}
#[test]
fn bindgen_test_layout_PBHF64() {
    assert_eq!(
        ::std::mem::size_of::<PBHF64>(),
        24usize,
        concat!("Size of: ", stringify!(PBHF64))
    );
    assert_eq!(
        ::std::mem::align_of::<PBHF64>(),
        4usize,
        concat!("Alignment of ", stringify!(PBHF64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PBHF64>())).pitch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PBHF64),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PBHF64>())).bank as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PBHF64),
            "::",
            stringify!(bank)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PBHF64>())).heading as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PBHF64),
            "::",
            stringify!(heading)
        )
    );
}
pub type PPBHF64 = *mut PBHF64;
pub type PPPBHF64 = *mut *mut PBHF64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MATRIXF32 {
    pub __bindgen_anon_1: MATRIXF32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MATRIXF32__bindgen_ty_1 {
    pub __bindgen_anon_1: MATRIXF32__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: MATRIXF32__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: MATRIXF32__bindgen_ty_1__bindgen_ty_3,
    pub m: [[FLOAT32; 4usize]; 4usize],
    pub mat: [[FLOAT32; 4usize]; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MATRIXF32__bindgen_ty_1__bindgen_ty_1 {
    pub x: XYZF32,
    pub y: XYZF32,
    pub z: XYZF32,
    pub w: XYZF32,
}
#[test]
fn bindgen_test_layout_MATRIXF32__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<MATRIXF32__bindgen_ty_1__bindgen_ty_1>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<MATRIXF32__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_1>())).x as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_1>())).y as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_1>())).z as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_1>())).w as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MATRIXF32__bindgen_ty_1__bindgen_ty_2 {
    pub m00: FLOAT32,
    pub m01: FLOAT32,
    pub m02: FLOAT32,
    pub m03: FLOAT32,
    pub m10: FLOAT32,
    pub m11: FLOAT32,
    pub m12: FLOAT32,
    pub m13: FLOAT32,
    pub m20: FLOAT32,
    pub m21: FLOAT32,
    pub m22: FLOAT32,
    pub m23: FLOAT32,
    pub m30: FLOAT32,
    pub m31: FLOAT32,
    pub m32: FLOAT32,
    pub m33: FLOAT32,
}
#[test]
fn bindgen_test_layout_MATRIXF32__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>())).m00 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(m00)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>())).m01 as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(m01)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>())).m02 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(m02)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>())).m03 as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(m03)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>())).m10 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(m10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>())).m11 as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(m11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>())).m12 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(m12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>())).m13 as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(m13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>())).m20 as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(m20)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>())).m21 as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(m21)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>())).m22 as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(m22)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>())).m23 as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(m23)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>())).m30 as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(m30)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>())).m31 as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(m31)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>())).m32 as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(m32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_2>())).m33 as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(m33)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MATRIXF32__bindgen_ty_1__bindgen_ty_3 {
    pub _11: FLOAT32,
    pub _12: FLOAT32,
    pub _13: FLOAT32,
    pub _14: FLOAT32,
    pub _21: FLOAT32,
    pub _22: FLOAT32,
    pub _23: FLOAT32,
    pub _24: FLOAT32,
    pub _31: FLOAT32,
    pub _32: FLOAT32,
    pub _33: FLOAT32,
    pub _34: FLOAT32,
    pub _41: FLOAT32,
    pub _42: FLOAT32,
    pub _43: FLOAT32,
    pub _44: FLOAT32,
}
#[test]
fn bindgen_test_layout_MATRIXF32__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>()))._11 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>()))._12 as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>()))._13 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>()))._14 as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>()))._21 as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_21)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>()))._22 as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_22)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>()))._23 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_23)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>()))._24 as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_24)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>()))._31 as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_31)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>()))._32 as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>()))._33 as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_33)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>()))._34 as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_34)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>()))._41 as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_41)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>()))._42 as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_42)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>()))._43 as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_43)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1__bindgen_ty_3>()))._44 as *const _
                as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(_44)
        )
    );
}
#[test]
fn bindgen_test_layout_MATRIXF32__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<MATRIXF32__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(MATRIXF32__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<MATRIXF32__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(MATRIXF32__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1>())).m as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MATRIXF32__bindgen_ty_1>())).mat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MATRIXF32__bindgen_ty_1),
            "::",
            stringify!(mat)
        )
    );
}
impl ::std::fmt::Debug for MATRIXF32__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "MATRIXF32__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_MATRIXF32() {
    assert_eq!(
        ::std::mem::size_of::<MATRIXF32>(),
        64usize,
        concat!("Size of: ", stringify!(MATRIXF32))
    );
    assert_eq!(
        ::std::mem::align_of::<MATRIXF32>(),
        4usize,
        concat!("Alignment of ", stringify!(MATRIXF32))
    );
}
impl ::std::fmt::Debug for MATRIXF32 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "MATRIXF32 {{ __bindgen_anon_1: {:?} }}",
            self.__bindgen_anon_1
        )
    }
}
pub type PMATRIXF32 = *mut MATRIXF32;
pub type ROTMTRXF64 = MATRIXF32;
pub type PROTMTRXF64 = *mut MATRIXF32;
pub type QUATERN_ROTMAT = MATRIXF32;
pub type PQUATERN_ROTMAT = *mut MATRIXF32;
pub type UNIPIX = SINT32;
pub type PUNIPIX = *mut SINT32;
pub type PPUNIPIX = *mut *mut SINT32;
pub type PIXEL = SINT32;
pub type PPIXEL = *mut SINT32;
pub type PPPIXEL = *mut *mut SINT32;
pub type UNICOL = VAR32;
pub type PUNICOL = *mut VAR32;
pub type PPUNICOL = *mut *mut VAR32;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct RGB15 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_RGB15() {
    assert_eq!(
        ::std::mem::size_of::<RGB15>(),
        2usize,
        concat!("Size of: ", stringify!(RGB15))
    );
    assert_eq!(
        ::std::mem::align_of::<RGB15>(),
        2usize,
        concat!("Alignment of ", stringify!(RGB15))
    );
}
impl RGB15 {
    #[inline]
    pub fn blue(&self) -> UINT16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_blue(&mut self, val: UINT16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn green(&self) -> UINT16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_green(&mut self, val: UINT16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn red(&self) -> UINT16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_red(&mut self, val: UINT16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn alpha(&self) -> UINT16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_alpha(&mut self, val: UINT16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        blue: UINT16,
        green: UINT16,
        red: UINT16,
        alpha: UINT16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let blue: u16 = unsafe { ::std::mem::transmute(blue) };
            blue as u64
        });
        __bindgen_bitfield_unit.set(5usize, 5u8, {
            let green: u16 = unsafe { ::std::mem::transmute(green) };
            green as u64
        });
        __bindgen_bitfield_unit.set(10usize, 5u8, {
            let red: u16 = unsafe { ::std::mem::transmute(red) };
            red as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let alpha: u16 = unsafe { ::std::mem::transmute(alpha) };
            alpha as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type PRGB15 = *mut RGB15;
pub type PPRGB15 = *mut *mut RGB15;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct RGB16 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout_RGB16() {
    assert_eq!(
        ::std::mem::size_of::<RGB16>(),
        2usize,
        concat!("Size of: ", stringify!(RGB16))
    );
    assert_eq!(
        ::std::mem::align_of::<RGB16>(),
        2usize,
        concat!("Alignment of ", stringify!(RGB16))
    );
}
impl RGB16 {
    #[inline]
    pub fn blue(&self) -> UINT16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_blue(&mut self, val: UINT16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn green(&self) -> UINT16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_green(&mut self, val: UINT16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn red(&self) -> UINT16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_red(&mut self, val: UINT16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        blue: UINT16,
        green: UINT16,
        red: UINT16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let blue: u16 = unsafe { ::std::mem::transmute(blue) };
            blue as u64
        });
        __bindgen_bitfield_unit.set(5usize, 6u8, {
            let green: u16 = unsafe { ::std::mem::transmute(green) };
            green as u64
        });
        __bindgen_bitfield_unit.set(11usize, 5u8, {
            let red: u16 = unsafe { ::std::mem::transmute(red) };
            red as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type PRGB16 = *mut RGB16;
pub type PPRGB16 = *mut *mut RGB16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RGB24 {
    pub blue: UINT8,
    pub green: UINT8,
    pub red: UINT8,
}
#[test]
fn bindgen_test_layout_RGB24() {
    assert_eq!(
        ::std::mem::size_of::<RGB24>(),
        3usize,
        concat!("Size of: ", stringify!(RGB24))
    );
    assert_eq!(
        ::std::mem::align_of::<RGB24>(),
        1usize,
        concat!("Alignment of ", stringify!(RGB24))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGB24>())).blue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RGB24),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGB24>())).green as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(RGB24),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGB24>())).red as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(RGB24),
            "::",
            stringify!(red)
        )
    );
}
pub type PRGB24 = *mut RGB24;
pub type PPRGB24 = *mut *mut RGB24;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RGB32 {
    pub blue: UINT8,
    pub green: UINT8,
    pub red: UINT8,
    pub junk: UINT8,
}
#[test]
fn bindgen_test_layout_RGB32() {
    assert_eq!(
        ::std::mem::size_of::<RGB32>(),
        4usize,
        concat!("Size of: ", stringify!(RGB32))
    );
    assert_eq!(
        ::std::mem::align_of::<RGB32>(),
        1usize,
        concat!("Alignment of ", stringify!(RGB32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGB32>())).blue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RGB32),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGB32>())).green as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(RGB32),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGB32>())).red as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(RGB32),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGB32>())).junk as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(RGB32),
            "::",
            stringify!(junk)
        )
    );
}
pub type PRGB32 = *mut RGB32;
pub type PPRGB32 = *mut *mut RGB32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RGBA {
    pub blue: UINT8,
    pub green: UINT8,
    pub red: UINT8,
    pub alpha: UINT8,
}
#[test]
fn bindgen_test_layout_RGBA() {
    assert_eq!(
        ::std::mem::size_of::<RGBA>(),
        4usize,
        concat!("Size of: ", stringify!(RGBA))
    );
    assert_eq!(
        ::std::mem::align_of::<RGBA>(),
        1usize,
        concat!("Alignment of ", stringify!(RGBA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGBA>())).blue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RGBA),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGBA>())).green as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(RGBA),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGBA>())).red as *const _ as usize },
        2usize,
        concat!("Offset of field: ", stringify!(RGBA), "::", stringify!(red))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGBA>())).alpha as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(RGBA),
            "::",
            stringify!(alpha)
        )
    );
}
pub type PRGBA = *mut RGBA;
pub type PPRGBA = *mut *mut RGBA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RGB {
    pub red: UINT8,
    pub green: UINT8,
    pub blue: UINT8,
}
#[test]
fn bindgen_test_layout_RGB() {
    assert_eq!(
        ::std::mem::size_of::<RGB>(),
        3usize,
        concat!("Size of: ", stringify!(RGB))
    );
    assert_eq!(
        ::std::mem::align_of::<RGB>(),
        1usize,
        concat!("Alignment of ", stringify!(RGB))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGB>())).red as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(RGB), "::", stringify!(red))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGB>())).green as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(RGB),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGB>())).blue as *const _ as usize },
        2usize,
        concat!("Offset of field: ", stringify!(RGB), "::", stringify!(blue))
    );
}
pub type PRGB = *mut RGB;
pub type PPRGB = *mut *mut RGB;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RGBAF {
    pub r: FLOAT32,
    pub g: FLOAT32,
    pub b: FLOAT32,
    pub a: FLOAT32,
}
#[test]
fn bindgen_test_layout_RGBAF() {
    assert_eq!(
        ::std::mem::size_of::<RGBAF>(),
        16usize,
        concat!("Size of: ", stringify!(RGBAF))
    );
    assert_eq!(
        ::std::mem::align_of::<RGBAF>(),
        4usize,
        concat!("Alignment of ", stringify!(RGBAF))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGBAF>())).r as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(RGBAF), "::", stringify!(r))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGBAF>())).g as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(RGBAF), "::", stringify!(g))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGBAF>())).b as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(RGBAF), "::", stringify!(b))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RGBAF>())).a as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(RGBAF), "::", stringify!(a))
    );
}
pub type PRGBAF = *mut RGBAF;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XY {
    pub x: SINT32,
    pub y: SINT32,
}
#[test]
fn bindgen_test_layout_XY() {
    assert_eq!(
        ::std::mem::size_of::<XY>(),
        8usize,
        concat!("Size of: ", stringify!(XY))
    );
    assert_eq!(
        ::std::mem::align_of::<XY>(),
        4usize,
        concat!("Alignment of ", stringify!(XY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XY>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(XY), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XY>())).y as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(XY), "::", stringify!(y))
    );
}
pub type PXY = *mut XY;
pub type PPXY = *mut *mut XY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UNIPOINT {
    pub x: UNIPIX,
    pub y: UNIPIX,
}
#[test]
fn bindgen_test_layout_UNIPOINT() {
    assert_eq!(
        ::std::mem::size_of::<UNIPOINT>(),
        8usize,
        concat!("Size of: ", stringify!(UNIPOINT))
    );
    assert_eq!(
        ::std::mem::align_of::<UNIPOINT>(),
        4usize,
        concat!("Alignment of ", stringify!(UNIPOINT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNIPOINT>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNIPOINT),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNIPOINT>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UNIPOINT),
            "::",
            stringify!(y)
        )
    );
}
pub type PUNIPOINT = *mut UNIPOINT;
pub type PPUNIPOINT = *mut *mut UNIPOINT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UNIBOX {
    pub x: UNIPIX,
    pub y: UNIPIX,
    pub size_x: UNIPIX,
    pub size_y: UNIPIX,
}
#[test]
fn bindgen_test_layout_UNIBOX() {
    assert_eq!(
        ::std::mem::size_of::<UNIBOX>(),
        16usize,
        concat!("Size of: ", stringify!(UNIBOX))
    );
    assert_eq!(
        ::std::mem::align_of::<UNIBOX>(),
        4usize,
        concat!("Alignment of ", stringify!(UNIBOX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNIBOX>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(UNIBOX), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNIBOX>())).y as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(UNIBOX), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNIBOX>())).size_x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UNIBOX),
            "::",
            stringify!(size_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNIBOX>())).size_y as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UNIBOX),
            "::",
            stringify!(size_y)
        )
    );
}
pub type PUNIBOX = *mut UNIBOX;
pub type PPUNIBOX = *mut *mut UNIBOX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UNIRECT {
    pub left: UNIPIX,
    pub top: UNIPIX,
    pub right: UNIPIX,
    pub bottom: UNIPIX,
}
#[test]
fn bindgen_test_layout_UNIRECT() {
    assert_eq!(
        ::std::mem::size_of::<UNIRECT>(),
        16usize,
        concat!("Size of: ", stringify!(UNIRECT))
    );
    assert_eq!(
        ::std::mem::align_of::<UNIRECT>(),
        4usize,
        concat!("Alignment of ", stringify!(UNIRECT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNIRECT>())).left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNIRECT),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNIRECT>())).top as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(UNIRECT),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNIRECT>())).right as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UNIRECT),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNIRECT>())).bottom as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(UNIRECT),
            "::",
            stringify!(bottom)
        )
    );
}
pub type PUNIRECT = *mut UNIRECT;
pub type PPUNIRECT = *mut *mut UNIRECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PIXPOINT {
    pub x: PIXEL,
    pub y: PIXEL,
}
#[test]
fn bindgen_test_layout_PIXPOINT() {
    assert_eq!(
        ::std::mem::size_of::<PIXPOINT>(),
        8usize,
        concat!("Size of: ", stringify!(PIXPOINT))
    );
    assert_eq!(
        ::std::mem::align_of::<PIXPOINT>(),
        4usize,
        concat!("Alignment of ", stringify!(PIXPOINT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PIXPOINT>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PIXPOINT),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PIXPOINT>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PIXPOINT),
            "::",
            stringify!(y)
        )
    );
}
pub type PPIXPOINT = *mut PIXPOINT;
pub type PPPIXPOINT = *mut *mut PIXPOINT;
pub type PCPIXPOINT = *const PIXPOINT;
pub type PPCPIXPOINT = *mut *const PIXPOINT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PIXBOX {
    pub x: PIXEL,
    pub y: PIXEL,
    pub size_x: PIXEL,
    pub size_y: PIXEL,
}
#[test]
fn bindgen_test_layout_PIXBOX() {
    assert_eq!(
        ::std::mem::size_of::<PIXBOX>(),
        16usize,
        concat!("Size of: ", stringify!(PIXBOX))
    );
    assert_eq!(
        ::std::mem::align_of::<PIXBOX>(),
        4usize,
        concat!("Alignment of ", stringify!(PIXBOX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PIXBOX>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(PIXBOX), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PIXBOX>())).y as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(PIXBOX), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PIXBOX>())).size_x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PIXBOX),
            "::",
            stringify!(size_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PIXBOX>())).size_y as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PIXBOX),
            "::",
            stringify!(size_y)
        )
    );
}
pub type PPIXBOX = *mut PIXBOX;
pub type PPPIXBOX = *mut *mut PIXBOX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PIXRECT {
    pub left: PIXEL,
    pub top: PIXEL,
    pub right: PIXEL,
    pub bottom: PIXEL,
}
#[test]
fn bindgen_test_layout_PIXRECT() {
    assert_eq!(
        ::std::mem::size_of::<PIXRECT>(),
        16usize,
        concat!("Size of: ", stringify!(PIXRECT))
    );
    assert_eq!(
        ::std::mem::align_of::<PIXRECT>(),
        4usize,
        concat!("Alignment of ", stringify!(PIXRECT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PIXRECT>())).left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PIXRECT),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PIXRECT>())).top as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PIXRECT),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PIXRECT>())).right as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PIXRECT),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PIXRECT>())).bottom as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PIXRECT),
            "::",
            stringify!(bottom)
        )
    );
}
pub type PPIXRECT = *mut PIXRECT;
pub type PPPIXRECT = *mut *mut PIXRECT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BOUNDSRECT {
    pub N: SIF48,
    pub S: SIF48,
    pub E: ANGL48,
    pub W: ANGL48,
}
#[test]
fn bindgen_test_layout_BOUNDSRECT() {
    assert_eq!(
        ::std::mem::size_of::<BOUNDSRECT>(),
        32usize,
        concat!("Size of: ", stringify!(BOUNDSRECT))
    );
    assert_eq!(
        ::std::mem::align_of::<BOUNDSRECT>(),
        4usize,
        concat!("Alignment of ", stringify!(BOUNDSRECT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BOUNDSRECT>())).N as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BOUNDSRECT),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BOUNDSRECT>())).S as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BOUNDSRECT),
            "::",
            stringify!(S)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BOUNDSRECT>())).E as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BOUNDSRECT),
            "::",
            stringify!(E)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BOUNDSRECT>())).W as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BOUNDSRECT),
            "::",
            stringify!(W)
        )
    );
}
impl ::std::fmt::Debug for BOUNDSRECT {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "BOUNDSRECT {{ N: {:?}, S: {:?}, E: {:?}, W: {:?} }}",
            self.N, self.S, self.E, self.W
        )
    }
}
pub type PBOUNDSRECT = *mut BOUNDSRECT;
pub type PPBOUNDSRECT = *mut *mut BOUNDSRECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BOUNDSRECT32 {
    pub north: SINT32,
    pub south: SINT32,
    pub east: SINT32,
    pub west: SINT32,
}
#[test]
fn bindgen_test_layout_BOUNDSRECT32() {
    assert_eq!(
        ::std::mem::size_of::<BOUNDSRECT32>(),
        16usize,
        concat!("Size of: ", stringify!(BOUNDSRECT32))
    );
    assert_eq!(
        ::std::mem::align_of::<BOUNDSRECT32>(),
        4usize,
        concat!("Alignment of ", stringify!(BOUNDSRECT32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BOUNDSRECT32>())).north as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BOUNDSRECT32),
            "::",
            stringify!(north)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BOUNDSRECT32>())).south as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BOUNDSRECT32),
            "::",
            stringify!(south)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BOUNDSRECT32>())).east as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BOUNDSRECT32),
            "::",
            stringify!(east)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BOUNDSRECT32>())).west as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(BOUNDSRECT32),
            "::",
            stringify!(west)
        )
    );
}
pub type PBOUNDSRECT32 = *mut BOUNDSRECT32;
pub type PPBOUNDSRECT32 = *mut *mut BOUNDSRECT32;
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct LLA_INFO {
    pub __bindgen_anon_1: LLA_INFO__bindgen_ty_1,
    pub data_ptr: PVOID,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union LLA_INFO__bindgen_ty_1 {
    pub __bindgen_anon_1: LLA_INFO__bindgen_ty_1__bindgen_ty_1,
    pub lla: LATLONALT,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LLA_INFO__bindgen_ty_1__bindgen_ty_1 {
    pub lat: SIF48,
    pub lon: ANGL48,
    pub alt: SIF48,
}
#[test]
fn bindgen_test_layout_LLA_INFO__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<LLA_INFO__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(LLA_INFO__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<LLA_INFO__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(LLA_INFO__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LLA_INFO__bindgen_ty_1__bindgen_ty_1>())).lat as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LLA_INFO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(lat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LLA_INFO__bindgen_ty_1__bindgen_ty_1>())).lon as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LLA_INFO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(lon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<LLA_INFO__bindgen_ty_1__bindgen_ty_1>())).alt as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LLA_INFO__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(alt)
        )
    );
}
impl ::std::fmt::Debug for LLA_INFO__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "LLA_INFO__bindgen_ty_1__bindgen_ty_1 {{ lat: {:?}, lon: {:?}, alt: {:?} }}",
            self.lat, self.lon, self.alt
        )
    }
}
#[test]
fn bindgen_test_layout_LLA_INFO__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<LLA_INFO__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(LLA_INFO__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<LLA_INFO__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(LLA_INFO__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LLA_INFO__bindgen_ty_1>())).lla as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LLA_INFO__bindgen_ty_1),
            "::",
            stringify!(lla)
        )
    );
}
impl ::std::fmt::Debug for LLA_INFO__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "LLA_INFO__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_LLA_INFO() {
    assert_eq!(
        ::std::mem::size_of::<LLA_INFO>(),
        32usize,
        concat!("Size of: ", stringify!(LLA_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<LLA_INFO>(),
        4usize,
        concat!("Alignment of ", stringify!(LLA_INFO))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LLA_INFO>())).data_ptr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LLA_INFO),
            "::",
            stringify!(data_ptr)
        )
    );
}
impl ::std::fmt::Debug for LLA_INFO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "LLA_INFO {{ __bindgen_anon_1: {:?}, data_ptr: {:?} }}",
            self.__bindgen_anon_1, self.data_ptr
        )
    }
}
pub type PLLA_INFO = *mut LLA_INFO;
pub type PPLLA_INFO = *mut *mut LLA_INFO;
pub const IMG_FORMAT_IMG_8_BIT_MONOCHROME: IMG_FORMAT = 0;
pub const IMG_FORMAT_IMG_8_BIT_INDEXED: IMG_FORMAT = 1;
pub const IMG_FORMAT_IMG_15_BIT: IMG_FORMAT = 2;
pub const IMG_FORMAT_IMG_16_BIT: IMG_FORMAT = 3;
pub const IMG_FORMAT_IMG_16A_BIT: IMG_FORMAT = 4;
pub const IMG_FORMAT_IMG_24_BIT: IMG_FORMAT = 5;
pub const IMG_FORMAT_IMG_32_BIT: IMG_FORMAT = 6;
pub const IMG_FORMAT_IMG_32A_BIT: IMG_FORMAT = 7;
pub const IMG_FORMAT_IMG_DXT1: IMG_FORMAT = 8;
pub const IMG_FORMAT_IMG_DXT3: IMG_FORMAT = 9;
pub const IMG_FORMAT_IMG_DUDV: IMG_FORMAT = 10;
pub const IMG_FORMAT_IMG_MAX: IMG_FORMAT = 11;
pub type IMG_FORMAT = ::std::os::raw::c_int;
pub type PIMG_FORMAT = *mut IMG_FORMAT;
pub type PPIMG_FORMAT = *mut *mut IMG_FORMAT;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct IMAGE {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub dim: PIXPOINT,
    pub pitch: UINT32,
    pub palette: *mut RGBA,
    pub len: UINT32,
    pub image: PCHAR,
    pub pdx: PVOID,
}
#[test]
fn bindgen_test_layout_IMAGE() {
    assert_eq!(
        ::std::mem::size_of::<IMAGE>(),
        44usize,
        concat!("Size of: ", stringify!(IMAGE))
    );
    assert_eq!(
        ::std::mem::align_of::<IMAGE>(),
        4usize,
        concat!("Alignment of ", stringify!(IMAGE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IMAGE>())).dim as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE),
            "::",
            stringify!(dim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IMAGE>())).pitch as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE),
            "::",
            stringify!(pitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IMAGE>())).palette as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE),
            "::",
            stringify!(palette)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IMAGE>())).len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IMAGE>())).image as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IMAGE>())).pdx as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE),
            "::",
            stringify!(pdx)
        )
    );
}
impl IMAGE {
    #[inline]
    pub fn format(&self) -> IMG_FORMAT {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_format(&mut self, val: IMG_FORMAT) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn flags(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        format: IMG_FORMAT,
        flags: UINT32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let format: u32 = unsafe { ::std::mem::transmute(format) };
            format as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type PIMAGE = *mut IMAGE;
pub type PPIMAGE = *mut *mut IMAGE;
pub type PCIMAGE = *const IMAGE;
pub type PPCIMAGE = *mut *const IMAGE;
pub const VIEW_DIR_VIEW_DIR_FORWARD: VIEW_DIR = 0;
pub const VIEW_DIR_VIEW_DIR_FORWARD_RIGHT: VIEW_DIR = 1;
pub const VIEW_DIR_VIEW_DIR_RIGHT: VIEW_DIR = 2;
pub const VIEW_DIR_VIEW_DIR_REAR_RIGHT: VIEW_DIR = 3;
pub const VIEW_DIR_VIEW_DIR_REAR: VIEW_DIR = 4;
pub const VIEW_DIR_VIEW_DIR_REAR_LEFT: VIEW_DIR = 5;
pub const VIEW_DIR_VIEW_DIR_LEFT: VIEW_DIR = 6;
pub const VIEW_DIR_VIEW_DIR_FORWARD_LEFT: VIEW_DIR = 7;
pub const VIEW_DIR_VIEW_DIR_DOWN: VIEW_DIR = 8;
pub const VIEW_DIR_VIEW_DIR_FORWARD_UP: VIEW_DIR = 9;
pub const VIEW_DIR_VIEW_DIR_FORWARD_RIGHT_UP: VIEW_DIR = 10;
pub const VIEW_DIR_VIEW_DIR_RIGHT_UP: VIEW_DIR = 11;
pub const VIEW_DIR_VIEW_DIR_REAR_RIGHT_UP: VIEW_DIR = 12;
pub const VIEW_DIR_VIEW_DIR_REAR_UP: VIEW_DIR = 13;
pub const VIEW_DIR_VIEW_DIR_REAR_LEFT_UP: VIEW_DIR = 14;
pub const VIEW_DIR_VIEW_DIR_LEFT_UP: VIEW_DIR = 15;
pub const VIEW_DIR_VIEW_DIR_FORWARD_LEFT_UP: VIEW_DIR = 16;
pub const VIEW_DIR_VIEW_DIR_UP: VIEW_DIR = 17;
pub const VIEW_DIR_VIEW_DIR_AUX_00: VIEW_DIR = 18;
pub const VIEW_DIR_VIEW_DIR_AUX_01: VIEW_DIR = 19;
pub const VIEW_DIR_VIEW_DIR_AUX_02: VIEW_DIR = 20;
pub const VIEW_DIR_VIEW_DIR_AUX_03: VIEW_DIR = 21;
pub const VIEW_DIR_VIEW_DIR_AUX_04: VIEW_DIR = 22;
pub const VIEW_DIR_VIEW_DIR_AUX_05: VIEW_DIR = 23;
pub const VIEW_DIR_VIEW_DIR_MAX: VIEW_DIR = 24;
pub type VIEW_DIR = ::std::os::raw::c_int;
pub type PVIEW_DIR = *mut VIEW_DIR;
pub type PPVIEW_DIR = *mut *mut VIEW_DIR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BOUNDBOX {
    pub N: SIF32,
    pub S: SIF32,
    pub E: ANGL32,
    pub W: ANGL32,
}
#[test]
fn bindgen_test_layout_BOUNDBOX() {
    assert_eq!(
        ::std::mem::size_of::<BOUNDBOX>(),
        16usize,
        concat!("Size of: ", stringify!(BOUNDBOX))
    );
    assert_eq!(
        ::std::mem::align_of::<BOUNDBOX>(),
        4usize,
        concat!("Alignment of ", stringify!(BOUNDBOX))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BOUNDBOX>())).N as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BOUNDBOX),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BOUNDBOX>())).S as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BOUNDBOX),
            "::",
            stringify!(S)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BOUNDBOX>())).E as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BOUNDBOX),
            "::",
            stringify!(E)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BOUNDBOX>())).W as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(BOUNDBOX),
            "::",
            stringify!(W)
        )
    );
}
pub type PBOUNDBOX = *mut BOUNDBOX;
pub type PPBOUNDBOX = *mut *mut BOUNDBOX;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _engine_fuel_vars {
    pub tank_selector: ENUM,
    pub tanks_used: FLAGS,
    pub number_of_tanks_used: UINT32,
    pub fuelflow_pph: FLOAT64,
    pub fuel_available: BOOL32,
}
#[test]
fn bindgen_test_layout__engine_fuel_vars() {
    assert_eq!(
        ::std::mem::size_of::<_engine_fuel_vars>(),
        24usize,
        concat!("Size of: ", stringify!(_engine_fuel_vars))
    );
    assert_eq!(
        ::std::mem::align_of::<_engine_fuel_vars>(),
        4usize,
        concat!("Alignment of ", stringify!(_engine_fuel_vars))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_engine_fuel_vars>())).tank_selector as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_engine_fuel_vars),
            "::",
            stringify!(tank_selector)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_engine_fuel_vars>())).tanks_used as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_engine_fuel_vars),
            "::",
            stringify!(tanks_used)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_engine_fuel_vars>())).number_of_tanks_used as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_engine_fuel_vars),
            "::",
            stringify!(number_of_tanks_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_engine_fuel_vars>())).fuelflow_pph as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_engine_fuel_vars),
            "::",
            stringify!(fuelflow_pph)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_engine_fuel_vars>())).fuel_available as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_engine_fuel_vars),
            "::",
            stringify!(fuel_available)
        )
    );
}
pub type ENG_FUEL_VARS = _engine_fuel_vars;
pub type PENG_FUEL_VARS = *mut _engine_fuel_vars;
pub type PPENG_FUEL_VARS = *mut *mut _engine_fuel_vars;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct ENG {
    pub throttle_lvr_pos: SINT16,
    pub propeller_lvr_pos: UINT16,
    pub mixture_lvr_pos: UINT16,
    pub starter: ENUM16,
    pub combustion: BOOL16,
    pub n1_rpm: UINT16,
    pub n2_rpm: UINT16,
    pub ff_pph: UINT16,
    pub ff_pph_actual: UINT32,
    pub ff_pph_ssl: UINT16,
    pub torque: UINT16,
    pub absorbed_torque: UINT16,
    pub thrust_lbs: SINT32,
    pub blade_angle_pdeg: ANGL16,
    pub lf_mag: BOOL16,
    pub rt_mag: BOOL16,
    pub anti_ice: BOOL16,
    pub epr_bug_pos: UINT16,
    pub egt_bug_pos: UINT16,
    pub oil_tmp: UINT16,
    pub oil_prs: UINT16,
    pub epr: UINT16,
    pub egt_degC: UINT16,
    pub manifold_pressure: UINT16,
    pub x_pos: SINT16,
    pub y_pos: SINT16,
    pub z_pos: SINT16,
    pub rpm_scaler: UINT16,
    pub ext_ptr: PVOID,
    pub oil_quantity: UINT32,
    pub engine_vibration: UINT32,
    pub hydraulic_pressure: UINT32,
    pub hydraulic_quantity: UINT32,
    pub induced_velocity: FLOAT64,
    pub cyl_head_temp_degF: FLOAT64,
    pub tot_ind: UINT32,
    pub torque_ind: UINT32,
    pub Wfpress_ind: UINT32,
    pub electric_load: UINT32,
    pub xmsn_pressure: UINT32,
    pub xmsn_temperature: UINT32,
    pub rotor_rpm: UINT32,
    pub fuel_vars: ENG_FUEL_VARS,
}
#[test]
fn bindgen_test_layout_ENG() {
    assert_eq!(
        ::std::mem::size_of::<ENG>(),
        156usize,
        concat!("Size of: ", stringify!(ENG))
    );
    assert_eq!(
        ::std::mem::align_of::<ENG>(),
        4usize,
        concat!("Alignment of ", stringify!(ENG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).throttle_lvr_pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(throttle_lvr_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).propeller_lvr_pos as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(propeller_lvr_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).mixture_lvr_pos as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(mixture_lvr_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).starter as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(starter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).combustion as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(combustion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).n1_rpm as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(n1_rpm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).n2_rpm as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(n2_rpm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).ff_pph as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(ff_pph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).ff_pph_actual as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(ff_pph_actual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).ff_pph_ssl as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(ff_pph_ssl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).torque as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(torque)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).absorbed_torque as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(absorbed_torque)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).thrust_lbs as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(thrust_lbs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).blade_angle_pdeg as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(blade_angle_pdeg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).lf_mag as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(lf_mag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).rt_mag as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(rt_mag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).anti_ice as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(anti_ice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).epr_bug_pos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(epr_bug_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).egt_bug_pos as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(egt_bug_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).oil_tmp as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(oil_tmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).oil_prs as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(oil_prs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).epr as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(ENG), "::", stringify!(epr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).egt_degC as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(egt_degC)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).manifold_pressure as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(manifold_pressure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).x_pos as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(x_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).y_pos as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(y_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).z_pos as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(z_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).rpm_scaler as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(rpm_scaler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).ext_ptr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(ext_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).oil_quantity as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(oil_quantity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).engine_vibration as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(engine_vibration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).hydraulic_pressure as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(hydraulic_pressure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).hydraulic_quantity as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(hydraulic_quantity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).induced_velocity as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(induced_velocity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).cyl_head_temp_degF as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(cyl_head_temp_degF)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).tot_ind as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(tot_ind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).torque_ind as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(torque_ind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).Wfpress_ind as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(Wfpress_ind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).electric_load as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(electric_load)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).xmsn_pressure as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(xmsn_pressure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).xmsn_temperature as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(xmsn_temperature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).rotor_rpm as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(rotor_rpm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ENG>())).fuel_vars as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ENG),
            "::",
            stringify!(fuel_vars)
        )
    );
}
pub type PENG = *mut ENG;
pub type PPENG = *mut *mut ENG;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct SENSEBLOCK {
    pub left: PIXEL,
    pub top: PIXEL,
    pub right: PIXEL,
    pub bottom: PIXEL,
    pub routine: PVOID,
}
#[test]
fn bindgen_test_layout_SENSEBLOCK() {
    assert_eq!(
        ::std::mem::size_of::<SENSEBLOCK>(),
        24usize,
        concat!("Size of: ", stringify!(SENSEBLOCK))
    );
    assert_eq!(
        ::std::mem::align_of::<SENSEBLOCK>(),
        4usize,
        concat!("Alignment of ", stringify!(SENSEBLOCK))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SENSEBLOCK>())).left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SENSEBLOCK),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SENSEBLOCK>())).top as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SENSEBLOCK),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SENSEBLOCK>())).right as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SENSEBLOCK),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SENSEBLOCK>())).bottom as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SENSEBLOCK),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SENSEBLOCK>())).routine as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SENSEBLOCK),
            "::",
            stringify!(routine)
        )
    );
}
pub type PSENSEBLOCK = *mut SENSEBLOCK;
pub type PPSENSEBLOCK = *mut *mut SENSEBLOCK;
pub const XVOR_TYPE_VOR_UNKNOWN: XVOR_TYPE = 0;
pub const XVOR_TYPE_VOR_TERMINAL: XVOR_TYPE = 1;
pub const XVOR_TYPE_VOR_LOW_ALTITUDE: XVOR_TYPE = 2;
pub const XVOR_TYPE_VOR_LOW_ALT: XVOR_TYPE = 2;
pub const XVOR_TYPE_VOR_HIGH_ALTITUDE: XVOR_TYPE = 3;
pub const XVOR_TYPE_VOR_HIGH_ALT: XVOR_TYPE = 3;
pub const XVOR_TYPE_VOR_ILS: XVOR_TYPE = 4;
pub const XVOR_TYPE_VOR_VOT: XVOR_TYPE = 5;
pub type XVOR_TYPE = ::std::os::raw::c_int;
pub type PXVOR_TYPE = *mut XVOR_TYPE;
pub type PPXVOR_TYPE = *mut *mut XVOR_TYPE;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct LOOKUP_TABLE {
    pub code: ENUM32,
    pub text: PSTRINGZ,
}
#[test]
fn bindgen_test_layout_LOOKUP_TABLE() {
    assert_eq!(
        ::std::mem::size_of::<LOOKUP_TABLE>(),
        12usize,
        concat!("Size of: ", stringify!(LOOKUP_TABLE))
    );
    assert_eq!(
        ::std::mem::align_of::<LOOKUP_TABLE>(),
        4usize,
        concat!("Alignment of ", stringify!(LOOKUP_TABLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOOKUP_TABLE>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LOOKUP_TABLE),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LOOKUP_TABLE>())).text as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LOOKUP_TABLE),
            "::",
            stringify!(text)
        )
    );
}
pub type PLOOKUP_TABLE = *mut LOOKUP_TABLE;
pub type PPLOOKUP_TABLE = *mut *mut LOOKUP_TABLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xyz_minmax {
    pub xyzMin: XYZF32,
    pub xyzMax: XYZF32,
}
#[test]
fn bindgen_test_layout__xyz_minmax() {
    assert_eq!(
        ::std::mem::size_of::<_xyz_minmax>(),
        32usize,
        concat!("Size of: ", stringify!(_xyz_minmax))
    );
    assert_eq!(
        ::std::mem::align_of::<_xyz_minmax>(),
        4usize,
        concat!("Alignment of ", stringify!(_xyz_minmax))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xyz_minmax>())).xyzMin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xyz_minmax),
            "::",
            stringify!(xyzMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_xyz_minmax>())).xyzMax as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_xyz_minmax),
            "::",
            stringify!(xyzMax)
        )
    );
}
pub type XYZ_MINMAX = _xyz_minmax;
pub type PXYZ_MINMAX = *mut _xyz_minmax;
pub type PPXYZ_MINMAX = *mut *mut _xyz_minmax;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _min_max {
    pub fMin: FLOAT32,
    pub fMax: FLOAT32,
}
#[test]
fn bindgen_test_layout__min_max() {
    assert_eq!(
        ::std::mem::size_of::<_min_max>(),
        8usize,
        concat!("Size of: ", stringify!(_min_max))
    );
    assert_eq!(
        ::std::mem::align_of::<_min_max>(),
        4usize,
        concat!("Alignment of ", stringify!(_min_max))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_min_max>())).fMin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_min_max),
            "::",
            stringify!(fMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_min_max>())).fMax as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_min_max),
            "::",
            stringify!(fMax)
        )
    );
}
pub type MIN_MAX = _min_max;
pub type PMIN_MAX = *mut _min_max;
pub type PPMIN_MAX = *mut *mut _min_max;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _uv {
    pub u: FLOAT32,
    pub v: FLOAT32,
}
#[test]
fn bindgen_test_layout__uv() {
    assert_eq!(
        ::std::mem::size_of::<_uv>(),
        8usize,
        concat!("Size of: ", stringify!(_uv))
    );
    assert_eq!(
        ::std::mem::align_of::<_uv>(),
        4usize,
        concat!("Alignment of ", stringify!(_uv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_uv>())).u as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_uv), "::", stringify!(u))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_uv>())).v as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(_uv), "::", stringify!(v))
    );
}
pub type UV = _uv;
pub type PUV = *mut _uv;
pub type PPUV = *mut *mut _uv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _uv_info {
    pub uv: [UV; 2usize],
}
#[test]
fn bindgen_test_layout__uv_info() {
    assert_eq!(
        ::std::mem::size_of::<_uv_info>(),
        16usize,
        concat!("Size of: ", stringify!(_uv_info))
    );
    assert_eq!(
        ::std::mem::align_of::<_uv_info>(),
        4usize,
        concat!("Alignment of ", stringify!(_uv_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_uv_info>())).uv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_uv_info),
            "::",
            stringify!(uv)
        )
    );
}
pub type UV_INFO = _uv_info;
pub type PUV_INFO = *mut _uv_info;
pub type PPUV_INFO = *mut *mut _uv_info;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_OFF: FUEL_SELECT = 0;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_ALL: FUEL_SELECT = 1;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_LEFT: FUEL_SELECT = 2;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_RIGHT: FUEL_SELECT = 3;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_LEFT_AUX: FUEL_SELECT = 4;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_RIGHT_AUX: FUEL_SELECT = 5;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_CENTER: FUEL_SELECT = 6;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_CENTER2: FUEL_SELECT = 7;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_CENTER3: FUEL_SELECT = 8;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_EXTERNAL1: FUEL_SELECT = 9;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_EXTERNAL2: FUEL_SELECT = 10;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_RIGHT_TIP: FUEL_SELECT = 11;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_LEFT_TIP: FUEL_SELECT = 12;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_CROSSFEED: FUEL_SELECT = 13;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_CROSSFEED_L2R: FUEL_SELECT = 14;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_CROSSFEED_R2L: FUEL_SELECT = 15;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_BOTH: FUEL_SELECT = 16;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_EXTERNAL_ALL: FUEL_SELECT = 17;
pub const FUEL_SELECT_FUEL_TANK_SELECTOR_ISOLATE: FUEL_SELECT = 18;
pub const FUEL_SELECT_FUEL_TANK_MAXIMUM: FUEL_SELECT = 19;
pub type FUEL_SELECT = ::std::os::raw::c_int;
pub type PFUEL_SELECT = *mut FUEL_SELECT;
pub type PPFUEL_SELECT = *mut *mut FUEL_SELECT;
pub const CROSS_FEED_SELECT_CROSS_FEED_OFF: CROSS_FEED_SELECT = 0;
pub const CROSS_FEED_SELECT_CROSS_FEED_LEFT_TO_RIGHT: CROSS_FEED_SELECT = 1;
pub const CROSS_FEED_SELECT_CROSS_FEED_RIGHT_TO_LEFT: CROSS_FEED_SELECT = 2;
pub const CROSS_FEED_SELECT_CROSS_FEED_MAX: CROSS_FEED_SELECT = 3;
pub type CROSS_FEED_SELECT = ::std::os::raw::c_int;
pub use self::CROSS_FEED_SELECT as CROSS_FEED;
pub type PCROSS_FEED = *mut CROSS_FEED_SELECT;
pub type PPCROSS_FEED = *mut *mut CROSS_FEED_SELECT;
pub const PROP_TYPE_PROP_TYPE_NONE: PROP_TYPE = 0;
pub const PROP_TYPE_PROP_TYPE_FIXED: PROP_TYPE = 1;
pub const PROP_TYPE_PROP_TYPE_MANUAL: PROP_TYPE = 2;
pub const PROP_TYPE_PROP_TYPE_CHOICE: PROP_TYPE = 3;
pub type PROP_TYPE = ::std::os::raw::c_int;
pub const UNITS_OF_MEASURE_ENGLISH_UNITS: UNITS_OF_MEASURE = 0;
pub const UNITS_OF_MEASURE_METRIC_UNITS_ALT_FEET: UNITS_OF_MEASURE = 1;
pub const UNITS_OF_MEASURE_METRIC_UNITS_ALT_METER: UNITS_OF_MEASURE = 2;
pub type UNITS_OF_MEASURE = ::std::os::raw::c_int;
pub const GAUGE_TOKEN_MODULE_VAR_NONE: GAUGE_TOKEN = 0;
pub const GAUGE_TOKEN_TICK18: GAUGE_TOKEN = 1;
pub const GAUGE_TOKEN_GROUND_ALTITUDE: GAUGE_TOKEN = 2;
pub const GAUGE_TOKEN_CLOCK_HOUR: GAUGE_TOKEN = 3;
pub const GAUGE_TOKEN_CLOCK_MINUTE: GAUGE_TOKEN = 4;
pub const GAUGE_TOKEN_CLOCK_SECOND: GAUGE_TOKEN = 5;
pub const GAUGE_TOKEN_ZULU_HOUR: GAUGE_TOKEN = 6;
pub const GAUGE_TOKEN_ZULU_MINUTE: GAUGE_TOKEN = 7;
pub const GAUGE_TOKEN_ZULU_DAY: GAUGE_TOKEN = 8;
pub const GAUGE_TOKEN_ZULU_YEAR: GAUGE_TOKEN = 9;
pub const GAUGE_TOKEN_PANEL_LIGHTS: GAUGE_TOKEN = 10;
pub const GAUGE_TOKEN_STROBE_LIGHTS: GAUGE_TOKEN = 11;
pub const GAUGE_TOKEN_STROBE_FLASH: GAUGE_TOKEN = 12;
pub const GAUGE_TOKEN_PITOT_HEAT: GAUGE_TOKEN = 13;
pub const GAUGE_TOKEN_LANDING_LIGHTS: GAUGE_TOKEN = 14;
pub const GAUGE_TOKEN_SMOKE_ENABLE: GAUGE_TOKEN = 15;
pub const GAUGE_TOKEN_ADF_FREQUENCY: GAUGE_TOKEN = 16;
pub const GAUGE_TOKEN_ADF_500_HZ_TUNABLE: GAUGE_TOKEN = 17;
pub const GAUGE_TOKEN_ADF_EXTENDED_FREQUENCY: GAUGE_TOKEN = 18;
pub const GAUGE_TOKEN_ADF_IDENTITY: GAUGE_TOKEN = 19;
pub const GAUGE_TOKEN_ADF_SIGNAL_STRENGTH: GAUGE_TOKEN = 20;
pub const GAUGE_TOKEN_ADF_MORSE_IDENT: GAUGE_TOKEN = 21;
pub const GAUGE_TOKEN_ADF_CARD_RADIAL: GAUGE_TOKEN = 22;
pub const GAUGE_TOKEN_COM_FREQUENCY: GAUGE_TOKEN = 23;
pub const GAUGE_TOKEN_NAV1_FREQUENCY: GAUGE_TOKEN = 24;
pub const GAUGE_TOKEN_NAV1_VOR_RADIAL: GAUGE_TOKEN = 25;
pub const GAUGE_TOKEN_NAV1_MORSE_IDENT: GAUGE_TOKEN = 26;
pub const GAUGE_TOKEN_NAV2_FREQUENCY: GAUGE_TOKEN = 27;
pub const GAUGE_TOKEN_NAV2_VOR_RADIAL: GAUGE_TOKEN = 28;
pub const GAUGE_TOKEN_NAV2_MORSE_IDENT: GAUGE_TOKEN = 29;
pub const GAUGE_TOKEN_DME1_DISPLAY_TYPE: GAUGE_TOKEN = 30;
pub const GAUGE_TOKEN_DME1_DISTANCE: GAUGE_TOKEN = 31;
pub const GAUGE_TOKEN_DME1_SPEED: GAUGE_TOKEN = 32;
pub const GAUGE_TOKEN_DME1_MORSE_IDENT: GAUGE_TOKEN = 33;
pub const GAUGE_TOKEN_DME2_DISPLAY_TYPE: GAUGE_TOKEN = 34;
pub const GAUGE_TOKEN_DME2_DISTANCE: GAUGE_TOKEN = 35;
pub const GAUGE_TOKEN_DME2_SPEED: GAUGE_TOKEN = 36;
pub const GAUGE_TOKEN_DME2_MORSE_IDENT: GAUGE_TOKEN = 37;
pub const GAUGE_TOKEN_TRANSPONDER_CODE: GAUGE_TOKEN = 38;
pub const GAUGE_TOKEN_ADF_NEEDLE: GAUGE_TOKEN = 39;
pub const GAUGE_TOKEN_VOR1_NEEDLE: GAUGE_TOKEN = 40;
pub const GAUGE_TOKEN_VOR1_GS_NEEDLE: GAUGE_TOKEN = 41;
pub const GAUGE_TOKEN_VOR1_BACK_COURSE_FLAGS: GAUGE_TOKEN = 42;
pub const GAUGE_TOKEN_VOR1_TF_FLAG: GAUGE_TOKEN = 43;
pub const GAUGE_TOKEN_VOR1_GS_FLAG: GAUGE_TOKEN = 44;
pub const GAUGE_TOKEN_VOR1_OBI: GAUGE_TOKEN = 45;
pub const GAUGE_TOKEN_VOR1_CODE: GAUGE_TOKEN = 46;
pub const GAUGE_TOKEN_VOR1_IDENTITY: GAUGE_TOKEN = 47;
pub const GAUGE_TOKEN_VOR1_MAG_VAR: GAUGE_TOKEN = 48;
pub const GAUGE_TOKEN_VOR1_SIGNAL_STRENGTH: GAUGE_TOKEN = 49;
pub const GAUGE_TOKEN_VOR2_NEEDLE: GAUGE_TOKEN = 50;
pub const GAUGE_TOKEN_VOR2_BACK_COURSE_FLAGS: GAUGE_TOKEN = 51;
pub const GAUGE_TOKEN_VOR2_TF_FLAG: GAUGE_TOKEN = 52;
pub const GAUGE_TOKEN_VOR2_GS_FLAG: GAUGE_TOKEN = 53;
pub const GAUGE_TOKEN_VOR2_OBI: GAUGE_TOKEN = 54;
pub const GAUGE_TOKEN_VOR2_CODE: GAUGE_TOKEN = 55;
pub const GAUGE_TOKEN_VOR2_IDENTITY: GAUGE_TOKEN = 56;
pub const GAUGE_TOKEN_VOR2_MAG_VAR: GAUGE_TOKEN = 57;
pub const GAUGE_TOKEN_VOR2_SIGNAL_STRENGTH: GAUGE_TOKEN = 58;
pub const GAUGE_TOKEN_VOR2_BEARING_DEGREES: GAUGE_TOKEN = 59;
pub const GAUGE_TOKEN_AIRCRAFT_ON_GROUND: GAUGE_TOKEN = 60;
pub const GAUGE_TOKEN_AIRSPEED: GAUGE_TOKEN = 61;
pub const GAUGE_TOKEN_AIRSPEED_TRUE_CALIBRATE: GAUGE_TOKEN = 62;
pub const GAUGE_TOKEN_BARBER_POLE_ASPD: GAUGE_TOKEN = 63;
pub const GAUGE_TOKEN_MACH: GAUGE_TOKEN = 64;
pub const GAUGE_TOKEN_VERTICAL_SPEED: GAUGE_TOKEN = 65;
pub const GAUGE_TOKEN_MACH_MAX_OPERATE: GAUGE_TOKEN = 66;
pub const GAUGE_TOKEN_STALL_WARNING: GAUGE_TOKEN = 67;
pub const GAUGE_TOKEN_OVERSPEED_WARNING: GAUGE_TOKEN = 68;
pub const GAUGE_TOKEN_TURN_COORDINATOR_BALL_POS: GAUGE_TOKEN = 69;
pub const GAUGE_TOKEN_DELTA_HEADING_RATE: GAUGE_TOKEN = 70;
pub const GAUGE_TOKEN_PLANE_LATITUDE: GAUGE_TOKEN = 71;
pub const GAUGE_TOKEN_PLANE_LONGITUDE: GAUGE_TOKEN = 72;
pub const GAUGE_TOKEN_PLANE_ALTITUDE: GAUGE_TOKEN = 73;
pub const GAUGE_TOKEN_ALT_FROM_BAROMETRIC_PRESSURE: GAUGE_TOKEN = 74;
pub const GAUGE_TOKEN_KOHLSMAN_SETTING_MB: GAUGE_TOKEN = 75;
pub const GAUGE_TOKEN_KOHLSMAN_SETTING_HG: GAUGE_TOKEN = 76;
pub const GAUGE_TOKEN_PLANE_PITCH_DEGREES: GAUGE_TOKEN = 77;
pub const GAUGE_TOKEN_ATTITUDE_INDICATOR_PITCH_DEGREES: GAUGE_TOKEN = 78;
pub const GAUGE_TOKEN_PLANE_BANK_DEGREES: GAUGE_TOKEN = 79;
pub const GAUGE_TOKEN_ATTITUDE_INDICATOR_BANK_DEGREES: GAUGE_TOKEN = 80;
pub const GAUGE_TOKEN_PLANE_HEADING_DEGREES_MAGNETIC: GAUGE_TOKEN = 81;
pub const GAUGE_TOKEN_MAGNETIC_VAR: GAUGE_TOKEN = 82;
pub const GAUGE_TOKEN_WHISKEY_COMPASS_DEGREES: GAUGE_TOKEN = 83;
pub const GAUGE_TOKEN_PLANE_HEADING_DEGREES_GYRO: GAUGE_TOKEN = 84;
pub const GAUGE_TOKEN_GYRO_DRIFT_ERROR: GAUGE_TOKEN = 85;
pub const GAUGE_TOKEN_PLANE_HEADING_DEGREES_TRUE: GAUGE_TOKEN = 86;
pub const GAUGE_TOKEN_AIRCRAFT_AUTOPILOT_AVAILABLE: GAUGE_TOKEN = 87;
pub const GAUGE_TOKEN_AIRCRAFT_FLAPS_AVAILABLE: GAUGE_TOKEN = 88;
pub const GAUGE_TOKEN_AIRCRAFT_STALL_HORN_AVAILABLE: GAUGE_TOKEN = 89;
pub const GAUGE_TOKEN_AIRCRAFT_ENGINE_MIXTURE_AVAILABLE: GAUGE_TOKEN = 90;
pub const GAUGE_TOKEN_AIRCRAFT_CARB_HEAT_AVAILABLE: GAUGE_TOKEN = 91;
pub const GAUGE_TOKEN_AIRCRAFT_SPOILER_AVAILABLE: GAUGE_TOKEN = 92;
pub const GAUGE_TOKEN_AIRCRAFT_IS_TAIL_DRAGGER: GAUGE_TOKEN = 93;
pub const GAUGE_TOKEN_AIRCRAFT_STROBES_AVAILABLE: GAUGE_TOKEN = 94;
pub const GAUGE_TOKEN_AIRCRAFT_PROP_TYPE_AVAILABLE: GAUGE_TOKEN = 95;
pub const GAUGE_TOKEN_AIRCRAFT_TOE_BRAKES_AVAILABLE: GAUGE_TOKEN = 96;
pub const GAUGE_TOKEN_AIRCRAFT_NAV1_AVAILABLE: GAUGE_TOKEN = 97;
pub const GAUGE_TOKEN_AIRCRAFT_NAV2_AVAILABLE: GAUGE_TOKEN = 98;
pub const GAUGE_TOKEN_AIRCRAFT_NAV1_OBS_AVAILABLE: GAUGE_TOKEN = 99;
pub const GAUGE_TOKEN_AIRCRAFT_NAV2_OBS_AVAILABLE: GAUGE_TOKEN = 100;
pub const GAUGE_TOKEN_AIRCRAFT_VOR2_GAUGE_AVAILABLE: GAUGE_TOKEN = 101;
pub const GAUGE_TOKEN_AIRCRAFT_GYRO_DRIFT_AVAILABLE: GAUGE_TOKEN = 102;
pub const GAUGE_TOKEN_AUTOPILOT_ACTIVE: GAUGE_TOKEN = 103;
pub const GAUGE_TOKEN_AUTOPILOT_WING_LEVELER: GAUGE_TOKEN = 104;
pub const GAUGE_TOKEN_AUTOPILOT_NAV1_LOCK: GAUGE_TOKEN = 105;
pub const GAUGE_TOKEN_AUTOPILOT_HEADING_LOCK: GAUGE_TOKEN = 106;
pub const GAUGE_TOKEN_AUTOPILOT_HEADING_LOCK_DIR: GAUGE_TOKEN = 107;
pub const GAUGE_TOKEN_AUTOPILOT_ALTITUDE_LOCK: GAUGE_TOKEN = 108;
pub const GAUGE_TOKEN_AUTOPILOT_ALTITUDE_LOCK_VAR: GAUGE_TOKEN = 109;
pub const GAUGE_TOKEN_AUTOPILOT_ATTITUDE_HOLD: GAUGE_TOKEN = 110;
pub const GAUGE_TOKEN_AUTOPILOT_GLIDESLOPE_HOLD: GAUGE_TOKEN = 111;
pub const GAUGE_TOKEN_AUTOPILOT_APROACH_HOLD: GAUGE_TOKEN = 112;
pub const GAUGE_TOKEN_AUTOPILOT_BACKCOURSE_HOLD: GAUGE_TOKEN = 113;
pub const GAUGE_TOKEN_AUTOPILOT_YAW_DAMPER: GAUGE_TOKEN = 114;
pub const GAUGE_TOKEN_AUTOPILOT_AIRSPEED_HOLD: GAUGE_TOKEN = 115;
pub const GAUGE_TOKEN_AUTOPILOT_AIRSPEED_HOLD_VAR: GAUGE_TOKEN = 116;
pub const GAUGE_TOKEN_AUTOPILOT_MACH_HOLD: GAUGE_TOKEN = 117;
pub const GAUGE_TOKEN_AUTOPILOT_MACH_HOLD_VAR: GAUGE_TOKEN = 118;
pub const GAUGE_TOKEN_AUTOPILOT_VERTICAL_HOLD: GAUGE_TOKEN = 119;
pub const GAUGE_TOKEN_AUTOPILOT_VERTICAL_HOLD_VAR: GAUGE_TOKEN = 120;
pub const GAUGE_TOKEN_AUTOPILOT_ALTITUDE_MANUALLY_TUNABLE: GAUGE_TOKEN = 121;
pub const GAUGE_TOKEN_AUTOPILOT_HEADING_MANUALLY_TUNABLE: GAUGE_TOKEN = 122;
pub const GAUGE_TOKEN_AUTOPILOT_AUTO_THROTTLE_ARM: GAUGE_TOKEN = 123;
pub const GAUGE_TOKEN_AUTOPILOT_TAKEOFF_POWER_ACTIVE: GAUGE_TOKEN = 124;
pub const GAUGE_TOKEN_ENGINE_RPM_HOLD: GAUGE_TOKEN = 125;
pub const GAUGE_TOKEN_ENGINE_CONTROL_SELECT: GAUGE_TOKEN = 126;
pub const GAUGE_TOKEN_ENGINE1: GAUGE_TOKEN = 127;
pub const GAUGE_TOKEN_ENGINE1_THROTTLE_LEVER_POS: GAUGE_TOKEN = 128;
pub const GAUGE_TOKEN_ENGINE1_PROPELLER_LEVER_POS: GAUGE_TOKEN = 129;
pub const GAUGE_TOKEN_ENGINE1_MIXTURE_LEVER_POS: GAUGE_TOKEN = 130;
pub const GAUGE_TOKEN_ENGINE1_COMBUSTION: GAUGE_TOKEN = 131;
pub const GAUGE_TOKEN_ENGINE1_STARTER_SWITCH_POS: GAUGE_TOKEN = 132;
pub const GAUGE_TOKEN_ENGINE1_MAGNETO_LEFT: GAUGE_TOKEN = 133;
pub const GAUGE_TOKEN_ENGINE1_MAGNETO_RIGHT: GAUGE_TOKEN = 134;
pub const GAUGE_TOKEN_ENGINE1_N1_RPM: GAUGE_TOKEN = 135;
pub const GAUGE_TOKEN_ENGINE1_N2_RPM: GAUGE_TOKEN = 136;
pub const GAUGE_TOKEN_ENGINE1_FF_GPH: GAUGE_TOKEN = 137;
pub const GAUGE_TOKEN_ENGINE1_FF_PPH: GAUGE_TOKEN = 138;
pub const GAUGE_TOKEN_ENGINE1_FF_PPH_SSL: GAUGE_TOKEN = 139;
pub const GAUGE_TOKEN_ENGINE1_TORQUE: GAUGE_TOKEN = 140;
pub const GAUGE_TOKEN_ENGINE1_ANTI_ICE_SWITCH: GAUGE_TOKEN = 141;
pub const GAUGE_TOKEN_ENGINE1_PRESSURE_RATIO: GAUGE_TOKEN = 142;
pub const GAUGE_TOKEN_ENGINE1_PRESSURE_BUG_POS: GAUGE_TOKEN = 143;
pub const GAUGE_TOKEN_ENGINE1_EGT: GAUGE_TOKEN = 144;
pub const GAUGE_TOKEN_ENGINE1_EGT_BUG_POS: GAUGE_TOKEN = 145;
pub const GAUGE_TOKEN_ENGINE1_CHT: GAUGE_TOKEN = 146;
pub const GAUGE_TOKEN_ENGINE1_OIL_TEMPERATURE: GAUGE_TOKEN = 147;
pub const GAUGE_TOKEN_ENGINE1_OIL_PRESSURE: GAUGE_TOKEN = 148;
pub const GAUGE_TOKEN_ENGINE1_OIL_QUANTITY: GAUGE_TOKEN = 149;
pub const GAUGE_TOKEN_ENGINE1_HYDRAULIC_PRESSURE: GAUGE_TOKEN = 150;
pub const GAUGE_TOKEN_ENGINE1_HYDRAULIC_QUANTITY: GAUGE_TOKEN = 151;
pub const GAUGE_TOKEN_ENGINE1_MANIFOLD_PRESSURE: GAUGE_TOKEN = 152;
pub const GAUGE_TOKEN_ENGINE1_ENGINE_VIBRATION: GAUGE_TOKEN = 153;
pub const GAUGE_TOKEN_ENGINE1_RPM_SCALER: GAUGE_TOKEN = 154;
pub const GAUGE_TOKEN_ENGINE1_TURBINE_TEMPERATURE: GAUGE_TOKEN = 155;
pub const GAUGE_TOKEN_ENGINE1_TORQUE_PERCENT: GAUGE_TOKEN = 156;
pub const GAUGE_TOKEN_ENGINE1_FUEL_PRESSURE: GAUGE_TOKEN = 157;
pub const GAUGE_TOKEN_ENGINE1_ELECTRICAL_LOAD: GAUGE_TOKEN = 158;
pub const GAUGE_TOKEN_ENGINE1_TRANSMISSION_PRESSURE: GAUGE_TOKEN = 159;
pub const GAUGE_TOKEN_ENGINE1_TRANSMISSION_TEMPERATURE: GAUGE_TOKEN = 160;
pub const GAUGE_TOKEN_ENGINE1_ROTOR_RPM: GAUGE_TOKEN = 161;
pub const GAUGE_TOKEN_ENGINE2: GAUGE_TOKEN = 162;
pub const GAUGE_TOKEN_ENGINE2_THROTTLE_LEVER_POS: GAUGE_TOKEN = 163;
pub const GAUGE_TOKEN_ENGINE2_PROPELLER_LEVER_POS: GAUGE_TOKEN = 164;
pub const GAUGE_TOKEN_ENGINE2_MIXTURE_LEVER_POS: GAUGE_TOKEN = 165;
pub const GAUGE_TOKEN_ENGINE2_COMBUSTION: GAUGE_TOKEN = 166;
pub const GAUGE_TOKEN_ENGINE2_STARTER_SWITCH_POS: GAUGE_TOKEN = 167;
pub const GAUGE_TOKEN_ENGINE2_MAGNETO_LEFT: GAUGE_TOKEN = 168;
pub const GAUGE_TOKEN_ENGINE2_MAGNETO_RIGHT: GAUGE_TOKEN = 169;
pub const GAUGE_TOKEN_ENGINE2_N1_RPM: GAUGE_TOKEN = 170;
pub const GAUGE_TOKEN_ENGINE2_N2_RPM: GAUGE_TOKEN = 171;
pub const GAUGE_TOKEN_ENGINE2_FF_GPH: GAUGE_TOKEN = 172;
pub const GAUGE_TOKEN_ENGINE2_FF_PPH: GAUGE_TOKEN = 173;
pub const GAUGE_TOKEN_ENGINE2_FF_PPH_SSL: GAUGE_TOKEN = 174;
pub const GAUGE_TOKEN_ENGINE2_TORQUE: GAUGE_TOKEN = 175;
pub const GAUGE_TOKEN_ENGINE2_ANTI_ICE_SWITCH: GAUGE_TOKEN = 176;
pub const GAUGE_TOKEN_ENGINE2_PRESSURE_RATIO: GAUGE_TOKEN = 177;
pub const GAUGE_TOKEN_ENGINE2_PRESSURE_BUG_POS: GAUGE_TOKEN = 178;
pub const GAUGE_TOKEN_ENGINE2_EGT: GAUGE_TOKEN = 179;
pub const GAUGE_TOKEN_ENGINE2_EGT_BUG_POS: GAUGE_TOKEN = 180;
pub const GAUGE_TOKEN_ENGINE2_CHT: GAUGE_TOKEN = 181;
pub const GAUGE_TOKEN_ENGINE2_OIL_TEMPERATURE: GAUGE_TOKEN = 182;
pub const GAUGE_TOKEN_ENGINE2_OIL_PRESSURE: GAUGE_TOKEN = 183;
pub const GAUGE_TOKEN_ENGINE2_OIL_QUANTITY: GAUGE_TOKEN = 184;
pub const GAUGE_TOKEN_ENGINE2_HYDRAULIC_PRESSURE: GAUGE_TOKEN = 185;
pub const GAUGE_TOKEN_ENGINE2_HYDRAULIC_QUANTITY: GAUGE_TOKEN = 186;
pub const GAUGE_TOKEN_ENGINE2_MANIFOLD_PRESSURE: GAUGE_TOKEN = 187;
pub const GAUGE_TOKEN_ENGINE2_ENGINE_VIBRATION: GAUGE_TOKEN = 188;
pub const GAUGE_TOKEN_ENGINE2_RPM_SCALER: GAUGE_TOKEN = 189;
pub const GAUGE_TOKEN_ENGINE2_TURBINE_TEMPERATURE: GAUGE_TOKEN = 190;
pub const GAUGE_TOKEN_ENGINE2_TORQUE_PERCENT: GAUGE_TOKEN = 191;
pub const GAUGE_TOKEN_ENGINE2_FUEL_PRESSURE: GAUGE_TOKEN = 192;
pub const GAUGE_TOKEN_ENGINE2_ELECTRICAL_LOAD: GAUGE_TOKEN = 193;
pub const GAUGE_TOKEN_ENGINE2_TRANSMISSION_PRESSURE: GAUGE_TOKEN = 194;
pub const GAUGE_TOKEN_ENGINE2_TRANSMISSION_TEMPERATURE: GAUGE_TOKEN = 195;
pub const GAUGE_TOKEN_ENGINE2_ROTOR_RPM: GAUGE_TOKEN = 196;
pub const GAUGE_TOKEN_ENGINE3: GAUGE_TOKEN = 197;
pub const GAUGE_TOKEN_ENGINE3_THROTTLE_LEVER_POS: GAUGE_TOKEN = 198;
pub const GAUGE_TOKEN_ENGINE3_PROPELLER_LEVER_POS: GAUGE_TOKEN = 199;
pub const GAUGE_TOKEN_ENGINE3_MIXTURE_LEVER_POS: GAUGE_TOKEN = 200;
pub const GAUGE_TOKEN_ENGINE3_COMBUSTION: GAUGE_TOKEN = 201;
pub const GAUGE_TOKEN_ENGINE3_STARTER_SWITCH_POS: GAUGE_TOKEN = 202;
pub const GAUGE_TOKEN_ENGINE3_MAGNETO_LEFT: GAUGE_TOKEN = 203;
pub const GAUGE_TOKEN_ENGINE3_MAGNETO_RIGHT: GAUGE_TOKEN = 204;
pub const GAUGE_TOKEN_ENGINE3_N1_RPM: GAUGE_TOKEN = 205;
pub const GAUGE_TOKEN_ENGINE3_N2_RPM: GAUGE_TOKEN = 206;
pub const GAUGE_TOKEN_ENGINE3_FF_GPH: GAUGE_TOKEN = 207;
pub const GAUGE_TOKEN_ENGINE3_FF_PPH: GAUGE_TOKEN = 208;
pub const GAUGE_TOKEN_ENGINE3_FF_PPH_SSL: GAUGE_TOKEN = 209;
pub const GAUGE_TOKEN_ENGINE3_TORQUE: GAUGE_TOKEN = 210;
pub const GAUGE_TOKEN_ENGINE3_ANTI_ICE_SWITCH: GAUGE_TOKEN = 211;
pub const GAUGE_TOKEN_ENGINE3_PRESSURE_RATIO: GAUGE_TOKEN = 212;
pub const GAUGE_TOKEN_ENGINE3_PRESSURE_BUG_POS: GAUGE_TOKEN = 213;
pub const GAUGE_TOKEN_ENGINE3_EGT: GAUGE_TOKEN = 214;
pub const GAUGE_TOKEN_ENGINE3_EGT_BUG_POS: GAUGE_TOKEN = 215;
pub const GAUGE_TOKEN_ENGINE3_CHT: GAUGE_TOKEN = 216;
pub const GAUGE_TOKEN_ENGINE3_OIL_TEMPERATURE: GAUGE_TOKEN = 217;
pub const GAUGE_TOKEN_ENGINE3_OIL_PRESSURE: GAUGE_TOKEN = 218;
pub const GAUGE_TOKEN_ENGINE3_OIL_QUANTITY: GAUGE_TOKEN = 219;
pub const GAUGE_TOKEN_ENGINE3_HYDRAULIC_PRESSURE: GAUGE_TOKEN = 220;
pub const GAUGE_TOKEN_ENGINE3_HYDRAULIC_QUANTITY: GAUGE_TOKEN = 221;
pub const GAUGE_TOKEN_ENGINE3_MANIFOLD_PRESSURE: GAUGE_TOKEN = 222;
pub const GAUGE_TOKEN_ENGINE3_ENGINE_VIBRATION: GAUGE_TOKEN = 223;
pub const GAUGE_TOKEN_ENGINE3_RPM_SCALER: GAUGE_TOKEN = 224;
pub const GAUGE_TOKEN_ENGINE3_TURBINE_TEMPERATURE: GAUGE_TOKEN = 225;
pub const GAUGE_TOKEN_ENGINE3_TORQUE_PERCENT: GAUGE_TOKEN = 226;
pub const GAUGE_TOKEN_ENGINE3_FUEL_PRESSURE: GAUGE_TOKEN = 227;
pub const GAUGE_TOKEN_ENGINE3_ELECTRICAL_LOAD: GAUGE_TOKEN = 228;
pub const GAUGE_TOKEN_ENGINE3_TRANSMISSION_PRESSURE: GAUGE_TOKEN = 229;
pub const GAUGE_TOKEN_ENGINE3_TRANSMISSION_TEMPERATURE: GAUGE_TOKEN = 230;
pub const GAUGE_TOKEN_ENGINE3_ROTOR_RPM: GAUGE_TOKEN = 231;
pub const GAUGE_TOKEN_ENGINE4: GAUGE_TOKEN = 232;
pub const GAUGE_TOKEN_ENGINE4_THROTTLE_LEVER_POS: GAUGE_TOKEN = 233;
pub const GAUGE_TOKEN_ENGINE4_PROPELLER_LEVER_POS: GAUGE_TOKEN = 234;
pub const GAUGE_TOKEN_ENGINE4_MIXTURE_LEVER_POS: GAUGE_TOKEN = 235;
pub const GAUGE_TOKEN_ENGINE4_COMBUSTION: GAUGE_TOKEN = 236;
pub const GAUGE_TOKEN_ENGINE4_STARTER_SWITCH_POS: GAUGE_TOKEN = 237;
pub const GAUGE_TOKEN_ENGINE4_MAGNETO_LEFT: GAUGE_TOKEN = 238;
pub const GAUGE_TOKEN_ENGINE4_MAGNETO_RIGHT: GAUGE_TOKEN = 239;
pub const GAUGE_TOKEN_ENGINE4_N1_RPM: GAUGE_TOKEN = 240;
pub const GAUGE_TOKEN_ENGINE4_N2_RPM: GAUGE_TOKEN = 241;
pub const GAUGE_TOKEN_ENGINE4_FF_GPH: GAUGE_TOKEN = 242;
pub const GAUGE_TOKEN_ENGINE4_FF_PPH: GAUGE_TOKEN = 243;
pub const GAUGE_TOKEN_ENGINE4_FF_PPH_SSL: GAUGE_TOKEN = 244;
pub const GAUGE_TOKEN_ENGINE4_TORQUE: GAUGE_TOKEN = 245;
pub const GAUGE_TOKEN_ENGINE4_ANTI_ICE_SWITCH: GAUGE_TOKEN = 246;
pub const GAUGE_TOKEN_ENGINE4_PRESSURE_RATIO: GAUGE_TOKEN = 247;
pub const GAUGE_TOKEN_ENGINE4_PRESSURE_BUG_POS: GAUGE_TOKEN = 248;
pub const GAUGE_TOKEN_ENGINE4_EGT: GAUGE_TOKEN = 249;
pub const GAUGE_TOKEN_ENGINE4_EGT_BUG_POS: GAUGE_TOKEN = 250;
pub const GAUGE_TOKEN_ENGINE4_CHT: GAUGE_TOKEN = 251;
pub const GAUGE_TOKEN_ENGINE4_OIL_TEMPERATURE: GAUGE_TOKEN = 252;
pub const GAUGE_TOKEN_ENGINE4_OIL_PRESSURE: GAUGE_TOKEN = 253;
pub const GAUGE_TOKEN_ENGINE4_OIL_QUANTITY: GAUGE_TOKEN = 254;
pub const GAUGE_TOKEN_ENGINE4_HYDRAULIC_PRESSURE: GAUGE_TOKEN = 255;
pub const GAUGE_TOKEN_ENGINE4_HYDRAULIC_QUANTITY: GAUGE_TOKEN = 256;
pub const GAUGE_TOKEN_ENGINE4_MANIFOLD_PRESSURE: GAUGE_TOKEN = 257;
pub const GAUGE_TOKEN_ENGINE4_ENGINE_VIBRATION: GAUGE_TOKEN = 258;
pub const GAUGE_TOKEN_ENGINE4_RPM_SCALER: GAUGE_TOKEN = 259;
pub const GAUGE_TOKEN_ENGINE4_TURBINE_TEMPERATURE: GAUGE_TOKEN = 260;
pub const GAUGE_TOKEN_ENGINE4_TORQUE_PERCENT: GAUGE_TOKEN = 261;
pub const GAUGE_TOKEN_ENGINE4_FUEL_PRESSURE: GAUGE_TOKEN = 262;
pub const GAUGE_TOKEN_ENGINE4_ELECTRICAL_LOAD: GAUGE_TOKEN = 263;
pub const GAUGE_TOKEN_ENGINE4_TRANSMISSION_PRESSURE: GAUGE_TOKEN = 264;
pub const GAUGE_TOKEN_ENGINE4_TRANSMISSION_TEMPERATURE: GAUGE_TOKEN = 265;
pub const GAUGE_TOKEN_ENGINE4_ROTOR_RPM: GAUGE_TOKEN = 266;
pub const GAUGE_TOKEN_NUMBER_OF_ENGINES: GAUGE_TOKEN = 267;
pub const GAUGE_TOKEN_PROP_ADVANCE_SELECTION: GAUGE_TOKEN = 268;
pub const GAUGE_TOKEN_THROTTLE_LOWER_LIMIT: GAUGE_TOKEN = 269;
pub const GAUGE_TOKEN_OIL_QUANTITY_TOTAL: GAUGE_TOKEN = 270;
pub const GAUGE_TOKEN_SYSTEMS_AVAILABLE: GAUGE_TOKEN = 271;
pub const GAUGE_TOKEN_INSTRUMENTS_AVAILABLE: GAUGE_TOKEN = 272;
pub const GAUGE_TOKEN_PP_ADF: GAUGE_TOKEN = 273;
pub const GAUGE_TOKEN_PP_AIR: GAUGE_TOKEN = 274;
pub const GAUGE_TOKEN_PP_ALTIM: GAUGE_TOKEN = 275;
pub const GAUGE_TOKEN_PP_ATTITUDE: GAUGE_TOKEN = 276;
pub const GAUGE_TOKEN_PP_COM: GAUGE_TOKEN = 277;
pub const GAUGE_TOKEN_PP_COMPASS: GAUGE_TOKEN = 278;
pub const GAUGE_TOKEN_PP_ELECT: GAUGE_TOKEN = 279;
pub const GAUGE_TOKEN_PP_ENGINE: GAUGE_TOKEN = 280;
pub const GAUGE_TOKEN_PP_FUEL_IND: GAUGE_TOKEN = 281;
pub const GAUGE_TOKEN_PP_HEADING: GAUGE_TOKEN = 282;
pub const GAUGE_TOKEN_PP_VERT_VEL: GAUGE_TOKEN = 283;
pub const GAUGE_TOKEN_PP_XPNDR: GAUGE_TOKEN = 284;
pub const GAUGE_TOKEN_PP_NAV: GAUGE_TOKEN = 285;
pub const GAUGE_TOKEN_PP_PITOT: GAUGE_TOKEN = 286;
pub const GAUGE_TOKEN_PP_TURN_COORD: GAUGE_TOKEN = 287;
pub const GAUGE_TOKEN_PP_VACUUM: GAUGE_TOKEN = 288;
pub const GAUGE_TOKEN_FUEL_TANK_CENTER_LEVEL: GAUGE_TOKEN = 289;
pub const GAUGE_TOKEN_FUEL_TANK_CENTER_CAPACITY: GAUGE_TOKEN = 290;
pub const GAUGE_TOKEN_FUEL_TANK_LEFT_MAIN_LEVEL: GAUGE_TOKEN = 291;
pub const GAUGE_TOKEN_FUEL_TANK_LEFT_MAIN_CAPACITY: GAUGE_TOKEN = 292;
pub const GAUGE_TOKEN_FUEL_TANK_LEFT_AUX_LEVEL: GAUGE_TOKEN = 293;
pub const GAUGE_TOKEN_FUEL_TANK_LEFT_AUX_CAPACITY: GAUGE_TOKEN = 294;
pub const GAUGE_TOKEN_FUEL_TANK_LEFT_TIP_LEVEL: GAUGE_TOKEN = 295;
pub const GAUGE_TOKEN_FUEL_TANK_LEFT_TIP_CAPACITY: GAUGE_TOKEN = 296;
pub const GAUGE_TOKEN_FUEL_TANK_RIGHT_MAIN_LEVEL: GAUGE_TOKEN = 297;
pub const GAUGE_TOKEN_FUEL_TANK_RIGHT_MAIN_CAPACITY: GAUGE_TOKEN = 298;
pub const GAUGE_TOKEN_FUEL_TANK_RIGHT_AUX_LEVEL: GAUGE_TOKEN = 299;
pub const GAUGE_TOKEN_FUEL_TANK_RIGHT_AUX_CAPACITY: GAUGE_TOKEN = 300;
pub const GAUGE_TOKEN_FUEL_TANK_RIGHT_TIP_LEVEL: GAUGE_TOKEN = 301;
pub const GAUGE_TOKEN_FUEL_TANK_RIGHT_TIP_CAPACITY: GAUGE_TOKEN = 302;
pub const GAUGE_TOKEN_FUEL_QUANTITY_RIGHT: GAUGE_TOKEN = 303;
pub const GAUGE_TOKEN_FUEL_QUANTITY_LEFT: GAUGE_TOKEN = 304;
pub const GAUGE_TOKEN_FUEL_QUANTITY_CENTER: GAUGE_TOKEN = 305;
pub const GAUGE_TOKEN_FUEL_WEGHT_PER_GALLON: GAUGE_TOKEN = 306;
pub const GAUGE_TOKEN_FUEL_TANK_SELECTOR: GAUGE_TOKEN = 307;
pub const GAUGE_TOKEN_CROSS_FEED_SELECTOR: GAUGE_TOKEN = 308;
pub const GAUGE_TOKEN_YOKE_POS_Y: GAUGE_TOKEN = 309;
pub const GAUGE_TOKEN_YOKE_IND_Y: GAUGE_TOKEN = 310;
pub const GAUGE_TOKEN_YOKE_POS_X: GAUGE_TOKEN = 311;
pub const GAUGE_TOKEN_YOKE_IND_X: GAUGE_TOKEN = 312;
pub const GAUGE_TOKEN_AILERON_POS: GAUGE_TOKEN = 313;
pub const GAUGE_TOKEN_RUDDER_PEDAL_POS: GAUGE_TOKEN = 314;
pub const GAUGE_TOKEN_RUDDER_PEDAL_IND: GAUGE_TOKEN = 315;
pub const GAUGE_TOKEN_RUDDER_POS: GAUGE_TOKEN = 316;
pub const GAUGE_TOKEN_ELEVATOR_POS: GAUGE_TOKEN = 317;
pub const GAUGE_TOKEN_ELEVATOR_TRIM_POS: GAUGE_TOKEN = 318;
pub const GAUGE_TOKEN_ELEVATOR_TRIM_IND: GAUGE_TOKEN = 319;
pub const GAUGE_TOKEN_BRAKES_LEFT_POS: GAUGE_TOKEN = 320;
pub const GAUGE_TOKEN_BRAKES_RIGHT_POS: GAUGE_TOKEN = 321;
pub const GAUGE_TOKEN_BRAKE_IND: GAUGE_TOKEN = 322;
pub const GAUGE_TOKEN_PARKING_BRAKE_POS: GAUGE_TOKEN = 323;
pub const GAUGE_TOKEN_SPOILERS_ARMED: GAUGE_TOKEN = 324;
pub const GAUGE_TOKEN_SPOILERS_HANDLE_POS: GAUGE_TOKEN = 325;
pub const GAUGE_TOKEN_SPOILERS_POS_LEFT: GAUGE_TOKEN = 326;
pub const GAUGE_TOKEN_SPOILERS_POS_RIGHT: GAUGE_TOKEN = 327;
pub const GAUGE_TOKEN_FLAPS_HANDLE_POS: GAUGE_TOKEN = 328;
pub const GAUGE_TOKEN_FLAPS_POS_LEFT: GAUGE_TOKEN = 329;
pub const GAUGE_TOKEN_FLAPS_POS_RIGHT: GAUGE_TOKEN = 330;
pub const GAUGE_TOKEN_GEAR_HANDLE_POS: GAUGE_TOKEN = 331;
pub const GAUGE_TOKEN_GEAR_POS_NOSE: GAUGE_TOKEN = 332;
pub const GAUGE_TOKEN_GEAR_POS_LEFT: GAUGE_TOKEN = 333;
pub const GAUGE_TOKEN_GEAR_POS_RIGHT: GAUGE_TOKEN = 334;
pub const GAUGE_TOKEN_DISPLAY_UNITS: GAUGE_TOKEN = 335;
pub const GAUGE_TOKEN_SIM_SPEED: GAUGE_TOKEN = 336;
pub const GAUGE_TOKEN_ZOOM_FACTOR: GAUGE_TOKEN = 337;
pub const GAUGE_TOKEN_REALISM_SENSE: GAUGE_TOKEN = 338;
pub const GAUGE_TOKEN_REALISM_SYSTEMS: GAUGE_TOKEN = 339;
pub const GAUGE_TOKEN_RELIABILITY_SENSE: GAUGE_TOKEN = 340;
pub const GAUGE_TOKEN_AMBIENT_TEMP_DEGREES_C: GAUGE_TOKEN = 341;
pub const GAUGE_TOKEN_AMBIENT_PRES_MBAR: GAUGE_TOKEN = 342;
pub const GAUGE_TOKEN_AMBIENT_WIND_VEL: GAUGE_TOKEN = 343;
pub const GAUGE_TOKEN_AMBIENT_WIND_DIR: GAUGE_TOKEN = 344;
pub const GAUGE_TOKEN_AMBIENT_WINDE: GAUGE_TOKEN = 345;
pub const GAUGE_TOKEN_AMBIENT_WINDN: GAUGE_TOKEN = 346;
pub const GAUGE_TOKEN_AMBIENT_WINDA: GAUGE_TOKEN = 347;
pub const GAUGE_TOKEN_BAROMETRIC_PRESSURE: GAUGE_TOKEN = 348;
pub const GAUGE_TOKEN_ANGLE_OF_ATTACK_INDICATOR: GAUGE_TOKEN = 349;
pub const GAUGE_TOKEN_TOTAL_AIR_TEMP: GAUGE_TOKEN = 350;
pub const GAUGE_TOKEN_G_FORCE: GAUGE_TOKEN = 351;
pub const GAUGE_TOKEN_CHARGING_AMPS: GAUGE_TOKEN = 352;
pub const GAUGE_TOKEN_SUCTION_PRESSURE: GAUGE_TOKEN = 353;
pub const GAUGE_TOKEN_MARKER_BEACON_STATE: GAUGE_TOKEN = 354;
pub const GAUGE_TOKEN_CURRENT_DME: GAUGE_TOKEN = 355;
pub const GAUGE_TOKEN_PANEL_STATE_FLAGS: GAUGE_TOKEN = 356;
pub const GAUGE_TOKEN_GET_GUN_AMMO: GAUGE_TOKEN = 357;
pub const GAUGE_TOKEN_GET_CANNON_AMMO: GAUGE_TOKEN = 358;
pub const GAUGE_TOKEN_GET_ROCKET_AMMO: GAUGE_TOKEN = 359;
pub const GAUGE_TOKEN_GET_BOMB_AMMO: GAUGE_TOKEN = 360;
pub const GAUGE_TOKEN_ENGINE_PRIMER: GAUGE_TOKEN = 361;
pub const GAUGE_TOKEN_COWL_FLAPS: GAUGE_TOKEN = 362;
pub const GAUGE_TOKEN_MASTER_ALTERNATOR: GAUGE_TOKEN = 363;
pub const GAUGE_TOKEN_MASTER_BATTERY: GAUGE_TOKEN = 364;
pub const GAUGE_TOKEN_CARB_HEAT: GAUGE_TOKEN = 365;
pub const GAUGE_TOKEN_FLIGHT_TIME: GAUGE_TOKEN = 366;
pub const GAUGE_TOKEN_FUEL_PUMP: GAUGE_TOKEN = 367;
pub const GAUGE_TOKEN_BEACON_LIGHTS: GAUGE_TOKEN = 368;
pub const GAUGE_TOKEN_TAXI_LIGHTS: GAUGE_TOKEN = 369;
pub const GAUGE_TOKEN_RADIO_STACK_VISIBLE: GAUGE_TOKEN = 370;
pub const GAUGE_TOKEN_HORIZON_BAR_OFFSET: GAUGE_TOKEN = 371;
pub const GAUGE_TOKEN_CURRENT_DME_DISTANCE: GAUGE_TOKEN = 372;
pub const GAUGE_TOKEN_CURRENT_DME_SPEED: GAUGE_TOKEN = 373;
pub const GAUGE_TOKEN_CURRENT_DME_MIN: GAUGE_TOKEN = 374;
pub const GAUGE_TOKEN_WARNING_FUEL: GAUGE_TOKEN = 375;
pub const GAUGE_TOKEN_WARNING_FUEL_L: GAUGE_TOKEN = 376;
pub const GAUGE_TOKEN_WARNING_FUEL_R: GAUGE_TOKEN = 377;
pub const GAUGE_TOKEN_WARNING_VACUUM: GAUGE_TOKEN = 378;
pub const GAUGE_TOKEN_WARNING_VACUUM_L: GAUGE_TOKEN = 379;
pub const GAUGE_TOKEN_WARNING_VACUUM_R: GAUGE_TOKEN = 380;
pub const GAUGE_TOKEN_WARNING_OIL_PSI: GAUGE_TOKEN = 381;
pub const GAUGE_TOKEN_WARNING_VOLTAGE: GAUGE_TOKEN = 382;
pub const GAUGE_TOKEN_FUEL_TANK_CENTER2_LEVEL: GAUGE_TOKEN = 383;
pub const GAUGE_TOKEN_FUEL_TANK_CENTER2_CAPACITY: GAUGE_TOKEN = 384;
pub const GAUGE_TOKEN_FUEL_QUANTITY_CENTER2: GAUGE_TOKEN = 385;
pub const GAUGE_TOKEN_TOTAL_FUEL_QUANTITY_GALLONS: GAUGE_TOKEN = 386;
pub const GAUGE_TOKEN_SELECTED_FUEL_QUANTITY_GALLONS: GAUGE_TOKEN = 387;
pub const GAUGE_TOKEN_SELECTED_FUEL_QUANTITY_LITERS: GAUGE_TOKEN = 388;
pub const GAUGE_TOKEN_SELECTED_FUEL_QUANTITY_PERCENT: GAUGE_TOKEN = 389;
pub const GAUGE_TOKEN_RECIP_ENGINE1_ENGINE_RPM: GAUGE_TOKEN = 390;
pub const GAUGE_TOKEN_RECIP_ENGINE1_MANIFOLD_PRESSURE: GAUGE_TOKEN = 391;
pub const GAUGE_TOKEN_RECIP_ENGINE1_THROTTLE_LEVER_POS: GAUGE_TOKEN = 392;
pub const GAUGE_TOKEN_RECIP_ENGINE1_MIXTURE_LEVER_POS: GAUGE_TOKEN = 393;
pub const GAUGE_TOKEN_RECIP_ENGINE1_PROP_LEVER_POS: GAUGE_TOKEN = 394;
pub const GAUGE_TOKEN_RECIP_ENGINE1_COWL_FLAP_POS: GAUGE_TOKEN = 395;
pub const GAUGE_TOKEN_RECIP_ENGINE1_CARB_HEAT_POS: GAUGE_TOKEN = 396;
pub const GAUGE_TOKEN_RECIP_ENGINE1_ALTERNATE_AIR_POS: GAUGE_TOKEN = 397;
pub const GAUGE_TOKEN_RECIP_ENGINE1_COOLANT_RESERVOIR_PCT: GAUGE_TOKEN = 398;
pub const GAUGE_TOKEN_RECIP_ENGINE1_LEFT_MAG: GAUGE_TOKEN = 399;
pub const GAUGE_TOKEN_RECIP_ENGINE1_RIGHT_MAG: GAUGE_TOKEN = 400;
pub const GAUGE_TOKEN_RECIP_ENGINE1_STARTER: GAUGE_TOKEN = 401;
pub const GAUGE_TOKEN_RECIP_ENGINE1_BRAKE_POWER: GAUGE_TOKEN = 402;
pub const GAUGE_TOKEN_RECIP_ENGINE1_SHAFT_TORQUE: GAUGE_TOKEN = 403;
pub const GAUGE_TOKEN_RECIP_ENGINE1_PROP_TORQUE: GAUGE_TOKEN = 404;
pub const GAUGE_TOKEN_RECIP_ENGINE1_STARTER_TORQUE: GAUGE_TOKEN = 405;
pub const GAUGE_TOKEN_RECIP_ENGINE1_COMBUSTION: GAUGE_TOKEN = 406;
pub const GAUGE_TOKEN_RECIP_ENGINE1_TURBOCHARGER_FAILED: GAUGE_TOKEN = 407;
pub const GAUGE_TOKEN_RECIP_ENGINE1_EMERGENCY_BOOST_ACTIVE: GAUGE_TOKEN = 408;
pub const GAUGE_TOKEN_RECIP_ENGINE1_EMERGENCY_BOOST_ELAPSED_TIME: GAUGE_TOKEN = 409;
pub const GAUGE_TOKEN_RECIP_ENGINE1_WASTEGATE_POS: GAUGE_TOKEN = 410;
pub const GAUGE_TOKEN_RECIP_ENGINE1_PROP_BETA: GAUGE_TOKEN = 411;
pub const GAUGE_TOKEN_RECIP_ENGINE1_THRUST: GAUGE_TOKEN = 412;
pub const GAUGE_TOKEN_RECIP_ENGINE1_EGT_DEGR: GAUGE_TOKEN = 413;
pub const GAUGE_TOKEN_RECIP_ENGINE1_TIT_DEGR: GAUGE_TOKEN = 414;
pub const GAUGE_TOKEN_RECIP_ENGINE1_CHT_DEGR: GAUGE_TOKEN = 415;
pub const GAUGE_TOKEN_RECIP_ENGINE1_OIL_TEMP_DEGR: GAUGE_TOKEN = 416;
pub const GAUGE_TOKEN_RECIP_ENGINE1_RADIATOR_DEGR: GAUGE_TOKEN = 417;
pub const GAUGE_TOKEN_RECIP_ENGINE1_OIL_PRESS_PSF: GAUGE_TOKEN = 418;
pub const GAUGE_TOKEN_RECIP_ENGINE1_OIL_LEAK_PCT: GAUGE_TOKEN = 419;
pub const GAUGE_TOKEN_RECIP_ENGINE1_FUEL_AVAILABLE: GAUGE_TOKEN = 420;
pub const GAUGE_TOKEN_RECIP_ENGINE1_FUELFLOW_PPH: GAUGE_TOKEN = 421;
pub const GAUGE_TOKEN_RECIP_ENGINE1_TANK_SELECTOR: GAUGE_TOKEN = 422;
pub const GAUGE_TOKEN_RECIP_ENGINE1_TANKS_USED: GAUGE_TOKEN = 423;
pub const GAUGE_TOKEN_RECIP_ENGINE1_NUMBER_OF_TANKS_USED: GAUGE_TOKEN = 424;
pub const GAUGE_TOKEN_RECIP_ENGINE1_FUEL_PRESSURE_PSF: GAUGE_TOKEN = 425;
pub const GAUGE_TOKEN_RECIP_ENGINE1_COMBUSTION_SOUND_PCT: GAUGE_TOKEN = 426;
pub const GAUGE_TOKEN_RECIP_ENGINE1_INDUCED_VELOCITY: GAUGE_TOKEN = 427;
pub const GAUGE_TOKEN_RECIP_ENGINE1_DAMAGE_PERCENT: GAUGE_TOKEN = 428;
pub const GAUGE_TOKEN_RECIP_ENGINE2_ENGINE_RPM: GAUGE_TOKEN = 429;
pub const GAUGE_TOKEN_RECIP_ENGINE2_MANIFOLD_PRESSURE: GAUGE_TOKEN = 430;
pub const GAUGE_TOKEN_RECIP_ENGINE2_THROTTLE_LEVER_POS: GAUGE_TOKEN = 431;
pub const GAUGE_TOKEN_RECIP_ENGINE2_MIXTURE_LEVER_POS: GAUGE_TOKEN = 432;
pub const GAUGE_TOKEN_RECIP_ENGINE2_PROP_LEVER_POS: GAUGE_TOKEN = 433;
pub const GAUGE_TOKEN_RECIP_ENGINE2_COWL_FLAP_POS: GAUGE_TOKEN = 434;
pub const GAUGE_TOKEN_RECIP_ENGINE2_CARB_HEAT_POS: GAUGE_TOKEN = 435;
pub const GAUGE_TOKEN_RECIP_ENGINE2_ALTERNATE_AIR_POS: GAUGE_TOKEN = 436;
pub const GAUGE_TOKEN_RECIP_ENGINE2_COOLANT_RESERVOIR_PCT: GAUGE_TOKEN = 437;
pub const GAUGE_TOKEN_RECIP_ENGINE2_LEFT_MAG: GAUGE_TOKEN = 438;
pub const GAUGE_TOKEN_RECIP_ENGINE2_RIGHT_MAG: GAUGE_TOKEN = 439;
pub const GAUGE_TOKEN_RECIP_ENGINE2_STARTER: GAUGE_TOKEN = 440;
pub const GAUGE_TOKEN_RECIP_ENGINE2_BRAKE_POWER: GAUGE_TOKEN = 441;
pub const GAUGE_TOKEN_RECIP_ENGINE2_SHAFT_TORQUE: GAUGE_TOKEN = 442;
pub const GAUGE_TOKEN_RECIP_ENGINE2_PROP_TORQUE: GAUGE_TOKEN = 443;
pub const GAUGE_TOKEN_RECIP_ENGINE2_STARTER_TORQUE: GAUGE_TOKEN = 444;
pub const GAUGE_TOKEN_RECIP_ENGINE2_COMBUSTION: GAUGE_TOKEN = 445;
pub const GAUGE_TOKEN_RECIP_ENGINE2_TURBOCHARGER_FAILED: GAUGE_TOKEN = 446;
pub const GAUGE_TOKEN_RECIP_ENGINE2_EMERGENCY_BOOST_ACTIVE: GAUGE_TOKEN = 447;
pub const GAUGE_TOKEN_RECIP_ENGINE2_EMERGENCY_BOOST_ELAPSED_TIME: GAUGE_TOKEN = 448;
pub const GAUGE_TOKEN_RECIP_ENGINE2_WASTEGATE_POS: GAUGE_TOKEN = 449;
pub const GAUGE_TOKEN_RECIP_ENGINE2_PROP_BETA: GAUGE_TOKEN = 450;
pub const GAUGE_TOKEN_RECIP_ENGINE2_THRUST: GAUGE_TOKEN = 451;
pub const GAUGE_TOKEN_RECIP_ENGINE2_EGT_DEGR: GAUGE_TOKEN = 452;
pub const GAUGE_TOKEN_RECIP_ENGINE2_TIT_DEGR: GAUGE_TOKEN = 453;
pub const GAUGE_TOKEN_RECIP_ENGINE2_CHT_DEGR: GAUGE_TOKEN = 454;
pub const GAUGE_TOKEN_RECIP_ENGINE2_OIL_TEMP_DEGR: GAUGE_TOKEN = 455;
pub const GAUGE_TOKEN_RECIP_ENGINE2_RADIATOR_DEGR: GAUGE_TOKEN = 456;
pub const GAUGE_TOKEN_RECIP_ENGINE2_OIL_PRESS_PSF: GAUGE_TOKEN = 457;
pub const GAUGE_TOKEN_RECIP_ENGINE2_OIL_LEAK_PCT: GAUGE_TOKEN = 458;
pub const GAUGE_TOKEN_RECIP_ENGINE2_FUEL_AVAILABLE: GAUGE_TOKEN = 459;
pub const GAUGE_TOKEN_RECIP_ENGINE2_FUELFLOW_PPH: GAUGE_TOKEN = 460;
pub const GAUGE_TOKEN_RECIP_ENGINE2_TANK_SELECTOR: GAUGE_TOKEN = 461;
pub const GAUGE_TOKEN_RECIP_ENGINE2_TANKS_USED: GAUGE_TOKEN = 462;
pub const GAUGE_TOKEN_RECIP_ENGINE2_NUMBER_OF_TANKS_USED: GAUGE_TOKEN = 463;
pub const GAUGE_TOKEN_RECIP_ENGINE2_FUEL_PRESSURE_PSF: GAUGE_TOKEN = 464;
pub const GAUGE_TOKEN_RECIP_ENGINE2_COMBUSTION_SOUND_PCT: GAUGE_TOKEN = 465;
pub const GAUGE_TOKEN_RECIP_ENGINE2_INDUCED_VELOCITY: GAUGE_TOKEN = 466;
pub const GAUGE_TOKEN_RECIP_ENGINE2_DAMAGE_PERCENT: GAUGE_TOKEN = 467;
pub const GAUGE_TOKEN_RECIP_ENGINE3_ENGINE_RPM: GAUGE_TOKEN = 468;
pub const GAUGE_TOKEN_RECIP_ENGINE3_MANIFOLD_PRESSURE: GAUGE_TOKEN = 469;
pub const GAUGE_TOKEN_RECIP_ENGINE3_THROTTLE_LEVER_POS: GAUGE_TOKEN = 470;
pub const GAUGE_TOKEN_RECIP_ENGINE3_MIXTURE_LEVER_POS: GAUGE_TOKEN = 471;
pub const GAUGE_TOKEN_RECIP_ENGINE3_PROP_LEVER_POS: GAUGE_TOKEN = 472;
pub const GAUGE_TOKEN_RECIP_ENGINE3_COWL_FLAP_POS: GAUGE_TOKEN = 473;
pub const GAUGE_TOKEN_RECIP_ENGINE3_CARB_HEAT_POS: GAUGE_TOKEN = 474;
pub const GAUGE_TOKEN_RECIP_ENGINE3_ALTERNATE_AIR_POS: GAUGE_TOKEN = 475;
pub const GAUGE_TOKEN_RECIP_ENGINE3_COOLANT_RESERVOIR_PCT: GAUGE_TOKEN = 476;
pub const GAUGE_TOKEN_RECIP_ENGINE3_LEFT_MAG: GAUGE_TOKEN = 477;
pub const GAUGE_TOKEN_RECIP_ENGINE3_RIGHT_MAG: GAUGE_TOKEN = 478;
pub const GAUGE_TOKEN_RECIP_ENGINE3_STARTER: GAUGE_TOKEN = 479;
pub const GAUGE_TOKEN_RECIP_ENGINE3_BRAKE_POWER: GAUGE_TOKEN = 480;
pub const GAUGE_TOKEN_RECIP_ENGINE3_SHAFT_TORQUE: GAUGE_TOKEN = 481;
pub const GAUGE_TOKEN_RECIP_ENGINE3_PROP_TORQUE: GAUGE_TOKEN = 482;
pub const GAUGE_TOKEN_RECIP_ENGINE3_STARTER_TORQUE: GAUGE_TOKEN = 483;
pub const GAUGE_TOKEN_RECIP_ENGINE3_COMBUSTION: GAUGE_TOKEN = 484;
pub const GAUGE_TOKEN_RECIP_ENGINE3_TURBOCHARGER_FAILED: GAUGE_TOKEN = 485;
pub const GAUGE_TOKEN_RECIP_ENGINE3_EMERGENCY_BOOST_ACTIVE: GAUGE_TOKEN = 486;
pub const GAUGE_TOKEN_RECIP_ENGINE3_EMERGENCY_BOOST_ELAPSED_TIME: GAUGE_TOKEN = 487;
pub const GAUGE_TOKEN_RECIP_ENGINE3_WASTEGATE_POS: GAUGE_TOKEN = 488;
pub const GAUGE_TOKEN_RECIP_ENGINE3_PROP_BETA: GAUGE_TOKEN = 489;
pub const GAUGE_TOKEN_RECIP_ENGINE3_THRUST: GAUGE_TOKEN = 490;
pub const GAUGE_TOKEN_RECIP_ENGINE3_EGT_DEGR: GAUGE_TOKEN = 491;
pub const GAUGE_TOKEN_RECIP_ENGINE3_TIT_DEGR: GAUGE_TOKEN = 492;
pub const GAUGE_TOKEN_RECIP_ENGINE3_CHT_DEGR: GAUGE_TOKEN = 493;
pub const GAUGE_TOKEN_RECIP_ENGINE3_OIL_TEMP_DEGR: GAUGE_TOKEN = 494;
pub const GAUGE_TOKEN_RECIP_ENGINE3_RADIATOR_DEGR: GAUGE_TOKEN = 495;
pub const GAUGE_TOKEN_RECIP_ENGINE3_OIL_PRESS_PSF: GAUGE_TOKEN = 496;
pub const GAUGE_TOKEN_RECIP_ENGINE3_OIL_LEAK_PCT: GAUGE_TOKEN = 497;
pub const GAUGE_TOKEN_RECIP_ENGINE3_FUEL_AVAILABLE: GAUGE_TOKEN = 498;
pub const GAUGE_TOKEN_RECIP_ENGINE3_FUELFLOW_PPH: GAUGE_TOKEN = 499;
pub const GAUGE_TOKEN_RECIP_ENGINE3_TANK_SELECTOR: GAUGE_TOKEN = 500;
pub const GAUGE_TOKEN_RECIP_ENGINE3_TANKS_USED: GAUGE_TOKEN = 501;
pub const GAUGE_TOKEN_RECIP_ENGINE3_NUMBER_OF_TANKS_USED: GAUGE_TOKEN = 502;
pub const GAUGE_TOKEN_RECIP_ENGINE3_FUEL_PRESSURE_PSF: GAUGE_TOKEN = 503;
pub const GAUGE_TOKEN_RECIP_ENGINE3_COMBUSTION_SOUND_PCT: GAUGE_TOKEN = 504;
pub const GAUGE_TOKEN_RECIP_ENGINE3_INDUCED_VELOCITY: GAUGE_TOKEN = 505;
pub const GAUGE_TOKEN_RECIP_ENGINE3_DAMAGE_PERCENT: GAUGE_TOKEN = 506;
pub const GAUGE_TOKEN_RECIP_ENGINE4_ENGINE_RPM: GAUGE_TOKEN = 507;
pub const GAUGE_TOKEN_RECIP_ENGINE4_MANIFOLD_PRESSURE: GAUGE_TOKEN = 508;
pub const GAUGE_TOKEN_RECIP_ENGINE4_THROTTLE_LEVER_POS: GAUGE_TOKEN = 509;
pub const GAUGE_TOKEN_RECIP_ENGINE4_MIXTURE_LEVER_POS: GAUGE_TOKEN = 510;
pub const GAUGE_TOKEN_RECIP_ENGINE4_PROP_LEVER_POS: GAUGE_TOKEN = 511;
pub const GAUGE_TOKEN_RECIP_ENGINE4_COWL_FLAP_POS: GAUGE_TOKEN = 512;
pub const GAUGE_TOKEN_RECIP_ENGINE4_CARB_HEAT_POS: GAUGE_TOKEN = 513;
pub const GAUGE_TOKEN_RECIP_ENGINE4_ALTERNATE_AIR_POS: GAUGE_TOKEN = 514;
pub const GAUGE_TOKEN_RECIP_ENGINE4_COOLANT_RESERVOIR_PCT: GAUGE_TOKEN = 515;
pub const GAUGE_TOKEN_RECIP_ENGINE4_LEFT_MAG: GAUGE_TOKEN = 516;
pub const GAUGE_TOKEN_RECIP_ENGINE4_RIGHT_MAG: GAUGE_TOKEN = 517;
pub const GAUGE_TOKEN_RECIP_ENGINE4_STARTER: GAUGE_TOKEN = 518;
pub const GAUGE_TOKEN_RECIP_ENGINE4_BRAKE_POWER: GAUGE_TOKEN = 519;
pub const GAUGE_TOKEN_RECIP_ENGINE4_SHAFT_TORQUE: GAUGE_TOKEN = 520;
pub const GAUGE_TOKEN_RECIP_ENGINE4_PROP_TORQUE: GAUGE_TOKEN = 521;
pub const GAUGE_TOKEN_RECIP_ENGINE4_STARTER_TORQUE: GAUGE_TOKEN = 522;
pub const GAUGE_TOKEN_RECIP_ENGINE4_COMBUSTION: GAUGE_TOKEN = 523;
pub const GAUGE_TOKEN_RECIP_ENGINE4_TURBOCHARGER_FAILED: GAUGE_TOKEN = 524;
pub const GAUGE_TOKEN_RECIP_ENGINE4_EMERGENCY_BOOST_ACTIVE: GAUGE_TOKEN = 525;
pub const GAUGE_TOKEN_RECIP_ENGINE4_EMERGENCY_BOOST_ELAPSED_TIME: GAUGE_TOKEN = 526;
pub const GAUGE_TOKEN_RECIP_ENGINE4_WASTEGATE_POS: GAUGE_TOKEN = 527;
pub const GAUGE_TOKEN_RECIP_ENGINE4_PROP_BETA: GAUGE_TOKEN = 528;
pub const GAUGE_TOKEN_RECIP_ENGINE4_THRUST: GAUGE_TOKEN = 529;
pub const GAUGE_TOKEN_RECIP_ENGINE4_EGT_DEGR: GAUGE_TOKEN = 530;
pub const GAUGE_TOKEN_RECIP_ENGINE4_TIT_DEGR: GAUGE_TOKEN = 531;
pub const GAUGE_TOKEN_RECIP_ENGINE4_CHT_DEGR: GAUGE_TOKEN = 532;
pub const GAUGE_TOKEN_RECIP_ENGINE4_OIL_TEMP_DEGR: GAUGE_TOKEN = 533;
pub const GAUGE_TOKEN_RECIP_ENGINE4_RADIATOR_DEGR: GAUGE_TOKEN = 534;
pub const GAUGE_TOKEN_RECIP_ENGINE4_OIL_PRESS_PSF: GAUGE_TOKEN = 535;
pub const GAUGE_TOKEN_RECIP_ENGINE4_OIL_LEAK_PCT: GAUGE_TOKEN = 536;
pub const GAUGE_TOKEN_RECIP_ENGINE4_FUEL_AVAILABLE: GAUGE_TOKEN = 537;
pub const GAUGE_TOKEN_RECIP_ENGINE4_FUELFLOW_PPH: GAUGE_TOKEN = 538;
pub const GAUGE_TOKEN_RECIP_ENGINE4_TANK_SELECTOR: GAUGE_TOKEN = 539;
pub const GAUGE_TOKEN_RECIP_ENGINE4_TANKS_USED: GAUGE_TOKEN = 540;
pub const GAUGE_TOKEN_RECIP_ENGINE4_NUMBER_OF_TANKS_USED: GAUGE_TOKEN = 541;
pub const GAUGE_TOKEN_RECIP_ENGINE4_FUEL_PRESSURE_PSF: GAUGE_TOKEN = 542;
pub const GAUGE_TOKEN_RECIP_ENGINE4_COMBUSTION_SOUND_PCT: GAUGE_TOKEN = 543;
pub const GAUGE_TOKEN_RECIP_ENGINE4_INDUCED_VELOCITY: GAUGE_TOKEN = 544;
pub const GAUGE_TOKEN_RECIP_ENGINE4_DAMAGE_PERCENT: GAUGE_TOKEN = 545;
pub const GAUGE_TOKEN_FUEL_QUANTITY_CENTER3: GAUGE_TOKEN = 546;
pub const GAUGE_TOKEN_SCORE_STRING_QUICK_COMBAT: GAUGE_TOKEN = 547;
pub const GAUGE_TOKEN_SCORE_STRING_MULTIPLAYER: GAUGE_TOKEN = 548;
pub const GAUGE_TOKEN_IS_MULTIPLAYER_TEAM_COMBAT: GAUGE_TOKEN = 549;
pub const GAUGE_TOKEN_VOR1_BEARING_DEGREES: GAUGE_TOKEN = 550;
pub const GAUGE_TOKEN_FORWARD_GROUND_VELOCITY: GAUGE_TOKEN = 551;
pub const GAUGE_TOKEN_SIDE_GROUND_VELOCITY: GAUGE_TOKEN = 552;
pub const GAUGE_TOKEN_VERTICAL_GROUND_VELOCITY: GAUGE_TOKEN = 553;
pub const GAUGE_TOKEN_NORTH_VELOCITY: GAUGE_TOKEN = 554;
pub const GAUGE_TOKEN_EAST_VELOCITY: GAUGE_TOKEN = 555;
pub const GAUGE_TOKEN_VERTICAL_VELOCITY: GAUGE_TOKEN = 556;
pub const GAUGE_TOKEN_CLOCK_TOTAL_SECONDS: GAUGE_TOKEN = 557;
pub const GAUGE_TOKEN_GENERAL_ENGINE1_THROTTLE_LEVER_POS: GAUGE_TOKEN = 558;
pub const GAUGE_TOKEN_GENERAL_ENGINE1_PROPELLER_LEVER_POS: GAUGE_TOKEN = 559;
pub const GAUGE_TOKEN_GENERAL_ENGINE1_MIXTURE_LEVER_POS: GAUGE_TOKEN = 560;
pub const GAUGE_TOKEN_GENERAL_ENGINE1_OIL_TEMP: GAUGE_TOKEN = 561;
pub const GAUGE_TOKEN_GENERAL_ENGINE1_OIL_PRES: GAUGE_TOKEN = 562;
pub const GAUGE_TOKEN_GENERAL_ENGINE1_STARTER: GAUGE_TOKEN = 563;
pub const GAUGE_TOKEN_GENERAL_ENGINE1_FAILURE: GAUGE_TOKEN = 564;
pub const GAUGE_TOKEN_GENERAL_ENGINE1_GENERATOR_SWITCH: GAUGE_TOKEN = 565;
pub const GAUGE_TOKEN_GENERAL_ENGINE1_GENERATOR_ACTIVE: GAUGE_TOKEN = 566;
pub const GAUGE_TOKEN_GENERAL_ENGINE1_EGT: GAUGE_TOKEN = 567;
pub const GAUGE_TOKEN_GENERAL_ENGINE2_THROTTLE_LEVER_POS: GAUGE_TOKEN = 568;
pub const GAUGE_TOKEN_GENERAL_ENGINE2_PROPELLER_LEVER_POS: GAUGE_TOKEN = 569;
pub const GAUGE_TOKEN_GENERAL_ENGINE2_MIXTURE_LEVER_POS: GAUGE_TOKEN = 570;
pub const GAUGE_TOKEN_GENERAL_ENGINE2_OIL_TEMP: GAUGE_TOKEN = 571;
pub const GAUGE_TOKEN_GENERAL_ENGINE2_OIL_PRES: GAUGE_TOKEN = 572;
pub const GAUGE_TOKEN_GENERAL_ENGINE2_STARTER: GAUGE_TOKEN = 573;
pub const GAUGE_TOKEN_GENERAL_ENGINE2_FAILURE: GAUGE_TOKEN = 574;
pub const GAUGE_TOKEN_GENERAL_ENGINE2_GENERATOR_SWITCH: GAUGE_TOKEN = 575;
pub const GAUGE_TOKEN_GENERAL_ENGINE2_GENERATOR_ACTIVE: GAUGE_TOKEN = 576;
pub const GAUGE_TOKEN_GENERAL_ENGINE2_EGT: GAUGE_TOKEN = 577;
pub const GAUGE_TOKEN_GENERAL_ENGINE3_THROTTLE_LEVER_POS: GAUGE_TOKEN = 578;
pub const GAUGE_TOKEN_GENERAL_ENGINE3_PROPELLER_LEVER_POS: GAUGE_TOKEN = 579;
pub const GAUGE_TOKEN_GENERAL_ENGINE3_MIXTURE_LEVER_POS: GAUGE_TOKEN = 580;
pub const GAUGE_TOKEN_GENERAL_ENGINE3_OIL_TEMP: GAUGE_TOKEN = 581;
pub const GAUGE_TOKEN_GENERAL_ENGINE3_OIL_PRES: GAUGE_TOKEN = 582;
pub const GAUGE_TOKEN_GENERAL_ENGINE3_STARTER: GAUGE_TOKEN = 583;
pub const GAUGE_TOKEN_GENERAL_ENGINE3_FAILURE: GAUGE_TOKEN = 584;
pub const GAUGE_TOKEN_GENERAL_ENGINE3_GENERATOR_SWITCH: GAUGE_TOKEN = 585;
pub const GAUGE_TOKEN_GENERAL_ENGINE3_GENERATOR_ACTIVE: GAUGE_TOKEN = 586;
pub const GAUGE_TOKEN_GENERAL_ENGINE3_EGT: GAUGE_TOKEN = 587;
pub const GAUGE_TOKEN_GENERAL_ENGINE4_THROTTLE_LEVER_POS: GAUGE_TOKEN = 588;
pub const GAUGE_TOKEN_GENERAL_ENGINE4_PROPELLER_LEVER_POS: GAUGE_TOKEN = 589;
pub const GAUGE_TOKEN_GENERAL_ENGINE4_MIXTURE_LEVER_POS: GAUGE_TOKEN = 590;
pub const GAUGE_TOKEN_GENERAL_ENGINE4_OIL_TEMP: GAUGE_TOKEN = 591;
pub const GAUGE_TOKEN_GENERAL_ENGINE4_OIL_PRES: GAUGE_TOKEN = 592;
pub const GAUGE_TOKEN_GENERAL_ENGINE4_STARTER: GAUGE_TOKEN = 593;
pub const GAUGE_TOKEN_GENERAL_ENGINE4_FAILURE: GAUGE_TOKEN = 594;
pub const GAUGE_TOKEN_GENERAL_ENGINE4_GENERATOR_SWITCH: GAUGE_TOKEN = 595;
pub const GAUGE_TOKEN_GENERAL_ENGINE4_GENERATOR_ACTIVE: GAUGE_TOKEN = 596;
pub const GAUGE_TOKEN_GENERAL_ENGINE4_EGT: GAUGE_TOKEN = 597;
pub const GAUGE_TOKEN_NAV1_COMMNAV_TEST: GAUGE_TOKEN = 598;
pub const GAUGE_TOKEN_NAV2_COMMNAV_TEST: GAUGE_TOKEN = 599;
pub const GAUGE_TOKEN_COM1_AUTOSWITCH_ON: GAUGE_TOKEN = 600;
pub const GAUGE_TOKEN_NAV1_AUTOSWITCH_ON: GAUGE_TOKEN = 601;
pub const GAUGE_TOKEN_COM2_AUTOSWITCH_ON: GAUGE_TOKEN = 602;
pub const GAUGE_TOKEN_NAV2_AUTOSWITCH_ON: GAUGE_TOKEN = 603;
pub const GAUGE_TOKEN_ELAPSED_SECONDS: GAUGE_TOKEN = 604;
pub const GAUGE_TOKEN_G_FORCE_MAXIMUM: GAUGE_TOKEN = 605;
pub const GAUGE_TOKEN_G_FORCE_MINIMUM: GAUGE_TOKEN = 606;
pub const GAUGE_TOKEN_ENGINE_WORKING_TIME: GAUGE_TOKEN = 607;
pub const GAUGE_TOKEN_ENGINE1_MAX_RPM: GAUGE_TOKEN = 608;
pub const GAUGE_TOKEN_ENGINE2_MAX_RPM: GAUGE_TOKEN = 609;
pub const GAUGE_TOKEN_ENGINE3_MAX_RPM: GAUGE_TOKEN = 610;
pub const GAUGE_TOKEN_ENGINE4_MAX_RPM: GAUGE_TOKEN = 611;
pub const GAUGE_TOKEN_ATTITUDE_BARS_POSITION: GAUGE_TOKEN = 612;
pub const GAUGE_TOKEN_RAD_INS_SWITCH: GAUGE_TOKEN = 613;
pub const GAUGE_TOKEN_RADIO_HEIGHT: GAUGE_TOKEN = 614;
pub const GAUGE_TOKEN_DECISION_HEIGHT: GAUGE_TOKEN = 615;
pub const GAUGE_TOKEN_LOW_HEIGHT_WARNING: GAUGE_TOKEN = 616;
pub const GAUGE_TOKEN_COM_STBY_FREQUENCY: GAUGE_TOKEN = 617;
pub const GAUGE_TOKEN_COM_RADIO_25_KHZ_TUNABLE: GAUGE_TOKEN = 618;
pub const GAUGE_TOKEN_NAV_LIGHTS: GAUGE_TOKEN = 619;
pub const GAUGE_TOKEN_LOGO_LIGHTS: GAUGE_TOKEN = 620;
pub const GAUGE_TOKEN_WING_LIGHTS: GAUGE_TOKEN = 621;
pub const GAUGE_TOKEN_RECOGNITION_LIGHTS: GAUGE_TOKEN = 622;
pub const GAUGE_TOKEN_RADIO_MORSE_IDENT_STATES: GAUGE_TOKEN = 623;
pub const GAUGE_TOKEN_TURB_ENGINE_1_N1: GAUGE_TOKEN = 624;
pub const GAUGE_TOKEN_TURB_ENGINE_1_N2: GAUGE_TOKEN = 625;
pub const GAUGE_TOKEN_TURB_ENGINE_1_CORRECTED_N1: GAUGE_TOKEN = 626;
pub const GAUGE_TOKEN_TURB_ENGINE_1_CORRECTED_N2: GAUGE_TOKEN = 627;
pub const GAUGE_TOKEN_TURB_ENGINE_1_CORRECTED_FF: GAUGE_TOKEN = 628;
pub const GAUGE_TOKEN_TURB_ENGINE_1_PCT_MAX_TORQUE: GAUGE_TOKEN = 629;
pub const GAUGE_TOKEN_TURB_ENGINE_1_EPR: GAUGE_TOKEN = 630;
pub const GAUGE_TOKEN_TURB_ENGINE_1_ITT: GAUGE_TOKEN = 631;
pub const GAUGE_TOKEN_TURB_ENGINE_1_AFTERBURNER: GAUGE_TOKEN = 632;
pub const GAUGE_TOKEN_TURB_ENGINE_1_JET_THRUST: GAUGE_TOKEN = 633;
pub const GAUGE_TOKEN_TURB_ENGINE_1_BLEEDAIRPSI: GAUGE_TOKEN = 634;
pub const GAUGE_TOKEN_TURB_ENGINE_1_TANK_SELECTOR: GAUGE_TOKEN = 635;
pub const GAUGE_TOKEN_TURB_ENGINE_1_TANKS_USED: GAUGE_TOKEN = 636;
pub const GAUGE_TOKEN_TURB_ENGINE_1_NUMBER_TANKS: GAUGE_TOKEN = 637;
pub const GAUGE_TOKEN_TURB_ENGINE_1_FUELFLOW_PPH: GAUGE_TOKEN = 638;
pub const GAUGE_TOKEN_TURB_ENGINE_1_FUEL_AVAILABLE: GAUGE_TOKEN = 639;
pub const GAUGE_TOKEN_TURB_ENGINE_1_PCT_AREA: GAUGE_TOKEN = 640;
pub const GAUGE_TOKEN_TURB_ENGINE_1_PCT_REVERSER: GAUGE_TOKEN = 641;
pub const GAUGE_TOKEN_TURB_ENGINE_1_VIBRATION: GAUGE_TOKEN = 642;
pub const GAUGE_TOKEN_TURB_ENGINE_2_N1: GAUGE_TOKEN = 643;
pub const GAUGE_TOKEN_TURB_ENGINE_2_N2: GAUGE_TOKEN = 644;
pub const GAUGE_TOKEN_TURB_ENGINE_2_CORRECTED_N1: GAUGE_TOKEN = 645;
pub const GAUGE_TOKEN_TURB_ENGINE_2_CORRECTED_N2: GAUGE_TOKEN = 646;
pub const GAUGE_TOKEN_TURB_ENGINE_2_CORRECTED_FF: GAUGE_TOKEN = 647;
pub const GAUGE_TOKEN_TURB_ENGINE_2_PCT_MAX_TORQUE: GAUGE_TOKEN = 648;
pub const GAUGE_TOKEN_TURB_ENGINE_2_EPR: GAUGE_TOKEN = 649;
pub const GAUGE_TOKEN_TURB_ENGINE_2_ITT: GAUGE_TOKEN = 650;
pub const GAUGE_TOKEN_TURB_ENGINE_2_AFTERBURNER: GAUGE_TOKEN = 651;
pub const GAUGE_TOKEN_TURB_ENGINE_2_JET_THRUST: GAUGE_TOKEN = 652;
pub const GAUGE_TOKEN_TURB_ENGINE_2_BLEEDAIRPSI: GAUGE_TOKEN = 653;
pub const GAUGE_TOKEN_TURB_ENGINE_2_TANK_SELECTOR: GAUGE_TOKEN = 654;
pub const GAUGE_TOKEN_TURB_ENGINE_2_TANKS_USED: GAUGE_TOKEN = 655;
pub const GAUGE_TOKEN_TURB_ENGINE_2_NUMBER_TANKS: GAUGE_TOKEN = 656;
pub const GAUGE_TOKEN_TURB_ENGINE_2_FUELFLOW_PPH: GAUGE_TOKEN = 657;
pub const GAUGE_TOKEN_TURB_ENGINE_2_FUEL_AVAILABLE: GAUGE_TOKEN = 658;
pub const GAUGE_TOKEN_TURB_ENGINE_2_PCT_AREA: GAUGE_TOKEN = 659;
pub const GAUGE_TOKEN_TURB_ENGINE_2_PCT_REVERSER: GAUGE_TOKEN = 660;
pub const GAUGE_TOKEN_TURB_ENGINE_2_VIBRATION: GAUGE_TOKEN = 661;
pub const GAUGE_TOKEN_TURB_ENGINE_3_N1: GAUGE_TOKEN = 662;
pub const GAUGE_TOKEN_TURB_ENGINE_3_N2: GAUGE_TOKEN = 663;
pub const GAUGE_TOKEN_TURB_ENGINE_3_CORRECTED_N1: GAUGE_TOKEN = 664;
pub const GAUGE_TOKEN_TURB_ENGINE_3_CORRECTED_N2: GAUGE_TOKEN = 665;
pub const GAUGE_TOKEN_TURB_ENGINE_3_CORRECTED_FF: GAUGE_TOKEN = 666;
pub const GAUGE_TOKEN_TURB_ENGINE_3_PCT_MAX_TORQUE: GAUGE_TOKEN = 667;
pub const GAUGE_TOKEN_TURB_ENGINE_3_EPR: GAUGE_TOKEN = 668;
pub const GAUGE_TOKEN_TURB_ENGINE_3_ITT: GAUGE_TOKEN = 669;
pub const GAUGE_TOKEN_TURB_ENGINE_3_AFTERBURNER: GAUGE_TOKEN = 670;
pub const GAUGE_TOKEN_TURB_ENGINE_3_JET_THRUST: GAUGE_TOKEN = 671;
pub const GAUGE_TOKEN_TURB_ENGINE_3_BLEEDAIRPSI: GAUGE_TOKEN = 672;
pub const GAUGE_TOKEN_TURB_ENGINE_3_TANK_SELECTOR: GAUGE_TOKEN = 673;
pub const GAUGE_TOKEN_TURB_ENGINE_3_TANKS_USED: GAUGE_TOKEN = 674;
pub const GAUGE_TOKEN_TURB_ENGINE_3_NUMBER_TANKS: GAUGE_TOKEN = 675;
pub const GAUGE_TOKEN_TURB_ENGINE_3_FUELFLOW_PPH: GAUGE_TOKEN = 676;
pub const GAUGE_TOKEN_TURB_ENGINE_3_FUEL_AVAILABLE: GAUGE_TOKEN = 677;
pub const GAUGE_TOKEN_TURB_ENGINE_3_PCT_AREA: GAUGE_TOKEN = 678;
pub const GAUGE_TOKEN_TURB_ENGINE_3_PCT_REVERSER: GAUGE_TOKEN = 679;
pub const GAUGE_TOKEN_TURB_ENGINE_3_VIBRATION: GAUGE_TOKEN = 680;
pub const GAUGE_TOKEN_TURB_ENGINE_4_N1: GAUGE_TOKEN = 681;
pub const GAUGE_TOKEN_TURB_ENGINE_4_N2: GAUGE_TOKEN = 682;
pub const GAUGE_TOKEN_TURB_ENGINE_4_CORRECTED_N1: GAUGE_TOKEN = 683;
pub const GAUGE_TOKEN_TURB_ENGINE_4_CORRECTED_N2: GAUGE_TOKEN = 684;
pub const GAUGE_TOKEN_TURB_ENGINE_4_CORRECTED_FF: GAUGE_TOKEN = 685;
pub const GAUGE_TOKEN_TURB_ENGINE_4_PCT_MAX_TORQUE: GAUGE_TOKEN = 686;
pub const GAUGE_TOKEN_TURB_ENGINE_4_EPR: GAUGE_TOKEN = 687;
pub const GAUGE_TOKEN_TURB_ENGINE_4_ITT: GAUGE_TOKEN = 688;
pub const GAUGE_TOKEN_TURB_ENGINE_4_AFTERBURNER: GAUGE_TOKEN = 689;
pub const GAUGE_TOKEN_TURB_ENGINE_4_JET_THRUST: GAUGE_TOKEN = 690;
pub const GAUGE_TOKEN_TURB_ENGINE_4_BLEEDAIRPSI: GAUGE_TOKEN = 691;
pub const GAUGE_TOKEN_TURB_ENGINE_4_TANK_SELECTOR: GAUGE_TOKEN = 692;
pub const GAUGE_TOKEN_TURB_ENGINE_4_TANKS_USED: GAUGE_TOKEN = 693;
pub const GAUGE_TOKEN_TURB_ENGINE_4_NUMBER_TANKS: GAUGE_TOKEN = 694;
pub const GAUGE_TOKEN_TURB_ENGINE_4_FUELFLOW_PPH: GAUGE_TOKEN = 695;
pub const GAUGE_TOKEN_TURB_ENGINE_4_FUEL_AVAILABLE: GAUGE_TOKEN = 696;
pub const GAUGE_TOKEN_TURB_ENGINE_4_PCT_AREA: GAUGE_TOKEN = 697;
pub const GAUGE_TOKEN_TURB_ENGINE_4_PCT_REVERSER: GAUGE_TOKEN = 698;
pub const GAUGE_TOKEN_TURB_ENGINE_4_VIBRATION: GAUGE_TOKEN = 699;
pub const GAUGE_TOKEN_PROPELLER_1_RPM: GAUGE_TOKEN = 700;
pub const GAUGE_TOKEN_PROPELLER_1_PCT_MAX_RPM: GAUGE_TOKEN = 701;
pub const GAUGE_TOKEN_PROPELLER_1_THRUST: GAUGE_TOKEN = 702;
pub const GAUGE_TOKEN_PROPELLER_1_BETA: GAUGE_TOKEN = 703;
pub const GAUGE_TOKEN_PROPELLER_1_FEATHERING_INHIBIT: GAUGE_TOKEN = 704;
pub const GAUGE_TOKEN_PROPELLER_1_FEATHERED: GAUGE_TOKEN = 705;
pub const GAUGE_TOKEN_PROPELLER_1_SYNC_DELTA_LEVER: GAUGE_TOKEN = 706;
pub const GAUGE_TOKEN_PROPELLER_1_AUTOFEATHER_ARMED: GAUGE_TOKEN = 707;
pub const GAUGE_TOKEN_PROPELLER_2_RPM: GAUGE_TOKEN = 708;
pub const GAUGE_TOKEN_PROPELLER_2_PCT_MAX_RPM: GAUGE_TOKEN = 709;
pub const GAUGE_TOKEN_PROPELLER_2_THRUST: GAUGE_TOKEN = 710;
pub const GAUGE_TOKEN_PROPELLER_2_BETA: GAUGE_TOKEN = 711;
pub const GAUGE_TOKEN_PROPELLER_2_FEATHERING_INHIBIT: GAUGE_TOKEN = 712;
pub const GAUGE_TOKEN_PROPELLER_2_FEATHERED: GAUGE_TOKEN = 713;
pub const GAUGE_TOKEN_PROPELLER_2_SYNC_DELTA_LEVER: GAUGE_TOKEN = 714;
pub const GAUGE_TOKEN_PROPELLER_2_AUTOFEATHER_ARMED: GAUGE_TOKEN = 715;
pub const GAUGE_TOKEN_PROPELLER_3_RPM: GAUGE_TOKEN = 716;
pub const GAUGE_TOKEN_PROPELLER_3_PCT_MAX_RPM: GAUGE_TOKEN = 717;
pub const GAUGE_TOKEN_PROPELLER_3_THRUST: GAUGE_TOKEN = 718;
pub const GAUGE_TOKEN_PROPELLER_3_BETA: GAUGE_TOKEN = 719;
pub const GAUGE_TOKEN_PROPELLER_3_FEATHERING_INHIBIT: GAUGE_TOKEN = 720;
pub const GAUGE_TOKEN_PROPELLER_3_FEATHERED: GAUGE_TOKEN = 721;
pub const GAUGE_TOKEN_PROPELLER_3_SYNC_DELTA_LEVER: GAUGE_TOKEN = 722;
pub const GAUGE_TOKEN_PROPELLER_3_AUTOFEATHER_ARMED: GAUGE_TOKEN = 723;
pub const GAUGE_TOKEN_PROPELLER_4_RPM: GAUGE_TOKEN = 724;
pub const GAUGE_TOKEN_PROPELLER_4_PCT_MAX_RPM: GAUGE_TOKEN = 725;
pub const GAUGE_TOKEN_PROPELLER_4_THRUST: GAUGE_TOKEN = 726;
pub const GAUGE_TOKEN_PROPELLER_4_BETA: GAUGE_TOKEN = 727;
pub const GAUGE_TOKEN_PROPELLER_4_FEATHERING_INHIBIT: GAUGE_TOKEN = 728;
pub const GAUGE_TOKEN_PROPELLER_4_FEATHERED: GAUGE_TOKEN = 729;
pub const GAUGE_TOKEN_PROPELLER_4_SYNC_DELTA_LEVER: GAUGE_TOKEN = 730;
pub const GAUGE_TOKEN_PROPELLER_4_AUTOFEATHER_ARMED: GAUGE_TOKEN = 731;
pub const GAUGE_TOKEN_HYDRAULICS1_PRESSURE_PSF: GAUGE_TOKEN = 732;
pub const GAUGE_TOKEN_HYDRAULICS1_RESERVOIR_PCT: GAUGE_TOKEN = 733;
pub const GAUGE_TOKEN_HYDRAULICS2_PRESSURE_PSF: GAUGE_TOKEN = 734;
pub const GAUGE_TOKEN_HYDRAULICS2_RESERVOIR_PCT: GAUGE_TOKEN = 735;
pub const GAUGE_TOKEN_HYDRAULICS3_PRESSURE_PSF: GAUGE_TOKEN = 736;
pub const GAUGE_TOKEN_HYDRAULICS3_RESERVOIR_PCT: GAUGE_TOKEN = 737;
pub const GAUGE_TOKEN_HYDRAULICS4_PRESSURE_PSF: GAUGE_TOKEN = 738;
pub const GAUGE_TOKEN_HYDRAULICS4_RESERVOIR_PCT: GAUGE_TOKEN = 739;
pub const GAUGE_TOKEN_AVIONICS_MASTER_SWITCH: GAUGE_TOKEN = 740;
pub const GAUGE_TOKEN_PANEL_AUTOFEATHER_SWITCH: GAUGE_TOKEN = 741;
pub const GAUGE_TOKEN_PANEL_ANTIICE_SWITCH: GAUGE_TOKEN = 742;
pub const GAUGE_TOKEN_PANEL_AUTOBRAKE_SWITCH: GAUGE_TOKEN = 743;
pub const GAUGE_TOKEN_DAY_OF_WEEK: GAUGE_TOKEN = 744;
pub const GAUGE_TOKEN_DAY_OF_MONTH: GAUGE_TOKEN = 745;
pub const GAUGE_TOKEN_CURRENT_MONTH: GAUGE_TOKEN = 746;
pub const GAUGE_TOKEN_CURRENT_YEAR: GAUGE_TOKEN = 747;
pub const GAUGE_TOKEN_TIME_ZONE_OFFSET: GAUGE_TOKEN = 748;
pub const GAUGE_TOKEN_DAYLIGHT_SAVING_ACTIVE: GAUGE_TOKEN = 749;
pub const GAUGE_TOKEN_TOTAL_LOAD_AMPS: GAUGE_TOKEN = 750;
pub const GAUGE_TOKEN_BATTERY_LOAD: GAUGE_TOKEN = 751;
pub const GAUGE_TOKEN_BATTERY_VOLTAGE: GAUGE_TOKEN = 752;
pub const GAUGE_TOKEN_MAIN_BUS_VOLTAGE: GAUGE_TOKEN = 753;
pub const GAUGE_TOKEN_MAIN_BUS_AMPS: GAUGE_TOKEN = 754;
pub const GAUGE_TOKEN_AVIONICS_BUS_VOLTAGE: GAUGE_TOKEN = 755;
pub const GAUGE_TOKEN_AVIONICS_BUS_AMPS: GAUGE_TOKEN = 756;
pub const GAUGE_TOKEN_HOT_BATTERY_BUS_VOLTAGE: GAUGE_TOKEN = 757;
pub const GAUGE_TOKEN_HOT_BATTERY_BUS_AMPS: GAUGE_TOKEN = 758;
pub const GAUGE_TOKEN_BATTERY_BUS_VOLTAGE: GAUGE_TOKEN = 759;
pub const GAUGE_TOKEN_BATTERY_BUS_AMPS: GAUGE_TOKEN = 760;
pub const GAUGE_TOKEN_GENERATOR_ALTERNATOR_1_BUS_VOLTAGE: GAUGE_TOKEN = 761;
pub const GAUGE_TOKEN_GENERATOR_ALTERNATOR_1_BUS_AMPS: GAUGE_TOKEN = 762;
pub const GAUGE_TOKEN_GENERATOR_ALTERNATOR_2_BUS_VOLTAGE: GAUGE_TOKEN = 763;
pub const GAUGE_TOKEN_GENERATOR_ALTERNATOR_2_BUS_AMPS: GAUGE_TOKEN = 764;
pub const GAUGE_TOKEN_GENERATOR_ALTERNATOR_3_BUS_VOLTAGE: GAUGE_TOKEN = 765;
pub const GAUGE_TOKEN_GENERATOR_ALTERNATOR_3_BUS_AMPS: GAUGE_TOKEN = 766;
pub const GAUGE_TOKEN_GENERATOR_ALTERNATOR_4_BUS_VOLTAGE: GAUGE_TOKEN = 767;
pub const GAUGE_TOKEN_GENERATOR_ALTERNATOR_4_BUS_AMPS: GAUGE_TOKEN = 768;
pub const GAUGE_TOKEN_GENERAL_PANEL_CIRCUIT_ON: GAUGE_TOKEN = 769;
pub const GAUGE_TOKEN_FLAP_MOTOR_CIRCUIT_ON: GAUGE_TOKEN = 770;
pub const GAUGE_TOKEN_GEAR_MOTOR_CIRCUIT_ON: GAUGE_TOKEN = 771;
pub const GAUGE_TOKEN_AUTOPILOT_CIRCUIT_ON: GAUGE_TOKEN = 772;
pub const GAUGE_TOKEN_AVIONICS_CIRCUIT_ON: GAUGE_TOKEN = 773;
pub const GAUGE_TOKEN_PITOT_HEAT_CIRCUIT_ON: GAUGE_TOKEN = 774;
pub const GAUGE_TOKEN_PROP_SYNC_CIRCUIT_ON: GAUGE_TOKEN = 775;
pub const GAUGE_TOKEN_AUTO_FEATHER_CIRCUIT_ON: GAUGE_TOKEN = 776;
pub const GAUGE_TOKEN_AUTO_BRAKES_CIRCUIT_ON: GAUGE_TOKEN = 777;
pub const GAUGE_TOKEN_STANDBY_VACUUM_CIRCUIT_ON: GAUGE_TOKEN = 778;
pub const GAUGE_TOKEN_MARKER_BEACON_CIRCUIT_ON: GAUGE_TOKEN = 779;
pub const GAUGE_TOKEN_GEAR_WARNING_CIRCUIT_ON: GAUGE_TOKEN = 780;
pub const GAUGE_TOKEN_HYDRAULIC_PUMP_CIRCUIT_ON: GAUGE_TOKEN = 781;
pub const GAUGE_TOKEN_ELEVATOR_DEFLECTION: GAUGE_TOKEN = 782;
pub const GAUGE_TOKEN_ELEVATOR_TRIM: GAUGE_TOKEN = 783;
pub const GAUGE_TOKEN_AILERON_DEFLECTION: GAUGE_TOKEN = 784;
pub const GAUGE_TOKEN_AILERON_TRIM: GAUGE_TOKEN = 785;
pub const GAUGE_TOKEN_RUDDER_DEFLECTION: GAUGE_TOKEN = 786;
pub const GAUGE_TOKEN_RUDDER_TRIM: GAUGE_TOKEN = 787;
pub const GAUGE_TOKEN_PROPSYNC_ACTIVE: GAUGE_TOKEN = 788;
pub const GAUGE_TOKEN_INCIDENCE_ALPHA: GAUGE_TOKEN = 789;
pub const GAUGE_TOKEN_INCIDENCE_BETA: GAUGE_TOKEN = 790;
pub const GAUGE_TOKEN_TOTAL_FUEL_QUANTITY_LBS: GAUGE_TOKEN = 791;
pub const GAUGE_TOKEN_FLIGHT_DIRECTOR_ACTIVE: GAUGE_TOKEN = 792;
pub const GAUGE_TOKEN_FLIGHT_DIRECTOR_PITCH: GAUGE_TOKEN = 793;
pub const GAUGE_TOKEN_FLIGHT_DIRECTOR_BANK: GAUGE_TOKEN = 794;
pub const GAUGE_TOKEN_CG_PERCENT: GAUGE_TOKEN = 795;
pub const GAUGE_TOKEN_CG_AFT_LIMIT: GAUGE_TOKEN = 796;
pub const GAUGE_TOKEN_CG_FWD_LIMIT: GAUGE_TOKEN = 797;
pub const GAUGE_TOKEN_CG_MAX_MACH: GAUGE_TOKEN = 798;
pub const GAUGE_TOKEN_CG_MIN_MACH: GAUGE_TOKEN = 799;
pub const GAUGE_TOKEN_STANDARD_ATM_TEMPERATURE: GAUGE_TOKEN = 800;
pub const GAUGE_TOKEN_ENGINE_1_FUELFLOW_BUG_POSITION: GAUGE_TOKEN = 801;
pub const GAUGE_TOKEN_ENGINE_2_FUELFLOW_BUG_POSITION: GAUGE_TOKEN = 802;
pub const GAUGE_TOKEN_ENGINE_3_FUELFLOW_BUG_POSITION: GAUGE_TOKEN = 803;
pub const GAUGE_TOKEN_ENGINE_4_FUELFLOW_BUG_POSITION: GAUGE_TOKEN = 804;
pub const GAUGE_TOKEN_CONCORDE_VISOR_NOSE_HANDLE: GAUGE_TOKEN = 805;
pub const GAUGE_TOKEN_CONCORDE_VISOR_POS_PCT: GAUGE_TOKEN = 806;
pub const GAUGE_TOKEN_CONCORDE_NOSE_ANGLE: GAUGE_TOKEN = 807;
pub const GAUGE_TOKEN_GEAR_POS_TAIL: GAUGE_TOKEN = 808;
pub const GAUGE_TOKEN_ELEVON_1_DEFLECTION: GAUGE_TOKEN = 809;
pub const GAUGE_TOKEN_ELEVON_2_DEFLECTION: GAUGE_TOKEN = 810;
pub const GAUGE_TOKEN_ELEVON_3_DEFLECTION: GAUGE_TOKEN = 811;
pub const GAUGE_TOKEN_ELEVON_4_DEFLECTION: GAUGE_TOKEN = 812;
pub const GAUGE_TOKEN_ELEVON_5_DEFLECTION: GAUGE_TOKEN = 813;
pub const GAUGE_TOKEN_ELEVON_6_DEFLECTION: GAUGE_TOKEN = 814;
pub const GAUGE_TOKEN_ELEVON_7_DEFLECTION: GAUGE_TOKEN = 815;
pub const GAUGE_TOKEN_ELEVON_8_DEFLECTION: GAUGE_TOKEN = 816;
pub const GAUGE_TOKEN_PANEL_AUTOPILOT_SPEED_SETTING: GAUGE_TOKEN = 817;
pub const GAUGE_TOKEN_AUTOPILOT_AIRSPEED_ACQUISITION: GAUGE_TOKEN = 818;
pub const GAUGE_TOKEN_AUTOPILOT_AIRSPEED_HOLD_CURRENT: GAUGE_TOKEN = 819;
pub const GAUGE_TOKEN_AUTOPILOT_MAX_SPEED: GAUGE_TOKEN = 820;
pub const GAUGE_TOKEN_AUTOPILOT_CRUISE_SPEED: GAUGE_TOKEN = 821;
pub const GAUGE_TOKEN_BARBER_POLE_MACH: GAUGE_TOKEN = 822;
pub const GAUGE_TOKEN_SELECTED_FUEL_TRANSFER_MODE: GAUGE_TOKEN = 823;
pub const GAUGE_TOKEN_HYDRAULIC_SYSTEM_INTEGRITY: GAUGE_TOKEN = 824;
pub const GAUGE_TOKEN_ATTITUDE_CAGE_BUTTON: GAUGE_TOKEN = 825;
pub const GAUGE_TOKEN_VOR1_NEEDLE_RADIO: GAUGE_TOKEN = 826;
pub const GAUGE_TOKEN_GPS_POSITION_LAT: GAUGE_TOKEN = 827;
pub const GAUGE_TOKEN_GPS_POSITION_LON: GAUGE_TOKEN = 828;
pub const GAUGE_TOKEN_GPS_POSITION_ALT: GAUGE_TOKEN = 829;
pub const GAUGE_TOKEN_GPS_MAGVAR: GAUGE_TOKEN = 830;
pub const GAUGE_TOKEN_GPS_FLAGS: GAUGE_TOKEN = 831;
pub const GAUGE_TOKEN_GPS_GROUND_SPEED: GAUGE_TOKEN = 832;
pub const GAUGE_TOKEN_GPS_GROUND_HEADING: GAUGE_TOKEN = 833;
pub const GAUGE_TOKEN_GPS_GROUND_TRACK: GAUGE_TOKEN = 834;
pub const GAUGE_TOKEN_GPS_WP_DISTANCE: GAUGE_TOKEN = 835;
pub const GAUGE_TOKEN_GPS_WP_BEARING: GAUGE_TOKEN = 836;
pub const GAUGE_TOKEN_GPS_WP_CROSS_TRK: GAUGE_TOKEN = 837;
pub const GAUGE_TOKEN_GPS_WP_REQ_HDG: GAUGE_TOKEN = 838;
pub const GAUGE_TOKEN_GPS_WP_STRING: GAUGE_TOKEN = 839;
pub const GAUGE_TOKEN_GPS_WP_NEXT_LAT: GAUGE_TOKEN = 840;
pub const GAUGE_TOKEN_GPS_WP_NEXT_LON: GAUGE_TOKEN = 841;
pub const GAUGE_TOKEN_GPS_WP_NEXT_ALT: GAUGE_TOKEN = 842;
pub const GAUGE_TOKEN_GPS_WP_PREV_LAT: GAUGE_TOKEN = 843;
pub const GAUGE_TOKEN_GPS_WP_PREV_LON: GAUGE_TOKEN = 844;
pub const GAUGE_TOKEN_GPS_WP_PREV_ALT: GAUGE_TOKEN = 845;
pub const GAUGE_TOKEN_GPS_WP_TRUE_BEARING: GAUGE_TOKEN = 846;
pub const GAUGE_TOKEN_GPS_WP_TRUE_REQ_HDG: GAUGE_TOKEN = 847;
pub const GAUGE_TOKEN_GPS_DRIVES_NAV1: GAUGE_TOKEN = 848;
pub const GAUGE_TOKEN_HSI_VERTICAL_NEEDLE: GAUGE_TOKEN = 849;
pub const GAUGE_TOKEN_HSI_HORIZONTAL_NEEDLE: GAUGE_TOKEN = 850;
pub const GAUGE_TOKEN_HSI_VERTICAL_VALID: GAUGE_TOKEN = 851;
pub const GAUGE_TOKEN_HSI_HORIZONTAL_VALID: GAUGE_TOKEN = 852;
pub const GAUGE_TOKEN_HSI_TF_FLAG: GAUGE_TOKEN = 853;
pub const GAUGE_TOKEN_HSI_OBI_NEEDLE: GAUGE_TOKEN = 854;
pub const GAUGE_TOKEN_HSI_DESIRED_HEADING_NEEDLE: GAUGE_TOKEN = 855;
pub const GAUGE_TOKEN_HSI_BEARING: GAUGE_TOKEN = 856;
pub const GAUGE_TOKEN_HSI_BEARING_VALID: GAUGE_TOKEN = 857;
pub const GAUGE_TOKEN_HSI_SIGNAL_LOCALISER: GAUGE_TOKEN = 858;
pub const GAUGE_TOKEN_HSI_SPEED: GAUGE_TOKEN = 859;
pub const GAUGE_TOKEN_HSI_DISTANCE: GAUGE_TOKEN = 860;
pub const GAUGE_TOKEN_HSI_STATION_NAME: GAUGE_TOKEN = 861;
pub const GAUGE_TOKEN_GEAR_POS_AUX: GAUGE_TOKEN = 862;
pub const GAUGE_TOKEN_TOOLTIP_UNITS: GAUGE_TOKEN = 863;
pub const GAUGE_TOKEN_LSO_TEXTURE_ID: GAUGE_TOKEN = 864;
pub const GAUGE_TOKEN_LSO_TEXT: GAUGE_TOKEN = 865;
pub const GAUGE_TOKEN_LEFT_FOLDING_WING_PERCENT: GAUGE_TOKEN = 866;
pub const GAUGE_TOKEN_RIGHT_FOLDING_WING_PERCENT: GAUGE_TOKEN = 867;
pub const GAUGE_TOKEN_MAIN_EXIT_OPEN: GAUGE_TOKEN = 868;
pub const GAUGE_TOKEN_TAILHOOK_POSITION: GAUGE_TOKEN = 869;
pub const GAUGE_TOKEN_COM2_FREQUENCY: GAUGE_TOKEN = 870;
pub const GAUGE_TOKEN_COM2_STBY_FREQUENCY: GAUGE_TOKEN = 871;
pub const GAUGE_TOKEN_NAV1_STBY_FREQUENCY: GAUGE_TOKEN = 872;
pub const GAUGE_TOKEN_NAV2_STBY_FREQUENCY: GAUGE_TOKEN = 873;
pub const GAUGE_TOKEN_COM1_TRANSMIT_SELECT: GAUGE_TOKEN = 874;
pub const GAUGE_TOKEN_COM2_TRANSMIT_SELECT: GAUGE_TOKEN = 875;
pub const GAUGE_TOKEN_COM_BOTH_RECEIVE: GAUGE_TOKEN = 876;
pub const GAUGE_TOKEN_NAV1_SOUND_TOGGLE: GAUGE_TOKEN = 877;
pub const GAUGE_TOKEN_NAV2_SOUND_TOGGLE: GAUGE_TOKEN = 878;
pub const GAUGE_TOKEN_DME_SOUND_TOGGLE: GAUGE_TOKEN = 879;
pub const GAUGE_TOKEN_ADF_SOUND_TOGGLE: GAUGE_TOKEN = 880;
pub const GAUGE_TOKEN_MARKER_SOUND_TOGGLE: GAUGE_TOKEN = 881;
pub const GAUGE_TOKEN_VOR2_GS_NEEDLE: GAUGE_TOKEN = 882;
pub const GAUGE_TOKEN_GENERAL_ENGINE1_ANTI_ICE_POS: GAUGE_TOKEN = 883;
pub const GAUGE_TOKEN_GENERAL_ENGINE2_ANTI_ICE_POS: GAUGE_TOKEN = 884;
pub const GAUGE_TOKEN_GENERAL_ENGINE3_ANTI_ICE_POS: GAUGE_TOKEN = 885;
pub const GAUGE_TOKEN_GENERAL_ENGINE4_ANTI_ICE_POS: GAUGE_TOKEN = 886;
pub const GAUGE_TOKEN_ENGINE1_ON_FIRE: GAUGE_TOKEN = 887;
pub const GAUGE_TOKEN_ENGINE2_ON_FIRE: GAUGE_TOKEN = 888;
pub const GAUGE_TOKEN_ENGINE3_ON_FIRE: GAUGE_TOKEN = 889;
pub const GAUGE_TOKEN_ENGINE4_ON_FIRE: GAUGE_TOKEN = 890;
pub const GAUGE_TOKEN_ENGINE1_FUEL_PUMP_ON: GAUGE_TOKEN = 891;
pub const GAUGE_TOKEN_ENGINE2_FUEL_PUMP_ON: GAUGE_TOKEN = 892;
pub const GAUGE_TOKEN_ENGINE3_FUEL_PUMP_ON: GAUGE_TOKEN = 893;
pub const GAUGE_TOKEN_ENGINE4_FUEL_PUMP_ON: GAUGE_TOKEN = 894;
pub const GAUGE_TOKEN_GENERAL_ENGINE1_FUEL_VALVE: GAUGE_TOKEN = 895;
pub const GAUGE_TOKEN_GENERAL_ENGINE2_FUEL_VALVE: GAUGE_TOKEN = 896;
pub const GAUGE_TOKEN_GENERAL_ENGINE3_FUEL_VALVE: GAUGE_TOKEN = 897;
pub const GAUGE_TOKEN_GENERAL_ENGINE4_FUEL_VALVE: GAUGE_TOKEN = 898;
pub const GAUGE_TOKEN_GENERAL_ENGINE1_FUEL_PRESSURE: GAUGE_TOKEN = 899;
pub const GAUGE_TOKEN_GENERAL_ENGINE2_FUEL_PRESSURE: GAUGE_TOKEN = 900;
pub const GAUGE_TOKEN_GENERAL_ENGINE3_FUEL_PRESSURE: GAUGE_TOKEN = 901;
pub const GAUGE_TOKEN_GENERAL_ENGINE4_FUEL_PRESSURE: GAUGE_TOKEN = 902;
pub const GAUGE_TOKEN_WATER_RUDDER_ON: GAUGE_TOKEN = 903;
pub const GAUGE_TOKEN_PROP_DEICE_SWITCH: GAUGE_TOKEN = 904;
pub const GAUGE_TOKEN_STRUCTURAL_DEICE_SWITCH: GAUGE_TOKEN = 905;
pub const GAUGE_TOKEN_FUEL_TANK_SELECTOR_2: GAUGE_TOKEN = 906;
pub const GAUGE_TOKEN_TRAILING_EDGE_FLAPS0_LEFT_ANGLE: GAUGE_TOKEN = 907;
pub const GAUGE_TOKEN_TRAILING_EDGE_FLAPS0_RIGHT_ANGLE: GAUGE_TOKEN = 908;
pub const GAUGE_TOKEN_ALTERNATE_STATIC_AIR_OPEN: GAUGE_TOKEN = 909;
pub const GAUGE_TOKEN_AILERON_TRIM_PCT: GAUGE_TOKEN = 910;
pub const GAUGE_TOKEN_RUDDER_TRIM_PCT: GAUGE_TOKEN = 911;
pub const GAUGE_TOKEN_LIGHT_NAV_ON: GAUGE_TOKEN = 912;
pub const GAUGE_TOKEN_LIGHT_BEACON_ON: GAUGE_TOKEN = 913;
pub const GAUGE_TOKEN_LIGHT_LANDING_ON: GAUGE_TOKEN = 914;
pub const GAUGE_TOKEN_LIGHT_TAXI_ON: GAUGE_TOKEN = 915;
pub const GAUGE_TOKEN_LIGHT_STROBE_ON: GAUGE_TOKEN = 916;
pub const GAUGE_TOKEN_LIGHT_PANEL_ON: GAUGE_TOKEN = 917;
pub const GAUGE_TOKEN_LIGHT_RECOGNITION_ON: GAUGE_TOKEN = 918;
pub const GAUGE_TOKEN_LIGHT_WING_ON: GAUGE_TOKEN = 919;
pub const GAUGE_TOKEN_LIGHT_LOGO_ON: GAUGE_TOKEN = 920;
pub const GAUGE_TOKEN_LIGHT_CABIN_ON: GAUGE_TOKEN = 921;
pub const GAUGE_TOKEN_TOTAL_VELOCITY: GAUGE_TOKEN = 922;
pub const GAUGE_TOKEN_TOTAL_WORLD_VELOCITY: GAUGE_TOKEN = 923;
pub const GAUGE_TOKEN_VARIOMETER_RATE: GAUGE_TOKEN = 924;
pub const GAUGE_TOKEN_VARIOMETER_SWITCH: GAUGE_TOKEN = 925;
pub const GAUGE_TOKEN_RELATIVE_WIND_VELOCITY_BODY_X: GAUGE_TOKEN = 926;
pub const GAUGE_TOKEN_RELATIVE_WIND_VELOCITY_BODY_Y: GAUGE_TOKEN = 927;
pub const GAUGE_TOKEN_RELATIVE_WIND_VELOCITY_BODY_Z: GAUGE_TOKEN = 928;
pub const GAUGE_TOKEN_ACCELERATION_WORLD_X: GAUGE_TOKEN = 929;
pub const GAUGE_TOKEN_ACCELERATION_WORLD_Y: GAUGE_TOKEN = 930;
pub const GAUGE_TOKEN_ACCELERATION_WORLD_Z: GAUGE_TOKEN = 931;
pub const GAUGE_TOKEN_ACCELERATION_BODY_X: GAUGE_TOKEN = 932;
pub const GAUGE_TOKEN_ACCELERATION_BODY_Y: GAUGE_TOKEN = 933;
pub const GAUGE_TOKEN_ACCELERATION_BODY_Z: GAUGE_TOKEN = 934;
pub const GAUGE_TOKEN_PLANE_ALT_ABOVE_GROUND: GAUGE_TOKEN = 935;
pub const GAUGE_TOKEN_MAGNETIC_COMPASS: GAUGE_TOKEN = 936;
pub const GAUGE_TOKEN_TURN_INDICATOR_RATE: GAUGE_TOKEN = 937;
pub const GAUGE_TOKEN_TURN_INDICATOR_SWITCH: GAUGE_TOKEN = 938;
pub const GAUGE_TOKEN_BRAKE_DEPENDENT_HYDRAULIC_PRESSURE: GAUGE_TOKEN = 939;
pub const GAUGE_TOKEN_FLY_BY_WIRE_ELAC_SWITCH: GAUGE_TOKEN = 940;
pub const GAUGE_TOKEN_FLY_BY_WIRE_FAC_SWITCH: GAUGE_TOKEN = 941;
pub const GAUGE_TOKEN_FLY_BY_WIRE_SEC_SWITCH: GAUGE_TOKEN = 942;
pub const GAUGE_TOKEN_FLY_BY_WIRE_ELAC_FAILED: GAUGE_TOKEN = 943;
pub const GAUGE_TOKEN_FLY_BY_WIRE_FAC_FAILED: GAUGE_TOKEN = 944;
pub const GAUGE_TOKEN_FLY_BY_WIRE_SEC_FAILED: GAUGE_TOKEN = 945;
pub const GAUGE_TOKEN_GEAR_EMERGENCY_HANDLE_POSITION: GAUGE_TOKEN = 946;
pub const GAUGE_TOKEN_GEAR_WARNING: GAUGE_TOKEN = 947;
pub const GAUGE_TOKEN_TAILWHEEL_LOCK_ON: GAUGE_TOKEN = 948;
pub const GAUGE_TOKEN_ANTISKID_BRAKES_ACTIVE: GAUGE_TOKEN = 949;
pub const GAUGE_TOKEN_RETRACT_FLOAT_SWITCH: GAUGE_TOKEN = 950;
pub const GAUGE_TOKEN_STEER_INPUT_CONTROL: GAUGE_TOKEN = 951;
pub const GAUGE_TOKEN_STALL_ALPHA: GAUGE_TOKEN = 952;
pub const GAUGE_TOKEN_DECISION_ALTITUDE_MSL: GAUGE_TOKEN = 954;
pub const GAUGE_TOKEN_WATER_BALLAST_VALVE: GAUGE_TOKEN = 955;
pub const GAUGE_TOKEN_AUTOPILOT_RPM_HOLD: GAUGE_TOKEN = 956;
pub const GAUGE_TOKEN_AUTOPILOT_PITCH_HOLD_REF: GAUGE_TOKEN = 957;
pub const GAUGE_TOKEN_AUTOPILOT_MAX_BANK: GAUGE_TOKEN = 958;
pub const GAUGE_TOKEN_PROP_FEATHER_SWITCH: GAUGE_TOKEN = 959;
pub const GAUGE_TOKEN_MASTER_IGNITION_SWITCH: GAUGE_TOKEN = 960;
pub const GAUGE_TOKEN_BLEED_AIR_SOURCE_CONTROL: GAUGE_TOKEN = 961;
pub const GAUGE_TOKEN_STRUCTURAL_ICE_PCT: GAUGE_TOKEN = 962;
pub const GAUGE_TOKEN_ROTOR_BRAKE_HANDLE_POS: GAUGE_TOKEN = 963;
pub const GAUGE_TOKEN_ROTOR_BRAKE_ACTIVE: GAUGE_TOKEN = 964;
pub const GAUGE_TOKEN_ROTOR_CLUTCH_SWITCH_POS: GAUGE_TOKEN = 965;
pub const GAUGE_TOKEN_ROTOR_CLUTCH_ACTIVE: GAUGE_TOKEN = 966;
pub const GAUGE_TOKEN_ROTOR_GOV_SWITCH_POS: GAUGE_TOKEN = 967;
pub const GAUGE_TOKEN_ROTOR_GOV_ACTIVE: GAUGE_TOKEN = 968;
pub const GAUGE_TOKEN_ROTOR_LATERAL_TRIM_PCT: GAUGE_TOKEN = 969;
pub const GAUGE_TOKEN_DISK_PITCH_ANGLE: GAUGE_TOKEN = 970;
pub const GAUGE_TOKEN_DISK_BANK_ANGLE: GAUGE_TOKEN = 971;
pub const GAUGE_TOKEN_DISK_PITCH_PCT: GAUGE_TOKEN = 972;
pub const GAUGE_TOKEN_DISK_BANK_PCT: GAUGE_TOKEN = 973;
pub const GAUGE_TOKEN_TOW_RELEASE_HANDLE: GAUGE_TOKEN = 974;
pub const GAUGE_TOKEN_APU_PCT_RPM: GAUGE_TOKEN = 975;
pub const GAUGE_TOKEN_APU_PCT_STARTER: GAUGE_TOKEN = 976;
pub const GAUGE_TOKEN_APU_VOLTS: GAUGE_TOKEN = 977;
pub const GAUGE_TOKEN_APU_GENERATOR_SWITCH: GAUGE_TOKEN = 978;
pub const GAUGE_TOKEN_APU_GENERATOR_ACTIVE: GAUGE_TOKEN = 979;
pub const GAUGE_TOKEN_APU_ON_FIRE_DETECTED: GAUGE_TOKEN = 980;
pub const GAUGE_TOKEN_PRESSURIZATION_CABIN_ALTITUDE: GAUGE_TOKEN = 981;
pub const GAUGE_TOKEN_PRESSURIZATION_CABIN_ALTITUDE_GOAL: GAUGE_TOKEN = 982;
pub const GAUGE_TOKEN_PRESSURIZATION_CABIN_ALTITUDE_RATE: GAUGE_TOKEN = 983;
pub const GAUGE_TOKEN_PRESSURIZATION_PRESSURE_DIFFERENTIAL: GAUGE_TOKEN = 984;
pub const GAUGE_TOKEN_PRESSURIZATION_DUMP_SWITCH: GAUGE_TOKEN = 985;
pub const GAUGE_TOKEN_FIRE_BOTTLE_SWITCH: GAUGE_TOKEN = 986;
pub const GAUGE_TOKEN_FIRE_BOTTLE_DISCHARGED: GAUGE_TOKEN = 987;
pub const GAUGE_TOKEN_CABIN_NO_SMOKING_ALERT_SWITCH: GAUGE_TOKEN = 988;
pub const GAUGE_TOKEN_CABIN_SEATBELTS_ALERT_SWITCH: GAUGE_TOKEN = 989;
pub const GAUGE_TOKEN_GPWS_WARNING: GAUGE_TOKEN = 990;
pub const GAUGE_TOKEN_GPWS_SYSTEM_ACTIVE: GAUGE_TOKEN = 991;
pub const GAUGE_TOKEN_IS_LATITUDE_LONGITUDE_FREEZE_ON: GAUGE_TOKEN = 992;
pub const GAUGE_TOKEN_IS_ALTITUDE_FREEZE_ON: GAUGE_TOKEN = 993;
pub const GAUGE_TOKEN_NOSEWHEEL_LOCK_ON: GAUGE_TOKEN = 994;
pub const GAUGE_TOKEN_PAYLOAD_STATION_NUM_SIMOBJECTS: GAUGE_TOKEN = 995;
pub const GAUGE_TOKEN_FOLDING_WING_HANDLE_POSITION: GAUGE_TOKEN = 996;
pub const GAUGE_TOKEN_TAILHOOK_HANDLE: GAUGE_TOKEN = 997;
pub const GAUGE_TOKEN_LAUNCHBAR_POSITION: GAUGE_TOKEN = 998;
pub const GAUGE_TOKEN_LAUNCHBAR_SWITCH: GAUGE_TOKEN = 999;
pub const GAUGE_TOKEN_LAUNCHBAR_HELD_EXTENDED: GAUGE_TOKEN = 1000;
pub const GAUGE_TOKEN_AUTOPILOT_PITCH_HOLD: GAUGE_TOKEN = 1001;
pub const GAUGE_TOKEN_NUMBER_OF_CATAPULTS: GAUGE_TOKEN = 1002;
pub const GAUGE_TOKEN_HOLDBACK_BAR_INSTALLED: GAUGE_TOKEN = 1003;
pub const GAUGE_TOKEN_BLAST_SHIELD_POSITION: GAUGE_TOKEN = 1004;
pub const GAUGE_TOKEN_CATAPULT_STROKE_POSITION: GAUGE_TOKEN = 1005;
pub const GAUGE_TOKEN_RECIP_ENG_DETONATING: GAUGE_TOKEN = 1006;
pub const GAUGE_TOKEN_RECIP_ENG_CYLINDER_HEALTH: GAUGE_TOKEN = 1007;
pub const GAUGE_TOKEN_RECIP_ENG_NUM_CYLINDERS: GAUGE_TOKEN = 1008;
pub const GAUGE_TOKEN_RECIP_ENG_NUM_CYLINDERS_FAILED: GAUGE_TOKEN = 1009;
pub const GAUGE_TOKEN_RECIP_ENG_ANTIDETONATION_TANK_VALVE: GAUGE_TOKEN = 1010;
pub const GAUGE_TOKEN_RECIP_ENG_ANTIDETONATION_TANK_QUANTITY: GAUGE_TOKEN = 1011;
pub const GAUGE_TOKEN_RECIP_ENG_ANTIDETONATION_TANK_MAX_QUANTITY: GAUGE_TOKEN = 1012;
pub const GAUGE_TOKEN_RECIP_ENG_NITROUS_TANK_VALVE: GAUGE_TOKEN = 1013;
pub const GAUGE_TOKEN_RECIP_ENG_NITROUS_TANK_QUANTITY: GAUGE_TOKEN = 1014;
pub const GAUGE_TOKEN_RECIP_ENG_NITROUS_TANK_MAX_QUANTITY: GAUGE_TOKEN = 1015;
pub const GAUGE_TOKEN_TURB_ENG_AFTERBURNER_STAGE_ACTIVE: GAUGE_TOKEN = 1016;
pub const GAUGE_TOKEN_TURB_ENG_AFTERBURNER_PCT_ACTIVE: GAUGE_TOKEN = 1017;
pub const GAUGE_TOKEN_FUEL_DUMP_SWITCH: GAUGE_TOKEN = 1018;
pub const GAUGE_TOKEN_FUEL_DUMP_ACTIVE: GAUGE_TOKEN = 1019;
pub const GAUGE_TOKEN_COLLECTIVE_POSITION: GAUGE_TOKEN = 1020;
pub const GAUGE_TOKEN_IS_ATTITUDE_FREEZE_ON: GAUGE_TOKEN = 1021;
pub const GAUGE_TOKEN_NUM_SLING_CABLES: GAUGE_TOKEN = 1022;
pub const GAUGE_TOKEN_SLING_OBJECT_ATTACHED: GAUGE_TOKEN = 1023;
pub const GAUGE_TOKEN_SLING_CABLE_BROKEN: GAUGE_TOKEN = 1024;
pub const GAUGE_TOKEN_SLING_CABLE_EXTENDED_LENGTH: GAUGE_TOKEN = 1025;
pub const GAUGE_TOKEN_SLING_ACTIVE_PAYLOAD_STATION: GAUGE_TOKEN = 1026;
pub const GAUGE_TOKEN_SLING_HOIST_PERCENT_DEPLOYED: GAUGE_TOKEN = 1027;
pub const GAUGE_TOKEN_SLING_HOIST_SWITCH: GAUGE_TOKEN = 1028;
pub const GAUGE_TOKEN_SLING_HOOK_IN_PICKUP_MODE: GAUGE_TOKEN = 1029;
pub const GAUGE_TOKEN_CABLE_CAUGHT_BY_TAILHOOK: GAUGE_TOKEN = 1030;
pub const GAUGE_TOKEN_ADF_VOLUME: GAUGE_TOKEN = 1031;
pub const GAUGE_TOKEN_AILERON_TRIM_DISABLED: GAUGE_TOKEN = 1032;
pub const GAUGE_TOKEN_ALTERNATOR_BREAKER_PULLED: GAUGE_TOKEN = 1033;
pub const GAUGE_TOKEN_ALTERNATOR_CONNECTION_ON: GAUGE_TOKEN = 1034;
pub const GAUGE_TOKEN_ANIMATION_DELTA_TIME: GAUGE_TOKEN = 1035;
pub const GAUGE_TOKEN_ANNUNCIATOR_SWITCH: GAUGE_TOKEN = 1036;
pub const GAUGE_TOKEN_APU_BLEED_PRESSURE_RECEIVED_BY_ENGINE: GAUGE_TOKEN = 1037;
pub const GAUGE_TOKEN_APU_SWITCH: GAUGE_TOKEN = 1038;
pub const GAUGE_TOKEN_ATC_AIRPORT_IS_TOWERED: GAUGE_TOKEN = 1039;
pub const GAUGE_TOKEN_ATC_CLEARED_LANDING: GAUGE_TOKEN = 1040;
pub const GAUGE_TOKEN_ATC_CLEARED_TAKEOFF: GAUGE_TOKEN = 1041;
pub const GAUGE_TOKEN_ATC_CLEARED_TAXI: GAUGE_TOKEN = 1042;
pub const GAUGE_TOKEN_ATC_RUNWAY_AIRPORT_NAME: GAUGE_TOKEN = 1043;
pub const GAUGE_TOKEN_ATC_RUNWAY_DISTANCE: GAUGE_TOKEN = 1044;
pub const GAUGE_TOKEN_ATC_RUNWAY_END_DISTANCE: GAUGE_TOKEN = 1045;
pub const GAUGE_TOKEN_ATC_RUNWAY_HEADING_DEGREES_TRUE: GAUGE_TOKEN = 1046;
pub const GAUGE_TOKEN_ATC_RUNWAY_LENGTH: GAUGE_TOKEN = 1047;
pub const GAUGE_TOKEN_ATC_RUNWAY_RELATIVE_POSITION_X: GAUGE_TOKEN = 1048;
pub const GAUGE_TOKEN_ATC_RUNWAY_RELATIVE_POSITION_Y: GAUGE_TOKEN = 1049;
pub const GAUGE_TOKEN_ATC_RUNWAY_RELATIVE_POSITION_Z: GAUGE_TOKEN = 1050;
pub const GAUGE_TOKEN_ATC_RUNWAY_SELECTED: GAUGE_TOKEN = 1051;
pub const GAUGE_TOKEN_ATC_RUNWAY_START_DISTANCE: GAUGE_TOKEN = 1052;
pub const GAUGE_TOKEN_ATC_RUNWAY_TDPOINT_RELATIVE_POSITION_X: GAUGE_TOKEN = 1053;
pub const GAUGE_TOKEN_ATC_RUNWAY_TDPOINT_RELATIVE_POSITION_Y: GAUGE_TOKEN = 1054;
pub const GAUGE_TOKEN_ATC_RUNWAY_TDPOINT_RELATIVE_POSITION_Z: GAUGE_TOKEN = 1055;
pub const GAUGE_TOKEN_ATC_RUNWAY_WIDTH: GAUGE_TOKEN = 1056;
pub const GAUGE_TOKEN_AUDIO_PANEL_VOLUME: GAUGE_TOKEN = 1057;
pub const GAUGE_TOKEN_AUTOBRAKES_ACTIVE: GAUGE_TOKEN = 1058;
pub const GAUGE_TOKEN_AUTOPILOT_AIRSPEED_MAX_CALCULATED: GAUGE_TOKEN = 1059;
pub const GAUGE_TOKEN_AUTOPILOT_AIRSPEED_MIN_CALCULATED: GAUGE_TOKEN = 1060;
pub const GAUGE_TOKEN_AUTOPILOT_ALTITUDE_ARM: GAUGE_TOKEN = 1061;
pub const GAUGE_TOKEN_AUTOPILOT_ALTITUDE_SLOT_INDEX: GAUGE_TOKEN = 1062;
pub const GAUGE_TOKEN_AUTOPILOT_APPROACH_ACTIVE: GAUGE_TOKEN = 1063;
pub const GAUGE_TOKEN_AUTOPILOT_APPROACH_ARM: GAUGE_TOKEN = 1064;
pub const GAUGE_TOKEN_AUTOPILOT_APPROACH_CAPTURED: GAUGE_TOKEN = 1065;
pub const GAUGE_TOKEN_AUTOPILOT_APPROACH_IS_LOCALIZER: GAUGE_TOKEN = 1065;
pub const GAUGE_TOKEN_AUTOPILOT_BANK_MODE: GAUGE_TOKEN = 1066;
pub const GAUGE_TOKEN_AUTOPILOT_DISENGAGED: GAUGE_TOKEN = 1067;
pub const GAUGE_TOKEN_AUTOPILOT_GLIDESLOPE_ACTIVE: GAUGE_TOKEN = 1068;
pub const GAUGE_TOKEN_AUTOPILOT_GLIDESLOPE_ARM: GAUGE_TOKEN = 1069;
pub const GAUGE_TOKEN_AUTOPILOT_HEADING_SLOT_INDEX: GAUGE_TOKEN = 1070;
pub const GAUGE_TOKEN_AUTOPILOT_MANAGED_INDEX: GAUGE_TOKEN = 1071;
pub const GAUGE_TOKEN_AUTOPILOT_MANAGED_SPEED_IN_MACH: GAUGE_TOKEN = 1072;
pub const GAUGE_TOKEN_AUTOPILOT_MANAGED_THROTTLE_ACTIVE: GAUGE_TOKEN = 1073;
pub const GAUGE_TOKEN_AUTOPILOT_MAX_BANK_ID: GAUGE_TOKEN = 1074;
pub const GAUGE_TOKEN_AUTOPILOT_RPM_SLOT_INDEX: GAUGE_TOKEN = 1075;
pub const GAUGE_TOKEN_AUTOPILOT_SPEED_SLOT_INDEX: GAUGE_TOKEN = 1076;
pub const GAUGE_TOKEN_AUTOPILOT_THROTTLE_MAX_THRUST: GAUGE_TOKEN = 1077;
pub const GAUGE_TOKEN_AUTOPILOT_VS_SLOT_INDEX: GAUGE_TOKEN = 1078;
pub const GAUGE_TOKEN_BAGGAGELOADER_ANGLE_CURRENT: GAUGE_TOKEN = 1079;
pub const GAUGE_TOKEN_BAGGAGELOADER_ANGLE_TARGET: GAUGE_TOKEN = 1080;
pub const GAUGE_TOKEN_BAGGAGELOADER_END_RAMP_Y: GAUGE_TOKEN = 1081;
pub const GAUGE_TOKEN_BAGGAGELOADER_END_RAMP_Z: GAUGE_TOKEN = 1082;
pub const GAUGE_TOKEN_BAGGAGELOADER_PIVOT_Y: GAUGE_TOKEN = 1083;
pub const GAUGE_TOKEN_BAGGAGELOADER_PIVOT_Z: GAUGE_TOKEN = 1084;
pub const GAUGE_TOKEN_BATTERY_BREAKER_PULLED: GAUGE_TOKEN = 1085;
pub const GAUGE_TOKEN_BATTERY_CONNECTION_ON: GAUGE_TOKEN = 1086;
pub const GAUGE_TOKEN_BLEED_AIR_APU: GAUGE_TOKEN = 1087;
pub const GAUGE_TOKEN_BLEED_AIR_ENGINE: GAUGE_TOKEN = 1088;
pub const GAUGE_TOKEN_BOARDINGRAMP_ELEVATION_CURRENT: GAUGE_TOKEN = 1089;
pub const GAUGE_TOKEN_BOARDINGRAMP_ELEVATION_TARGET: GAUGE_TOKEN = 1090;
pub const GAUGE_TOKEN_BOARDINGRAMP_END_POSITION_Y: GAUGE_TOKEN = 1091;
pub const GAUGE_TOKEN_BOARDINGRAMP_END_POSITION_Z: GAUGE_TOKEN = 1092;
pub const GAUGE_TOKEN_BOARDINGRAMP_ORIENTATION_CURRENT: GAUGE_TOKEN = 1093;
pub const GAUGE_TOKEN_BOARDINGRAMP_ORIENTATION_TARGET: GAUGE_TOKEN = 1094;
pub const GAUGE_TOKEN_BOARDINGRAMP_START_POSITION_Y: GAUGE_TOKEN = 1095;
pub const GAUGE_TOKEN_BOARDINGRAMP_START_POSITION_Z: GAUGE_TOKEN = 1096;
pub const GAUGE_TOKEN_BRAKES_LEFT_POS_EX1: GAUGE_TOKEN = 1097;
pub const GAUGE_TOKEN_BRAKES_RIGHT_POS_EX1: GAUGE_TOKEN = 1098;
pub const GAUGE_TOKEN_BREAKER_ADF: GAUGE_TOKEN = 1099;
pub const GAUGE_TOKEN_BREAKER_ALTFLD: GAUGE_TOKEN = 1100;
pub const GAUGE_TOKEN_BREAKER_AUTOPILOT: GAUGE_TOKEN = 1101;
pub const GAUGE_TOKEN_BREAKER_AVNBUS1: GAUGE_TOKEN = 1102;
pub const GAUGE_TOKEN_BREAKER_AVNBUS2: GAUGE_TOKEN = 1103;
pub const GAUGE_TOKEN_BREAKER_AVNFAN: GAUGE_TOKEN = 1104;
pub const GAUGE_TOKEN_BREAKER_FLAP: GAUGE_TOKEN = 1105;
pub const GAUGE_TOKEN_BREAKER_GPS: GAUGE_TOKEN = 1106;
pub const GAUGE_TOKEN_BREAKER_INST: GAUGE_TOKEN = 1107;
pub const GAUGE_TOKEN_BREAKER_INSTLTS: GAUGE_TOKEN = 1108;
pub const GAUGE_TOKEN_BREAKER_LTS_PWR: GAUGE_TOKEN = 1109;
pub const GAUGE_TOKEN_BREAKER_NAVCOM1: GAUGE_TOKEN = 1110;
pub const GAUGE_TOKEN_BREAKER_NAVCOM2: GAUGE_TOKEN = 1111;
pub const GAUGE_TOKEN_BREAKER_NAVCOM3: GAUGE_TOKEN = 1112;
pub const GAUGE_TOKEN_BREAKER_TURNCOORD: GAUGE_TOKEN = 1113;
pub const GAUGE_TOKEN_BREAKER_WARN: GAUGE_TOKEN = 1114;
pub const GAUGE_TOKEN_BREAKER_XPNDR: GAUGE_TOKEN = 1115;
pub const GAUGE_TOKEN_BUS_BREAKER_PULLED: GAUGE_TOKEN = 1116;
pub const GAUGE_TOKEN_BUS_CONNECTION_ON: GAUGE_TOKEN = 1117;
pub const GAUGE_TOKEN_BUS_LOOKUP_INDEX: GAUGE_TOKEN = 1118;
pub const GAUGE_TOKEN_CATERINGTRUCK_AIRCRAFT_DOOR_CONTACT_OFFSET_Z: GAUGE_TOKEN = 1119;
pub const GAUGE_TOKEN_CATERINGTRUCK_ELEVATION_CURRENT: GAUGE_TOKEN = 1120;
pub const GAUGE_TOKEN_CATERINGTRUCK_ELEVATION_TARGET: GAUGE_TOKEN = 1121;
pub const GAUGE_TOKEN_CATERINGTRUCK_OPENING_CURRENT: GAUGE_TOKEN = 1122;
pub const GAUGE_TOKEN_CATERINGTRUCK_OPENING_TARGET: GAUGE_TOKEN = 1123;
pub const GAUGE_TOKEN_CIRCUIT_BREAKER_PULLED: GAUGE_TOKEN = 1124;
pub const GAUGE_TOKEN_CIRCUIT_CONNECTION_ON: GAUGE_TOKEN = 1125;
pub const GAUGE_TOKEN_CIRCUIT_NAVCOM1_ON: GAUGE_TOKEN = 1126;
pub const GAUGE_TOKEN_CIRCUIT_NAVCOM2_ON: GAUGE_TOKEN = 1127;
pub const GAUGE_TOKEN_CIRCUIT_NAVCOM3_ON: GAUGE_TOKEN = 1128;
pub const GAUGE_TOKEN_CIRCUIT_ON: GAUGE_TOKEN = 1129;
pub const GAUGE_TOKEN_CIRCUIT_SWITCH_ON: GAUGE_TOKEN = 1130;
pub const GAUGE_TOKEN_COM1_STORED_FREQUENCY: GAUGE_TOKEN = 1131;
pub const GAUGE_TOKEN_COM2_STORED_FREQUENCY: GAUGE_TOKEN = 1132;
pub const GAUGE_TOKEN_COM3_STORED_FREQUENCY: GAUGE_TOKEN = 1133;
pub const GAUGE_TOKEN_COM_ACTIVE_FREQUENCY: GAUGE_TOKEN = 1134;
pub const GAUGE_TOKEN_COM_RECEIVE: GAUGE_TOKEN = 1135;
pub const GAUGE_TOKEN_COM_STANDBY_FREQUENCY: GAUGE_TOKEN = 1136;
pub const GAUGE_TOKEN_COM_VOLUME: GAUGE_TOKEN = 1137;
pub const GAUGE_TOKEN_COPILOT_TRANSMITTER_TYPE: GAUGE_TOKEN = 1138;
pub const GAUGE_TOKEN_COPILOT_TRANSMITTING: GAUGE_TOKEN = 1139;
pub const GAUGE_TOKEN_ELEVATOR_TRIM_DISABLED: GAUGE_TOKEN = 1140;
pub const GAUGE_TOKEN_ELEVATOR_TRIM_NEUTRAL: GAUGE_TOKEN = 1141;
pub const GAUGE_TOKEN_ELT_ACTIVE: GAUGE_TOKEN = 1142;
pub const GAUGE_TOKEN_EXTERNAL_POWER_AVAILABLE: GAUGE_TOKEN = 1143;
pub const GAUGE_TOKEN_EXTERNAL_POWER_BREAKER_PULLED: GAUGE_TOKEN = 1144;
pub const GAUGE_TOKEN_EXTERNAL_POWER_CONNECTION_ON: GAUGE_TOKEN = 1145;
pub const GAUGE_TOKEN_EXTERNAL_POWER_ON: GAUGE_TOKEN = 1146;
pub const GAUGE_TOKEN_FLIGHT_DIRECTOR_BANK_EX1: GAUGE_TOKEN = 1147;
pub const GAUGE_TOKEN_FLIGHT_DIRECTOR_PITCH_EX1: GAUGE_TOKEN = 1148;
pub const GAUGE_TOKEN_FUELSYSTEM_ENGINE_PRESSURE: GAUGE_TOKEN = 1149;
pub const GAUGE_TOKEN_FUELSYSTEM_JUNCTION_SETTING: GAUGE_TOKEN = 1150;
pub const GAUGE_TOKEN_FUELSYSTEM_LINE_FUEL_FLOW: GAUGE_TOKEN = 1151;
pub const GAUGE_TOKEN_FUELSYSTEM_LINE_FUEL_LEVEL: GAUGE_TOKEN = 1152;
pub const GAUGE_TOKEN_FUELSYSTEM_LINE_FUEL_PRESSURE: GAUGE_TOKEN = 1153;
pub const GAUGE_TOKEN_FUELSYSTEM_PUMP_ACTIVE: GAUGE_TOKEN = 1154;
pub const GAUGE_TOKEN_FUELSYSTEM_PUMP_SWITCH: GAUGE_TOKEN = 1155;
pub const GAUGE_TOKEN_FUELSYSTEM_TANK_CAPACITY: GAUGE_TOKEN = 1156;
pub const GAUGE_TOKEN_FUELSYSTEM_TANK_LEVEL: GAUGE_TOKEN = 1157;
pub const GAUGE_TOKEN_FUELSYSTEM_TANK_QUANTITY: GAUGE_TOKEN = 1158;
pub const GAUGE_TOKEN_FUELSYSTEM_TANK_WEIGHT: GAUGE_TOKEN = 1159;
pub const GAUGE_TOKEN_FUELSYSTEM_TRIGGER_STATUS: GAUGE_TOKEN = 1160;
pub const GAUGE_TOKEN_FUELSYSTEM_VALVE_OPEN: GAUGE_TOKEN = 1161;
pub const GAUGE_TOKEN_FUELSYSTEM_VALVE_SWITCH: GAUGE_TOKEN = 1162;
pub const GAUGE_TOKEN_FUELTRUCK_HOSE_DEPLOYED: GAUGE_TOKEN = 1163;
pub const GAUGE_TOKEN_FUELTRUCK_HOSE_END_POSX: GAUGE_TOKEN = 1164;
pub const GAUGE_TOKEN_FUELTRUCK_HOSE_END_POSZ: GAUGE_TOKEN = 1165;
pub const GAUGE_TOKEN_FUELTRUCK_HOSE_END_RELATIVE_HEADING: GAUGE_TOKEN = 1166;
pub const GAUGE_TOKEN_FUEL_TRANSFERT_PUMP_ON: GAUGE_TOKEN = 1167;
pub const GAUGE_TOKEN_GENERAL_ENGINE1_THROTTLE_MANAGED_MODE: GAUGE_TOKEN = 1168;
pub const GAUGE_TOKEN_GENERAL_ENGINE2_THROTTLE_MANAGED_MODE: GAUGE_TOKEN = 1169;
pub const GAUGE_TOKEN_GENERAL_ENGINE3_THROTTLE_MANAGED_MODE: GAUGE_TOKEN = 1170;
pub const GAUGE_TOKEN_GENERAL_ENGINE4_THROTTLE_MANAGED_MODE: GAUGE_TOKEN = 1171;
pub const GAUGE_TOKEN_GENERAL_ENG_COMBUSTION_EX1: GAUGE_TOKEN = 1172;
pub const GAUGE_TOKEN_GENERAL_ENG_FUEL_PUMP_SWITCH_EX1: GAUGE_TOKEN = 1173;
pub const GAUGE_TOKEN_GENERAL_ENG_HOBBS_ELAPSED_TIME: GAUGE_TOKEN = 1174;
pub const GAUGE_TOKEN_GPS_FLIGHTPLAN_TOTAL_DISTANCE: GAUGE_TOKEN = 1175;
pub const GAUGE_TOKEN_GROUNDPOWERUNIT_HOSE_DEPLOYED: GAUGE_TOKEN = 1176;
pub const GAUGE_TOKEN_GROUNDPOWERUNIT_HOSE_END_POSX: GAUGE_TOKEN = 1177;
pub const GAUGE_TOKEN_GROUNDPOWERUNIT_HOSE_END_POSZ: GAUGE_TOKEN = 1178;
pub const GAUGE_TOKEN_GROUNDPOWERUNIT_HOSE_END_RELATIVE_HEADING: GAUGE_TOKEN = 1179;
pub const GAUGE_TOKEN_INTERACTIVE_POINT_BANK: GAUGE_TOKEN = 1180;
pub const GAUGE_TOKEN_INTERACTIVE_POINT_HEADING: GAUGE_TOKEN = 1181;
pub const GAUGE_TOKEN_INTERACTIVE_POINT_JETWAY_LEFT_BEND: GAUGE_TOKEN = 1182;
pub const GAUGE_TOKEN_INTERACTIVE_POINT_JETWAY_LEFT_DEPLOYMENT: GAUGE_TOKEN = 1183;
pub const GAUGE_TOKEN_INTERACTIVE_POINT_JETWAY_RIGHT_BEND: GAUGE_TOKEN = 1184;
pub const GAUGE_TOKEN_INTERACTIVE_POINT_JETWAY_RIGHT_DEPLOYMENT: GAUGE_TOKEN = 1185;
pub const GAUGE_TOKEN_INTERACTIVE_POINT_JETWAY_TOP_HORIZONTAL: GAUGE_TOKEN = 1186;
pub const GAUGE_TOKEN_INTERACTIVE_POINT_JETWAY_TOP_VERTICAL: GAUGE_TOKEN = 1187;
pub const GAUGE_TOKEN_INTERACTIVE_POINT_OPEN: GAUGE_TOKEN = 1188;
pub const GAUGE_TOKEN_INTERACTIVE_POINT_PITCH: GAUGE_TOKEN = 1189;
pub const GAUGE_TOKEN_INTERACTIVE_POINT_POSX: GAUGE_TOKEN = 1190;
pub const GAUGE_TOKEN_INTERACTIVE_POINT_POSY: GAUGE_TOKEN = 1191;
pub const GAUGE_TOKEN_INTERACTIVE_POINT_POSZ: GAUGE_TOKEN = 1192;
pub const GAUGE_TOKEN_INTERACTIVE_POINT_TYPE: GAUGE_TOKEN = 1193;
pub const GAUGE_TOKEN_INTERCOM_MODE: GAUGE_TOKEN = 1194;
pub const GAUGE_TOKEN_INTERCOM_SYSTEM_ACTIVE: GAUGE_TOKEN = 1195;
pub const GAUGE_TOKEN_IS_ANY_INTERIOR_LIGHT_ON: GAUGE_TOKEN = 1196;
pub const GAUGE_TOKEN_JETWAY_HOOD_LEFT_BEND: GAUGE_TOKEN = 1197;
pub const GAUGE_TOKEN_JETWAY_HOOD_LEFT_DEPLOYMENT: GAUGE_TOKEN = 1198;
pub const GAUGE_TOKEN_JETWAY_HOOD_RIGHT_BEND: GAUGE_TOKEN = 1199;
pub const GAUGE_TOKEN_JETWAY_HOOD_RIGHT_DEPLOYMENT: GAUGE_TOKEN = 1200;
pub const GAUGE_TOKEN_JETWAY_HOOD_TOP_HORIZONTAL: GAUGE_TOKEN = 1201;
pub const GAUGE_TOKEN_JETWAY_HOOD_TOP_VERTICAL: GAUGE_TOKEN = 1202;
pub const GAUGE_TOKEN_JETWAY_MOVING: GAUGE_TOKEN = 1203;
pub const GAUGE_TOKEN_JETWAY_WHEEL_ORIENTATION_CURRENT: GAUGE_TOKEN = 1204;
pub const GAUGE_TOKEN_JETWAY_WHEEL_ORIENTATION_TARGET: GAUGE_TOKEN = 1205;
pub const GAUGE_TOKEN_JETWAY_WHEEL_SPEED: GAUGE_TOKEN = 1206;
pub const GAUGE_TOKEN_KOHLSMAN_SETTING_STD: GAUGE_TOKEN = 1207;
pub const GAUGE_TOKEN_LIGHT_BACKLIGHT_INTENSITY: GAUGE_TOKEN = 1208;
pub const GAUGE_TOKEN_LIGHT_GLARESHIELD: GAUGE_TOKEN = 1209;
pub const GAUGE_TOKEN_LIGHT_GYROLIGHT_INTENSITY: GAUGE_TOKEN = 1210;
pub const GAUGE_TOKEN_LIGHT_HEADLIGHT_INTENSITY: GAUGE_TOKEN = 1211;
pub const GAUGE_TOKEN_LIGHT_PEDESTRAL: GAUGE_TOKEN = 1212;
pub const GAUGE_TOKEN_LIGHT_POTENTIOMETER: GAUGE_TOKEN = 1213;
pub const GAUGE_TOKEN_MARKER_BEACON_SENSITIVITY_HIGH: GAUGE_TOKEN = 1214;
pub const GAUGE_TOKEN_MARKER_BEACON_TEST_MUTE: GAUGE_TOKEN = 1215;
pub const GAUGE_TOKEN_MISSION_SCORE: GAUGE_TOKEN = 1216;
pub const GAUGE_TOKEN_NAV_VOLUME: GAUGE_TOKEN = 1217;
pub const GAUGE_TOKEN_ON_ANY_RUNWAY: GAUGE_TOKEN = 1218;
pub const GAUGE_TOKEN_PILOT_TRANSMITTER_TYPE: GAUGE_TOKEN = 1219;
pub const GAUGE_TOKEN_PILOT_TRANSMITTING: GAUGE_TOKEN = 1220;
pub const GAUGE_TOKEN_PITOT_HEAT_SWITCH: GAUGE_TOKEN = 1221;
pub const GAUGE_TOKEN_PLANE_ALT_ABOVE_GROUND_MINUS_CG: GAUGE_TOKEN = 1222;
pub const GAUGE_TOKEN_PLANE_IN_PARKING_STATE: GAUGE_TOKEN = 1223;
pub const GAUGE_TOKEN_PLANE_TOUCHDOWN_BANK_DEGREES: GAUGE_TOKEN = 1224;
pub const GAUGE_TOKEN_PLANE_TOUCHDOWN_HEADING_DEGREES_MAGNETIC: GAUGE_TOKEN = 1225;
pub const GAUGE_TOKEN_PLANE_TOUCHDOWN_HEADING_DEGREES_TRUE: GAUGE_TOKEN = 1226;
pub const GAUGE_TOKEN_PLANE_TOUCHDOWN_LATITUDE: GAUGE_TOKEN = 1227;
pub const GAUGE_TOKEN_PLANE_TOUCHDOWN_LONGITUDE: GAUGE_TOKEN = 1228;
pub const GAUGE_TOKEN_PLANE_TOUCHDOWN_NORMAL_VELOCITY: GAUGE_TOKEN = 1229;
pub const GAUGE_TOKEN_PLANE_TOUCHDOWN_PITCH_DEGREES: GAUGE_TOKEN = 1230;
pub const GAUGE_TOKEN_PUSHBACK_ATTACHED: GAUGE_TOKEN = 1231;
pub const GAUGE_TOKEN_PUSHBACK_AVAILABLE: GAUGE_TOKEN = 1232;
pub const GAUGE_TOKEN_RECIP_ENG_ENGINE_MASTER_SWITCH: GAUGE_TOKEN = 1233;
pub const GAUGE_TOKEN_RECIP_ENG_GLOW_PLUG_ACTIVE: GAUGE_TOKEN = 1234;
pub const GAUGE_TOKEN_REJECTED_TAKEOFF_BRAKES_ACTIVE: GAUGE_TOKEN = 1235;
pub const GAUGE_TOKEN_RUDDER_TRIM_DISABLED: GAUGE_TOKEN = 1236;
pub const GAUGE_TOKEN_SHUTOFF_VALVE_PULLED: GAUGE_TOKEN = 1237;
pub const GAUGE_TOKEN_SLOPE_TO_ATC_RUNWAY: GAUGE_TOKEN = 1238;
pub const GAUGE_TOKEN_SPEAKER_ACTIVE: GAUGE_TOKEN = 1239;
pub const GAUGE_TOKEN_TOTAL_UNUSABLE_FUEL_QUANTITY_GALLONS: GAUGE_TOKEN = 1240;
pub const GAUGE_TOKEN_TURB_ENGINE_1_COMMANDED_N1: GAUGE_TOKEN = 1241;
pub const GAUGE_TOKEN_TURB_ENGINE_1_FREE_TURBINE_TORQUE: GAUGE_TOKEN = 1242;
pub const GAUGE_TOKEN_TURB_ENGINE_1_THROTTLE_COMMANDED_N1: GAUGE_TOKEN = 1243;
pub const GAUGE_TOKEN_TURB_ENGINE_2_COMMANDED_N1: GAUGE_TOKEN = 1244;
pub const GAUGE_TOKEN_TURB_ENGINE_2_FREE_TURBINE_TORQUE: GAUGE_TOKEN = 1245;
pub const GAUGE_TOKEN_TURB_ENGINE_2_THROTTLE_COMMANDED_N1: GAUGE_TOKEN = 1246;
pub const GAUGE_TOKEN_TURB_ENGINE_3_COMMANDED_N1: GAUGE_TOKEN = 1247;
pub const GAUGE_TOKEN_TURB_ENGINE_3_FREE_TURBINE_TORQUE: GAUGE_TOKEN = 1248;
pub const GAUGE_TOKEN_TURB_ENGINE_3_THROTTLE_COMMANDED_N1: GAUGE_TOKEN = 1249;
pub const GAUGE_TOKEN_TURB_ENGINE_4_COMMANDED_N1: GAUGE_TOKEN = 1250;
pub const GAUGE_TOKEN_TURB_ENGINE_4_FREE_TURBINE_TORQUE: GAUGE_TOKEN = 1251;
pub const GAUGE_TOKEN_TURB_ENGINE_4_THROTTLE_COMMANDED_N1: GAUGE_TOKEN = 1252;
pub const GAUGE_TOKEN_TURB_ENG_IGNITION_SWITCH_EX1: GAUGE_TOKEN = 1253;
pub const GAUGE_TOKEN_TURB_ENG_IS_IGNITING: GAUGE_TOKEN = 1254;
pub const GAUGE_TOKEN_TURN_COORDINATOR_BALL_POS_INV: GAUGE_TOKEN = 1255;
pub const GAUGE_TOKEN_WAGON_BACK_LINK_LENGTH: GAUGE_TOKEN = 1256;
pub const GAUGE_TOKEN_WAGON_BACK_LINK_ORIENTATION: GAUGE_TOKEN = 1257;
pub const GAUGE_TOKEN_WAGON_BACK_LINK_START_POSZ: GAUGE_TOKEN = 1258;
pub const GAUGE_TOKEN_WAGON_FRONT_LINK_LENGTH: GAUGE_TOKEN = 1259;
pub const GAUGE_TOKEN_WAGON_FRONT_LINK_ORIENTATION: GAUGE_TOKEN = 1260;
pub const GAUGE_TOKEN_WAGON_FRONT_LINK_START_POSZ: GAUGE_TOKEN = 1261;
pub const GAUGE_TOKEN_WINDSHIELD_DEICE_SWITCH: GAUGE_TOKEN = 1262;
pub const GAUGE_TOKEN_WINDSHIELD_WIND_VELOCITY: GAUGE_TOKEN = 1263;
pub const GAUGE_TOKEN_GPS_OBS_ACTIVE: GAUGE_TOKEN = 1264;
pub const GAUGE_TOKEN_GPS_OBS_VALUE: GAUGE_TOKEN = 1265;
pub const GAUGE_TOKEN_HAND_ANIM_STATE: GAUGE_TOKEN = 1266;
pub const GAUGE_TOKEN_FUELSYSTEM_TANK_TOTAL_QUANTITY: GAUGE_TOKEN = 1267;
pub const GAUGE_TOKEN_BATTERY_ESTIMATED_CAPACITY_PCT: GAUGE_TOKEN = 1268;
pub const GAUGE_TOKEN_CONTACT_POINT_COMPRESSION: GAUGE_TOKEN = 1269;
pub const GAUGE_TOKEN_AUTOPILOT_AVIONICS_MANAGED: GAUGE_TOKEN = 1270;
pub const GAUGE_TOKEN_AUTOPILOT_BANK_HOLD_REF: GAUGE_TOKEN = 1271;
pub const GAUGE_TOKEN_CONTACT_POINT_POSITION: GAUGE_TOKEN = 1272;
pub const GAUGE_TOKEN_OIL_COOLING_FLAPS_POSITION: GAUGE_TOKEN = 1273;
pub const GAUGE_TOKEN_RADIATOR_COOLING_FLAPS_POSITION: GAUGE_TOKEN = 1274;
pub const GAUGE_TOKEN_INTERACTIVE_POINT_GOAL: GAUGE_TOKEN = 1275;
pub const GAUGE_TOKEN_COM_RECEIVE_EX1: GAUGE_TOKEN = 1276;
pub const GAUGE_TOKEN_RECIP_ENG_ANTIDETONATION_FLOW_RATE: GAUGE_TOKEN = 1277;
pub const GAUGE_TOKEN_CIRCUIT_COM_ON: GAUGE_TOKEN = 1278;
pub const GAUGE_TOKEN_CIRCUIT_NAV_ON: GAUGE_TOKEN = 1279;
pub const GAUGE_TOKEN_YOKE_POS_X_LINEAR: GAUGE_TOKEN = 1280;
pub const GAUGE_TOKEN_TACAN_DRIVES_NAV1: GAUGE_TOKEN = 1281;
pub const GAUGE_TOKEN_RACE_LAST_LAP_TIME: GAUGE_TOKEN = 1282;
pub const GAUGE_TOKEN_CIRCUIT_NAVCOM4_ON: GAUGE_TOKEN = 1283;
pub const GAUGE_TOKEN_BREAKER_NAVCOM4: GAUGE_TOKEN = 1284;
pub const GAUGE_TOKEN_C_GAUGE_TOKEN: GAUGE_TOKEN = 1285;
pub type GAUGE_TOKEN = ::std::os::raw::c_int;
pub const VAR_TYPE_VAR_TYPE_NONE: VAR_TYPE = 0;
pub const VAR_TYPE_TYPE_BOOL8: VAR_TYPE = 1;
pub const VAR_TYPE_TYPE_UINT8: VAR_TYPE = 2;
pub const VAR_TYPE_TYPE_SINT8: VAR_TYPE = 3;
pub const VAR_TYPE_TYPE_FLAGS8: VAR_TYPE = 4;
pub const VAR_TYPE_TYPE_ENUM8: VAR_TYPE = 5;
pub const VAR_TYPE_TYPE_BOOL16: VAR_TYPE = 6;
pub const VAR_TYPE_TYPE_ANGL16: VAR_TYPE = 7;
pub const VAR_TYPE_TYPE_UINT16: VAR_TYPE = 8;
pub const VAR_TYPE_TYPE_SINT16: VAR_TYPE = 9;
pub const VAR_TYPE_TYPE_UIF16: VAR_TYPE = 10;
pub const VAR_TYPE_TYPE_SIF16: VAR_TYPE = 11;
pub const VAR_TYPE_TYPE_FLAGS16: VAR_TYPE = 12;
pub const VAR_TYPE_TYPE_ENUM16: VAR_TYPE = 13;
pub const VAR_TYPE_TYPE_BCD16: VAR_TYPE = 14;
pub const VAR_TYPE_TYPE_BCO16: VAR_TYPE = 15;
pub const VAR_TYPE_TYPE_VAR16: VAR_TYPE = 16;
pub const VAR_TYPE_TYPE_BOOL32: VAR_TYPE = 17;
pub const VAR_TYPE_TYPE_ANGL32: VAR_TYPE = 18;
pub const VAR_TYPE_TYPE_UINT32: VAR_TYPE = 19;
pub const VAR_TYPE_TYPE_SINT32: VAR_TYPE = 20;
pub const VAR_TYPE_TYPE_UIF32: VAR_TYPE = 21;
pub const VAR_TYPE_TYPE_SIF32: VAR_TYPE = 22;
pub const VAR_TYPE_TYPE_FLAGS32: VAR_TYPE = 23;
pub const VAR_TYPE_TYPE_ENUM32: VAR_TYPE = 24;
pub const VAR_TYPE_TYPE_VAR32: VAR_TYPE = 25;
pub const VAR_TYPE_TYPE_ANGL48: VAR_TYPE = 26;
pub const VAR_TYPE_TYPE_SINT48: VAR_TYPE = 27;
pub const VAR_TYPE_TYPE_UIF48: VAR_TYPE = 28;
pub const VAR_TYPE_TYPE_SIF48: VAR_TYPE = 29;
pub const VAR_TYPE_TYPE_UINT64: VAR_TYPE = 30;
pub const VAR_TYPE_TYPE_SINT64: VAR_TYPE = 31;
pub const VAR_TYPE_TYPE_SIF64: VAR_TYPE = 32;
pub const VAR_TYPE_TYPE_FLOAT64: VAR_TYPE = 33;
pub const VAR_TYPE_TYPE_BOOL: VAR_TYPE = 34;
pub const VAR_TYPE_TYPE_FLAGS: VAR_TYPE = 35;
pub const VAR_TYPE_TYPE_ENUM: VAR_TYPE = 36;
pub const VAR_TYPE_TYPE_VOID: VAR_TYPE = 37;
pub const VAR_TYPE_TYPE_PVOID: VAR_TYPE = 38;
pub const VAR_TYPE_TYPE_PUINT32: VAR_TYPE = 39;
pub const VAR_TYPE_TYPE_PSINT32: VAR_TYPE = 40;
pub const VAR_TYPE_TYPE_PFLOAT64: VAR_TYPE = 41;
pub const VAR_TYPE_VAR_TYPE_MAX: VAR_TYPE = 42;
pub type VAR_TYPE = ::std::os::raw::c_int;
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union UNIVERSAL_VAR {
    pub n: FLOAT64,
    pub b: BOOL,
    pub e: ENUM,
    pub f: FLAGS,
    pub p: PVOID,
    pub d: VAR32,
    pub o: VAR32,
}
#[test]
fn bindgen_test_layout_UNIVERSAL_VAR() {
    assert_eq!(
        ::std::mem::size_of::<UNIVERSAL_VAR>(),
        8usize,
        concat!("Size of: ", stringify!(UNIVERSAL_VAR))
    );
    assert_eq!(
        ::std::mem::align_of::<UNIVERSAL_VAR>(),
        4usize,
        concat!("Alignment of ", stringify!(UNIVERSAL_VAR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNIVERSAL_VAR>())).n as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNIVERSAL_VAR),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNIVERSAL_VAR>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNIVERSAL_VAR),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNIVERSAL_VAR>())).e as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNIVERSAL_VAR),
            "::",
            stringify!(e)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNIVERSAL_VAR>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNIVERSAL_VAR),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNIVERSAL_VAR>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNIVERSAL_VAR),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNIVERSAL_VAR>())).d as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNIVERSAL_VAR),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UNIVERSAL_VAR>())).o as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UNIVERSAL_VAR),
            "::",
            stringify!(o)
        )
    );
}
impl ::std::fmt::Debug for UNIVERSAL_VAR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "UNIVERSAL_VAR {{ union }}")
    }
}
pub type PUNIVERSAL_VAR = *mut UNIVERSAL_VAR;
pub type PPUNIVERSAL_VAR = *mut *mut UNIVERSAL_VAR;
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct MODULE_VAR {
    pub id: GAUGE_TOKEN,
    pub var_ptr: PVOID,
    pub var_type: VAR_TYPE,
    pub var_value: UNIVERSAL_VAR,
    pub var_old: UNIVERSAL_VAR,
}
#[test]
fn bindgen_test_layout_MODULE_VAR() {
    assert_eq!(
        ::std::mem::size_of::<MODULE_VAR>(),
        32usize,
        concat!("Size of: ", stringify!(MODULE_VAR))
    );
    assert_eq!(
        ::std::mem::align_of::<MODULE_VAR>(),
        4usize,
        concat!("Alignment of ", stringify!(MODULE_VAR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MODULE_VAR>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MODULE_VAR),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MODULE_VAR>())).var_ptr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MODULE_VAR),
            "::",
            stringify!(var_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MODULE_VAR>())).var_type as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MODULE_VAR),
            "::",
            stringify!(var_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MODULE_VAR>())).var_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MODULE_VAR),
            "::",
            stringify!(var_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MODULE_VAR>())).var_old as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MODULE_VAR),
            "::",
            stringify!(var_old)
        )
    );
}
impl ::std::fmt::Debug for MODULE_VAR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "MODULE_VAR {{ id: {:?}, var_ptr: {:?}, var_type: {:?}, var_value: {:?}, var_old: {:?} }}" , self . id , self . var_ptr , self . var_type , self . var_value , self . var_old)
    }
}
pub type PMODULE_VAR = *mut MODULE_VAR;
pub type PPMODULE_VAR = *mut *mut MODULE_VAR;
#[repr(C)]
pub struct IGaugeCDrawableCreateParameters__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IGaugeCDrawableCreateParameters {
    pub vtable_: *const IGaugeCDrawableCreateParameters__bindgen_vtable,
}
pub const IGaugeCDrawableCreateParameters_PARAMETER_TYPE_PARAMETER_TYPE_NONE:
    IGaugeCDrawableCreateParameters_PARAMETER_TYPE = 0;
pub const IGaugeCDrawableCreateParameters_PARAMETER_TYPE_PARAMETER_TYPE_BOOL:
    IGaugeCDrawableCreateParameters_PARAMETER_TYPE = 1;
pub const IGaugeCDrawableCreateParameters_PARAMETER_TYPE_PARAMETER_TYPE_FLOAT:
    IGaugeCDrawableCreateParameters_PARAMETER_TYPE = 2;
pub const IGaugeCDrawableCreateParameters_PARAMETER_TYPE_PARAMETER_TYPE_INT:
    IGaugeCDrawableCreateParameters_PARAMETER_TYPE = 3;
pub const IGaugeCDrawableCreateParameters_PARAMETER_TYPE_PARAMETER_TYPE_STRING:
    IGaugeCDrawableCreateParameters_PARAMETER_TYPE = 4;
pub type IGaugeCDrawableCreateParameters_PARAMETER_TYPE = ::std::os::raw::c_int;
#[test]
fn bindgen_test_layout_IGaugeCDrawableCreateParameters() {
    assert_eq!(
        ::std::mem::size_of::<IGaugeCDrawableCreateParameters>(),
        8usize,
        concat!("Size of: ", stringify!(IGaugeCDrawableCreateParameters))
    );
    assert_eq!(
        ::std::mem::align_of::<IGaugeCDrawableCreateParameters>(),
        4usize,
        concat!("Alignment of ", stringify!(IGaugeCDrawableCreateParameters))
    );
}
#[repr(C)]
pub struct IGaugeCDrawableDrawParameters__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IGaugeCDrawableDrawParameters {
    pub vtable_: *const IGaugeCDrawableDrawParameters__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_IGaugeCDrawableDrawParameters() {
    assert_eq!(
        ::std::mem::size_of::<IGaugeCDrawableDrawParameters>(),
        8usize,
        concat!("Size of: ", stringify!(IGaugeCDrawableDrawParameters))
    );
    assert_eq!(
        ::std::mem::align_of::<IGaugeCDrawableDrawParameters>(),
        4usize,
        concat!("Alignment of ", stringify!(IGaugeCDrawableDrawParameters))
    );
}
#[repr(C)]
pub struct IGaugeCDrawable__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IGaugeCDrawable {
    pub vtable_: *const IGaugeCDrawable__bindgen_vtable,
}
pub const IGaugeCDrawable_TAKES_DC: ::std::os::raw::c_int = 1;
pub const IGaugeCDrawable_TAKES_PIMAGE: ::std::os::raw::c_int = 2;
pub const IGaugeCDrawable_NOT_RESIZABLE: ::std::os::raw::c_int = 4;
pub const IGaugeCDrawable_DRAWS_ALPHA: ::std::os::raw::c_int = 8;
pub const IGaugeCDrawable_NO_TRANSPARENCY: ::std::os::raw::c_int = 16;
pub const IGaugeCDrawable_MASK_TRANSPARENCY: ::std::os::raw::c_int = 32;
pub const IGaugeCDrawable_DOUBLE_BUFFER: ::std::os::raw::c_int = 64;
pub type IGaugeCDrawable__bindgen_ty_1 = ::std::os::raw::c_int;
#[test]
fn bindgen_test_layout_IGaugeCDrawable() {
    assert_eq!(
        ::std::mem::size_of::<IGaugeCDrawable>(),
        8usize,
        concat!("Size of: ", stringify!(IGaugeCDrawable))
    );
    assert_eq!(
        ::std::mem::align_of::<IGaugeCDrawable>(),
        4usize,
        concat!("Alignment of ", stringify!(IGaugeCDrawable))
    );
}
#[repr(C)]
pub struct IGaugeCCallback__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IGaugeCCallback {
    pub vtable_: *const IGaugeCCallback__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_IGaugeCCallback() {
    assert_eq!(
        ::std::mem::size_of::<IGaugeCCallback>(),
        8usize,
        concat!("Size of: ", stringify!(IGaugeCCallback))
    );
    assert_eq!(
        ::std::mem::align_of::<IGaugeCCallback>(),
        4usize,
        concat!("Alignment of ", stringify!(IGaugeCCallback))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NetOut {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NetIn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ISerializableGaugeCCallback {
    pub _base: IGaugeCCallback,
}
#[test]
fn bindgen_test_layout_ISerializableGaugeCCallback() {
    assert_eq!(
        ::std::mem::size_of::<ISerializableGaugeCCallback>(),
        8usize,
        concat!("Size of: ", stringify!(ISerializableGaugeCCallback))
    );
    assert_eq!(
        ::std::mem::align_of::<ISerializableGaugeCCallback>(),
        4usize,
        concat!("Alignment of ", stringify!(ISerializableGaugeCCallback))
    );
}
#[repr(C)]
pub struct IAircraftCCallback__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IAircraftCCallback {
    pub vtable_: *const IAircraftCCallback__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_IAircraftCCallback() {
    assert_eq!(
        ::std::mem::size_of::<IAircraftCCallback>(),
        8usize,
        concat!("Size of: ", stringify!(IAircraftCCallback))
    );
    assert_eq!(
        ::std::mem::align_of::<IAircraftCCallback>(),
        4usize,
        concat!("Alignment of ", stringify!(IAircraftCCallback))
    );
}
#[repr(C)]
pub struct IPanelCCallback__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IPanelCCallback {
    pub vtable_: *const IPanelCCallback__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_IPanelCCallback() {
    assert_eq!(
        ::std::mem::size_of::<IPanelCCallback>(),
        8usize,
        concat!("Size of: ", stringify!(IPanelCCallback))
    );
    assert_eq!(
        ::std::mem::align_of::<IPanelCCallback>(),
        4usize,
        concat!("Alignment of ", stringify!(IPanelCCallback))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IFSXPanelCCallback {
    pub _base: IPanelCCallback,
}
#[test]
fn bindgen_test_layout_IFSXPanelCCallback() {
    assert_eq!(
        ::std::mem::size_of::<IFSXPanelCCallback>(),
        8usize,
        concat!("Size of: ", stringify!(IFSXPanelCCallback))
    );
    assert_eq!(
        ::std::mem::align_of::<IFSXPanelCCallback>(),
        4usize,
        concat!("Alignment of ", stringify!(IFSXPanelCCallback))
    );
}
pub type GAUGE_KEY_EVENT_HANDLER =
    ::std::option::Option<unsafe extern "C" fn(event: ID32, evdata: UINT32, userdata: PVOID)>;
pub type GAUGE_KEY_EVENT_HANDLER_EX1 = ::std::option::Option<
    unsafe extern "C" fn(
        event: ID32,
        evdata0: UINT32,
        evdata1: UINT32,
        evdata2: UINT32,
        evdata3: UINT32,
        evdata4: UINT32,
        userdata: PVOID,
    ),
>;
pub const PANEL_TYPE_PANEL_TYPE_PLAIN: PANEL_TYPE = 0;
pub const PANEL_TYPE_PANEL_TYPE_HUD: PANEL_TYPE = 1;
pub const PANEL_TYPE_PANEL_TYPE_SPECIAL: PANEL_TYPE = 2;
pub const PANEL_TYPE_PANEL_TYPE_TEXTURE: PANEL_TYPE = 3;
pub const PANEL_TYPE_PANEL_TYPE_MISSION: PANEL_TYPE = 4;
pub type PANEL_TYPE = ::std::os::raw::c_int;
pub type PFN_FLOAT64 = ::std::option::Option<unsafe extern "C" fn(arg1: FLOAT64) -> FLOAT64>;
pub type PMODULE_VAR_CB = ::std::option::Option<unsafe extern "C" fn(arg1: PMODULE_VAR) -> FLOAT64>;
pub const ELEMENT_TYPE_ENUM_ELEMENT_TYPE_STATIC_IMAGE: ELEMENT_TYPE_ENUM = 0;
pub const ELEMENT_TYPE_ENUM_ELEMENT_TYPE_NEEDLE: ELEMENT_TYPE_ENUM = 1;
pub const ELEMENT_TYPE_ENUM_ELEMENT_TYPE_STRING: ELEMENT_TYPE_ENUM = 2;
pub const ELEMENT_TYPE_ENUM_ELEMENT_TYPE_SLIDER: ELEMENT_TYPE_ENUM = 3;
pub const ELEMENT_TYPE_ENUM_ELEMENT_TYPE_ICON: ELEMENT_TYPE_ENUM = 4;
pub const ELEMENT_TYPE_ENUM_ELEMENT_TYPE_MOVING_IMAGE: ELEMENT_TYPE_ENUM = 5;
pub const ELEMENT_TYPE_ENUM_ELEMENT_TYPE_SPRITE: ELEMENT_TYPE_ENUM = 6;
pub type ELEMENT_TYPE_ENUM = ::std::os::raw::c_int;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct NONLINEARITY {
    pub pt: PIXPOINT,
    pub value: FLOAT64,
    pub degrees: FLOAT64,
}
#[test]
fn bindgen_test_layout_NONLINEARITY() {
    assert_eq!(
        ::std::mem::size_of::<NONLINEARITY>(),
        24usize,
        concat!("Size of: ", stringify!(NONLINEARITY))
    );
    assert_eq!(
        ::std::mem::align_of::<NONLINEARITY>(),
        4usize,
        concat!("Alignment of ", stringify!(NONLINEARITY))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NONLINEARITY>())).pt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NONLINEARITY),
            "::",
            stringify!(pt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NONLINEARITY>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NONLINEARITY),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NONLINEARITY>())).degrees as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NONLINEARITY),
            "::",
            stringify!(degrees)
        )
    );
}
pub type PNONLINEARITY = *mut NONLINEARITY;
pub type PPNONLINEARITY = *mut *mut NONLINEARITY;
pub const FAILURE_KEY_FAIL_NONE: FAILURE_KEY = 0;
pub const FAILURE_KEY_OLD_FAIL_SYSTEM_ELECTRICAL: FAILURE_KEY = 1;
pub const FAILURE_KEY_FAIL_SYSTEM_ENGINE: FAILURE_KEY = 2;
pub const FAILURE_KEY_FAIL_SYSTEM_PITOT_STATIC: FAILURE_KEY = 3;
pub const FAILURE_KEY_FAIL_SYSTEM_VACUUM: FAILURE_KEY = 4;
pub const FAILURE_KEY_FAIL_GAUGE_ADF: FAILURE_KEY = 5;
pub const FAILURE_KEY_FAIL_GAUGE_AIRSPEED: FAILURE_KEY = 6;
pub const FAILURE_KEY_FAIL_GAUGE_ALTIMETER: FAILURE_KEY = 7;
pub const FAILURE_KEY_FAIL_GAUGE_ATTITUDE: FAILURE_KEY = 8;
pub const FAILURE_KEY_FAIL_GAUGE_COMMUNICATIONS: FAILURE_KEY = 9;
pub const FAILURE_KEY_FAIL_GAUGE_FUEL_INDICATORS: FAILURE_KEY = 10;
pub const FAILURE_KEY_FAIL_GAUGE_GYRO_HEADING: FAILURE_KEY = 11;
pub const FAILURE_KEY_FAIL_GAUGE_MAGNETIC_COMPASS: FAILURE_KEY = 12;
pub const FAILURE_KEY_OLD_FAIL_GAUGE_NAVIGATION: FAILURE_KEY = 13;
pub const FAILURE_KEY_FAIL_GAUGE_NAVIGATION_VOR1: FAILURE_KEY = 14;
pub const FAILURE_KEY_FAIL_GAUGE_NAVIGATION_VOR2: FAILURE_KEY = 15;
pub const FAILURE_KEY_OLD_FAIL_GAUGE_NAVIGATION_BOTH: FAILURE_KEY = 16;
pub const FAILURE_KEY_FAIL_GAUGE_TRANSPONDER: FAILURE_KEY = 17;
pub const FAILURE_KEY_FAIL_GAUGE_TURN_COORDINATOR: FAILURE_KEY = 18;
pub const FAILURE_KEY_FAIL_GAUGE_VERTICAL_SPEED: FAILURE_KEY = 19;
pub const FAILURE_KEY_FAIL_SYSTEM_ELECTRICAL_PANELS: FAILURE_KEY = 20;
pub const FAILURE_KEY_FAIL_SYSTEM_ELECTRICAL_AVIONICS: FAILURE_KEY = 21;
pub const FAILURE_KEY_FAIL_GAUGE_COMMUNICATIONS_COM2: FAILURE_KEY = 22;
pub const FAILURE_KEY_FAIL_KEY_MAX: FAILURE_KEY = 23;
pub type FAILURE_KEY = ::std::os::raw::c_int;
pub type PFAILURE_KEY = *mut FAILURE_KEY;
pub type PPFAILURE_KEY = *mut *mut FAILURE_KEY;
pub const FAILURE_ACTION_FAIL_ACTION_NONE: FAILURE_ACTION = 0;
pub const FAILURE_ACTION_FAIL_ACTION_FREEZE: FAILURE_ACTION = 1;
pub const FAILURE_ACTION_FAIL_ACTION_ZERO: FAILURE_ACTION = 2;
pub const FAILURE_ACTION_FAIL_ACTION_NO_DRAW: FAILURE_ACTION = 3;
pub const FAILURE_ACTION_FAIL_ACTION_COVER: FAILURE_ACTION = 4;
pub const FAILURE_ACTION_FAIL_ACTION_MAX: FAILURE_ACTION = 5;
pub type FAILURE_ACTION = ::std::os::raw::c_int;
pub type PFAILURE_ACTION = *mut FAILURE_ACTION;
pub type PPFAILURE_ACTION = *mut *mut FAILURE_ACTION;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct FAILURE_RECORD {
    pub key: FAILURE_KEY,
    pub action: FAILURE_ACTION,
    pub reserved: PVOID,
}
#[test]
fn bindgen_test_layout_FAILURE_RECORD() {
    assert_eq!(
        ::std::mem::size_of::<FAILURE_RECORD>(),
        16usize,
        concat!("Size of: ", stringify!(FAILURE_RECORD))
    );
    assert_eq!(
        ::std::mem::align_of::<FAILURE_RECORD>(),
        4usize,
        concat!("Alignment of ", stringify!(FAILURE_RECORD))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FAILURE_RECORD>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FAILURE_RECORD),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FAILURE_RECORD>())).action as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FAILURE_RECORD),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FAILURE_RECORD>())).reserved as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FAILURE_RECORD),
            "::",
            stringify!(reserved)
        )
    );
}
pub type PFAILURE_RECORD = *mut FAILURE_RECORD;
pub type PPFAILURE_RECORD = *mut *mut FAILURE_RECORD;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct IMAGE_SET {
    pub final_: PIMAGE,
    pub source: PIMAGE,
    pub reserved1: PIMAGE,
    pub reserved2: PIMAGE,
}
#[test]
fn bindgen_test_layout_IMAGE_SET() {
    assert_eq!(
        ::std::mem::size_of::<IMAGE_SET>(),
        32usize,
        concat!("Size of: ", stringify!(IMAGE_SET))
    );
    assert_eq!(
        ::std::mem::align_of::<IMAGE_SET>(),
        4usize,
        concat!("Alignment of ", stringify!(IMAGE_SET))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IMAGE_SET>())).final_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_SET),
            "::",
            stringify!(final_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IMAGE_SET>())).source as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_SET),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IMAGE_SET>())).reserved1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_SET),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IMAGE_SET>())).reserved2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IMAGE_SET),
            "::",
            stringify!(reserved2)
        )
    );
}
pub type PIMAGE_SET = *mut IMAGE_SET;
pub type PPIMAGE_SET = *mut *mut IMAGE_SET;
pub type PGAUGEHDR = *mut GAUGEHDR;
pub type PPGAUGEHDR = *mut *mut GAUGEHDR;
pub type PELEMENT_HEADER = *mut ELEMENT_HEADER;
pub type PPELEMENT_HEADER = *mut *mut ELEMENT_HEADER;
pub type PMOUSERECT = *mut MOUSERECT;
pub type PPMOUSERECT = *mut *mut MOUSERECT;
pub type GENERATE_PHASE = UINT32;
pub type PQUERY_ROUTINE = ::std::option::Option<unsafe extern "C" fn()>;
pub type PINSTALL_ROUTINE = ::std::option::Option<unsafe extern "C" fn(arg1: PVOID)>;
pub type PINITIALIZE_ROUTINE = ::std::option::Option<unsafe extern "C" fn()>;
pub type PUPDATE_ROUTINE = ::std::option::Option<unsafe extern "C" fn()>;
pub type PGENERATE_ROUTINE = ::std::option::Option<unsafe extern "C" fn(arg1: UINT32)>;
pub type PDRAW_ROUTINE = ::std::option::Option<unsafe extern "C" fn()>;
pub type PKILL_ROUTINE = ::std::option::Option<unsafe extern "C" fn()>;
pub type PGAUGE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(arg1: PGAUGEHDR, arg2: SINT32, arg3: UINT32)>;
pub type SERIALIZE_SIZE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(gauge_header: PGAUGEHDR, size: *mut UINT32)>;
pub type PSERIALIZE_SIZE_CALLBACK = SERIALIZE_SIZE_CALLBACK;
pub type SERIALIZE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(gauge_header: PGAUGEHDR, pBuf: *mut BYTE)>;
pub type PSERIALIZE_CALLBACK = SERIALIZE_CALLBACK;
pub type DESERIALIZE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(gauge_header: PGAUGEHDR, pBuf: *mut BYTE) -> bool>;
pub type PDESERIALIZE_CALLBACK = DESERIALIZE_CALLBACK;
pub type EVENT_SIZE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(gauge_header: PGAUGEHDR, size: *mut UINT32)>;
pub type PEVENT_SIZE_CALLBACK = EVENT_SIZE_CALLBACK;
pub type PROCESS_EVENT_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(gauge_header: PGAUGEHDR, pBuf: *mut BYTE) -> bool>;
pub type PPROCESS_EVENT_CALLBACK = PROCESS_EVENT_CALLBACK;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct GAUGEHDR {
    pub gauge_header_version: UINT32,
    pub gauge_name: *mut ::std::os::raw::c_char,
    pub elements_list: PPELEMENT_HEADER,
    pub query_routine: PQUERY_ROUTINE,
    pub install_routine: PINSTALL_ROUTINE,
    pub initialize_routine: PINITIALIZE_ROUTINE,
    pub update_routine: PUPDATE_ROUTINE,
    pub generate_routine: PGENERATE_ROUTINE,
    pub draw_routine: PDRAW_ROUTINE,
    pub kill_routine: PKILL_ROUTINE,
    pub reserved1: PVOID,
    pub size_x_mm: UINT32,
    pub size_y_mm: UINT32,
    pub x_adjust: FLOAT32,
    pub y_adjust: FLOAT32,
    pub reserved2: PVOID,
    pub reserved3: PVOID,
    pub position: PIXPOINT,
    pub reserved4: PVOID,
    pub mouse_rect: PMOUSERECT,
    pub gauge_callback: PGAUGE_CALLBACK,
    pub user_data: UINT32,
    pub parameters: *mut ::std::os::raw::c_char,
    pub usage: *mut ::std::os::raw::c_char,
    pub reserved5: SINT32,
    pub reserved6: PVOID,
    pub size: PIXPOINT,
    pub user_area: [FLOAT64; 10usize],
    pub flags: FLAGS32,
    pub reserved7: PVOID,
    pub guid: GUID,
    pub key_id: UINT32,
    pub serialize_size_callback: PSERIALIZE_SIZE_CALLBACK,
    pub serialize_callback: PSERIALIZE_CALLBACK,
    pub deserialize_callback: PDESERIALIZE_CALLBACK,
    pub event_size_callback: PEVENT_SIZE_CALLBACK,
    pub process_event_callback: PPROCESS_EVENT_CALLBACK,
    pub original_position: PIXPOINT,
}
#[test]
fn bindgen_test_layout_GAUGEHDR() {
    assert_eq!(
        ::std::mem::size_of::<GAUGEHDR>(),
        348usize,
        concat!("Size of: ", stringify!(GAUGEHDR))
    );
    assert_eq!(
        ::std::mem::align_of::<GAUGEHDR>(),
        4usize,
        concat!("Alignment of ", stringify!(GAUGEHDR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).gauge_header_version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(gauge_header_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).gauge_name as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(gauge_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).elements_list as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(elements_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).query_routine as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(query_routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).install_routine as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(install_routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).initialize_routine as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(initialize_routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).update_routine as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(update_routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).generate_routine as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(generate_routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).draw_routine as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(draw_routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).kill_routine as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(kill_routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).reserved1 as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).size_x_mm as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(size_x_mm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).size_y_mm as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(size_y_mm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).x_adjust as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(x_adjust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).y_adjust as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(y_adjust)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).reserved2 as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).reserved3 as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).position as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).reserved4 as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(reserved4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).mouse_rect as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(mouse_rect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).gauge_callback as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(gauge_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).user_data as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).parameters as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(parameters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).usage as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).reserved5 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(reserved5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).reserved6 as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(reserved6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).size as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).user_area as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(user_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).flags as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).reserved7 as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(reserved7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).guid as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(guid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).key_id as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(key_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GAUGEHDR>())).serialize_size_callback as *const _ as usize
        },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(serialize_size_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).serialize_callback as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(serialize_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).deserialize_callback as *const _ as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(deserialize_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).event_size_callback as *const _ as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(event_size_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).process_event_callback as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(process_event_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGEHDR>())).original_position as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGEHDR),
            "::",
            stringify!(original_position)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct ELEMENT_HEADER {
    pub element_type: ELEMENT_TYPE_ENUM,
    pub resource_id: ID,
    pub position: PIXPOINT,
    pub previous_position: PIXPOINT,
    pub ofs: PIXPOINT,
    pub gauge_header: PGAUGEHDR,
    pub previous_element: *mut ELEMENT_HEADER,
    pub next_element: *mut *mut ELEMENT_HEADER,
    pub failure_systems: PFAILURE_RECORD,
    pub image_flags: FLAGS,
    pub aircraft_special_instrumentation: FLAGS,
    pub reserved: FLAGS,
}
#[test]
fn bindgen_test_layout_ELEMENT_HEADER() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_HEADER>(),
        76usize,
        concat!("Size of: ", stringify!(ELEMENT_HEADER))
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_HEADER>(),
        4usize,
        concat!("Alignment of ", stringify!(ELEMENT_HEADER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_HEADER>())).element_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_HEADER),
            "::",
            stringify!(element_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_HEADER>())).resource_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_HEADER),
            "::",
            stringify!(resource_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_HEADER>())).position as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_HEADER),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_HEADER>())).previous_position as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_HEADER),
            "::",
            stringify!(previous_position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_HEADER>())).ofs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_HEADER),
            "::",
            stringify!(ofs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_HEADER>())).gauge_header as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_HEADER),
            "::",
            stringify!(gauge_header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_HEADER>())).previous_element as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_HEADER),
            "::",
            stringify!(previous_element)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_HEADER>())).next_element as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_HEADER),
            "::",
            stringify!(next_element)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_HEADER>())).failure_systems as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_HEADER),
            "::",
            stringify!(failure_systems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_HEADER>())).image_flags as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_HEADER),
            "::",
            stringify!(image_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_HEADER>())).aircraft_special_instrumentation as *const _
                as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_HEADER),
            "::",
            stringify!(aircraft_special_instrumentation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_HEADER>())).reserved as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_HEADER),
            "::",
            stringify!(reserved)
        )
    );
}
pub type PELEMENT_STATIC_IMAGE = *mut ELEMENT_STATIC_IMAGE;
pub type PPELEMENT_STATIC_IMAGE = *mut *mut ELEMENT_STATIC_IMAGE;
pub type PELEMENT_NEEDLE = *mut ELEMENT_NEEDLE;
pub type PPELEMENT_NEEDLE = *mut *mut ELEMENT_NEEDLE;
pub type PELEMENT_STRING = *mut ELEMENT_STRING;
pub type PPELEMENT_STRING = *mut *mut ELEMENT_STRING;
pub type PELEMENT_SLIDER = *mut ELEMENT_SLIDER;
pub type PPELEMENT_SLIDER = *mut *mut ELEMENT_SLIDER;
pub type PELEMENT_ICON = *mut ELEMENT_ICON;
pub type PPELEMENT_ICON = *mut *mut ELEMENT_ICON;
pub type PELEMENT_MOVING_IMAGE = *mut ELEMENT_MOVING_IMAGE;
pub type PPELEMENT_MOVING_IMAGE = *mut *mut ELEMENT_MOVING_IMAGE;
pub type PELEMENT_SPRITE = *mut ELEMENT_SPRITE;
pub type PPELEMENT_SPRITE = *mut *mut ELEMENT_SPRITE;
pub type PNEEDLE_UPDATE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(arg1: PELEMENT_NEEDLE) -> FLOAT64>;
pub type PSTRING_UPDATE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(arg1: PELEMENT_STRING) -> FLOAT64>;
pub type PSLIDER_UPDATE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(arg1: PELEMENT_SLIDER) -> FLOAT64>;
pub type PICON_UPDATE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(arg1: PELEMENT_ICON) -> FLOAT64>;
pub type PMOVING_IMAGE_UPDATE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(arg1: PELEMENT_MOVING_IMAGE) -> FLOAT64>;
pub type PSPRITE_UPDATE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(arg1: PELEMENT_SPRITE) -> FLOAT64>;
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct ELEMENT_STATIC_IMAGE {
    pub __bindgen_anon_1: ELEMENT_STATIC_IMAGE__bindgen_ty_1,
    pub image_data: IMAGE_SET,
    pub save_buffer: PIMAGE,
    pub hdc: HDC,
    pub hbmp: HBITMAP,
    pub reserved1: HBITMAP,
    pub reserved2: PIMAGE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ELEMENT_STATIC_IMAGE__bindgen_ty_1 {
    pub __bindgen_anon_1: ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1,
    pub header: ELEMENT_HEADER,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1 {
    pub element_type: ELEMENT_TYPE_ENUM,
    pub resource_id: ID,
    pub position: PIXPOINT,
    pub previous_position: PIXPOINT,
    pub ofs: PIXPOINT,
    pub gauge_header: PGAUGEHDR,
    pub previous_element: *mut ELEMENT_HEADER,
    pub next_element: *mut *mut ELEMENT_HEADER,
    pub failure_systems: PFAILURE_RECORD,
    pub image_flags: FLAGS,
    pub aircraft_special_instrumentation: FLAGS,
    pub reserved: FLAGS,
}
#[test]
fn bindgen_test_layout_ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1>(),
        76usize,
        concat!(
            "Size of: ",
            stringify!(ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1>()))
                .element_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(element_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1>())).resource_id
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(resource_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1>())).position
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1>()))
                .previous_position as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(previous_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1>())).ofs
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ofs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1>()))
                .gauge_header as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(gauge_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1>()))
                .previous_element as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(previous_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1>()))
                .next_element as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(next_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1>()))
                .failure_systems as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(failure_systems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1>())).image_flags
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(image_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1>()))
                .aircraft_special_instrumentation as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(aircraft_special_instrumentation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1>())).reserved
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ELEMENT_STATIC_IMAGE__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_STATIC_IMAGE__bindgen_ty_1>(),
        76usize,
        concat!("Size of: ", stringify!(ELEMENT_STATIC_IMAGE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_STATIC_IMAGE__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ELEMENT_STATIC_IMAGE__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE__bindgen_ty_1>())).header as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE__bindgen_ty_1),
            "::",
            stringify!(header)
        )
    );
}
impl ::std::fmt::Debug for ELEMENT_STATIC_IMAGE__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ELEMENT_STATIC_IMAGE__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_ELEMENT_STATIC_IMAGE() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_STATIC_IMAGE>(),
        148usize,
        concat!("Size of: ", stringify!(ELEMENT_STATIC_IMAGE))
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_STATIC_IMAGE>(),
        4usize,
        concat!("Alignment of ", stringify!(ELEMENT_STATIC_IMAGE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE>())).image_data as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE),
            "::",
            stringify!(image_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE>())).save_buffer as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE),
            "::",
            stringify!(save_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE>())).hdc as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE),
            "::",
            stringify!(hdc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE>())).hbmp as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE),
            "::",
            stringify!(hbmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE>())).reserved1 as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STATIC_IMAGE>())).reserved2 as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STATIC_IMAGE),
            "::",
            stringify!(reserved2)
        )
    );
}
impl ::std::fmt::Debug for ELEMENT_STATIC_IMAGE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "ELEMENT_STATIC_IMAGE {{ __bindgen_anon_1: {:?}, image_data: {:?}, save_buffer: {:?}, hdc: {:?}, hbmp: {:?}, reserved1: {:?}, reserved2: {:?} }}" , self . __bindgen_anon_1 , self . image_data , self . save_buffer , self . hdc , self . hbmp , self . reserved1 , self . reserved2)
    }
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct ELEMENT_NEEDLE {
    pub __bindgen_anon_1: ELEMENT_NEEDLE__bindgen_ty_1,
    pub source_var: MODULE_VAR,
    pub source_var_cb: PMODULE_VAR_CB,
    pub display_value_fn: PFN_FLOAT64,
    pub angle_fn: PFN_FLOAT64,
    pub lag_fn: PFN_FLOAT64,
    pub reference: PIXPOINT,
    pub nonlinearity_table: PNONLINEARITY,
    pub nonlinearity_table_size: UINT32,
    pub max_degrees_per_tick: SINT32,
    pub readout_goal: FLOAT64,
    pub theta_goal: FLOAT64,
    pub theta: FLOAT64,
    pub reference_old: PIXPOINT,
    pub o0: PIXPOINT,
    pub o1: PIXPOINT,
    pub o2: PIXPOINT,
    pub o3: PIXPOINT,
    pub needle_data: IMAGE_SET,
    pub texture_data: PIMAGE,
    pub texture_handle: UINT32,
    pub save_buffer: PIMAGE,
    pub save_position: PIXPOINT,
    pub update_cb: PNEEDLE_UPDATE_CALLBACK,
    pub save_size: PIXPOINT,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ELEMENT_NEEDLE__bindgen_ty_1 {
    pub __bindgen_anon_1: ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1,
    pub header: ELEMENT_HEADER,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1 {
    pub element_type: ELEMENT_TYPE_ENUM,
    pub resource_id: ID,
    pub position: PIXPOINT,
    pub previous_position: PIXPOINT,
    pub ofs: PIXPOINT,
    pub gauge_header: PGAUGEHDR,
    pub previous_element: *mut ELEMENT_HEADER,
    pub next_element: *mut *mut ELEMENT_HEADER,
    pub failure_systems: PFAILURE_RECORD,
    pub image_flags: FLAGS,
    pub aircraft_special_instrumentation: FLAGS,
    pub reserved: FLAGS,
}
#[test]
fn bindgen_test_layout_ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1>(),
        76usize,
        concat!(
            "Size of: ",
            stringify!(ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1>())).element_type
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(element_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1>())).resource_id
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(resource_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1>())).position
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1>())).previous_position
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(previous_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1>())).ofs as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ofs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1>())).gauge_header
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(gauge_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1>())).previous_element
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(previous_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1>())).next_element
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(next_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1>())).failure_systems
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(failure_systems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1>())).image_flags
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(image_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1>()))
                .aircraft_special_instrumentation as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(aircraft_special_instrumentation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1>())).reserved
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ELEMENT_NEEDLE__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_NEEDLE__bindgen_ty_1>(),
        76usize,
        concat!("Size of: ", stringify!(ELEMENT_NEEDLE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_NEEDLE__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ELEMENT_NEEDLE__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_NEEDLE__bindgen_ty_1>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE__bindgen_ty_1),
            "::",
            stringify!(header)
        )
    );
}
impl ::std::fmt::Debug for ELEMENT_NEEDLE__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ELEMENT_NEEDLE__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_ELEMENT_NEEDLE() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_NEEDLE>(),
        304usize,
        concat!("Size of: ", stringify!(ELEMENT_NEEDLE))
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_NEEDLE>(),
        4usize,
        concat!("Alignment of ", stringify!(ELEMENT_NEEDLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).source_var as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(source_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).source_var_cb as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(source_var_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).display_value_fn as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(display_value_fn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).angle_fn as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(angle_fn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).lag_fn as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(lag_fn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).reference as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).nonlinearity_table as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(nonlinearity_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).nonlinearity_table_size as *const _ as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(nonlinearity_table_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).max_degrees_per_tick as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(max_degrees_per_tick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).readout_goal as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(readout_goal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).theta_goal as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(theta_goal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).theta as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(theta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).reference_old as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(reference_old)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).o0 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(o0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).o1 as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(o1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).o2 as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(o2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).o3 as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(o3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).needle_data as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(needle_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).texture_data as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(texture_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).texture_handle as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(texture_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).save_buffer as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(save_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).save_position as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(save_position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).update_cb as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(update_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_NEEDLE>())).save_size as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_NEEDLE),
            "::",
            stringify!(save_size)
        )
    );
}
impl ::std::fmt::Debug for ELEMENT_NEEDLE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "ELEMENT_NEEDLE {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, display_value_fn: {:?}, angle_fn: {:?}, lag_fn: {:?}, reference: {:?}, nonlinearity_table: {:?}, nonlinearity_table_size: {:?}, max_degrees_per_tick: {:?}, readout_goal: {:?}, theta_goal: {:?}, theta: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, needle_data: {:?}, texture_data: {:?}, texture_handle: {:?}, save_buffer: {:?}, save_position: {:?}, update_cb: {:?}, save_size: {:?} }}" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . display_value_fn , self . angle_fn , self . lag_fn , self . reference , self . nonlinearity_table , self . nonlinearity_table_size , self . max_degrees_per_tick , self . readout_goal , self . theta_goal , self . theta , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . needle_data , self . texture_data , self . texture_handle , self . save_buffer , self . save_position , self . update_cb , self . save_size)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SEQ_REC {
    pub seq_id: SINT32,
    pub sel_str: SINT32,
    pub sel_end: SINT32,
}
#[test]
fn bindgen_test_layout_SEQ_REC() {
    assert_eq!(
        ::std::mem::size_of::<SEQ_REC>(),
        12usize,
        concat!("Size of: ", stringify!(SEQ_REC))
    );
    assert_eq!(
        ::std::mem::align_of::<SEQ_REC>(),
        4usize,
        concat!("Alignment of ", stringify!(SEQ_REC))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SEQ_REC>())).seq_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SEQ_REC),
            "::",
            stringify!(seq_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SEQ_REC>())).sel_str as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SEQ_REC),
            "::",
            stringify!(sel_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SEQ_REC>())).sel_end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SEQ_REC),
            "::",
            stringify!(sel_end)
        )
    );
}
pub type PSEQ_REC = *mut SEQ_REC;
pub type PPSEQ_REC = *mut *mut SEQ_REC;
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct ELEMENT_STRING {
    pub __bindgen_anon_1: ELEMENT_STRING__bindgen_ty_1,
    pub source_var: [MODULE_VAR; 3usize],
    pub save_var: [FLOAT64; 3usize],
    pub source_var_cb: [PMODULE_VAR_CB; 3usize],
    pub source_fn: PFN_FLOAT64,
    pub string: PCHAR,
    pub string_old: PCHAR,
    pub img_size: PIXPOINT,
    pub string_data: PIMAGE,
    pub save_buffer: PIMAGE,
    pub fg_color: COLORREF,
    pub bg_color: COLORREF,
    pub hilite_color: COLORREF,
    pub hdc: HDC,
    pub hfont: HFONT,
    pub reserved1: HFONT,
    pub hbmp: HBITMAP,
    pub reserved2: HBITMAP,
    pub hbrush: HBRUSH,
    pub reserved3: HBRUSH,
    pub font_name: [::std::os::raw::c_char; 32usize],
    pub font_weight: SINT32,
    pub font_charset: UINT8,
    pub draw_text_flags: UINT32,
    pub max_string_length: UINT16,
    pub char_width: UINT16,
    pub sel_str: SINT16,
    pub sel_end: SINT16,
    pub seq: PSEQ_REC,
    pub save_global_seq: SINT32,
    pub char_height: SINT32,
    pub update_cb: PSTRING_UPDATE_CALLBACK,
    pub use_user_color: BOOL,
    pub user_color: COLORREF,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ELEMENT_STRING__bindgen_ty_1 {
    pub __bindgen_anon_1: ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1,
    pub header: ELEMENT_HEADER,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1 {
    pub element_type: ELEMENT_TYPE_ENUM,
    pub resource_id: ID,
    pub position: PIXPOINT,
    pub previous_position: PIXPOINT,
    pub ofs: PIXPOINT,
    pub gauge_header: PGAUGEHDR,
    pub previous_element: *mut ELEMENT_HEADER,
    pub next_element: *mut *mut ELEMENT_HEADER,
    pub failure_systems: PFAILURE_RECORD,
    pub image_flags: FLAGS,
    pub aircraft_special_instrumentation: FLAGS,
    pub reserved: FLAGS,
}
#[test]
fn bindgen_test_layout_ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1>(),
        76usize,
        concat!(
            "Size of: ",
            stringify!(ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1>())).element_type
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(element_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1>())).resource_id
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(resource_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1>())).position
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1>())).previous_position
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(previous_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1>())).ofs as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ofs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1>())).gauge_header
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(gauge_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1>())).previous_element
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(previous_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1>())).next_element
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(next_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1>())).failure_systems
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(failure_systems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1>())).image_flags
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(image_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1>()))
                .aircraft_special_instrumentation as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(aircraft_special_instrumentation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1>())).reserved
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ELEMENT_STRING__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_STRING__bindgen_ty_1>(),
        76usize,
        concat!("Size of: ", stringify!(ELEMENT_STRING__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_STRING__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ELEMENT_STRING__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STRING__bindgen_ty_1>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING__bindgen_ty_1),
            "::",
            stringify!(header)
        )
    );
}
impl ::std::fmt::Debug for ELEMENT_STRING__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ELEMENT_STRING__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_ELEMENT_STRING() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_STRING>(),
        420usize,
        concat!("Size of: ", stringify!(ELEMENT_STRING))
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_STRING>(),
        4usize,
        concat!("Alignment of ", stringify!(ELEMENT_STRING))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).source_var as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(source_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).save_var as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(save_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).source_var_cb as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(source_var_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).source_fn as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(source_fn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).string as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).string_old as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(string_old)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).img_size as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(img_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).string_data as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(string_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).save_buffer as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(save_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).fg_color as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(fg_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).bg_color as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(bg_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).hilite_color as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(hilite_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).hdc as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(hdc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).hfont as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(hfont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).reserved1 as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).hbmp as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(hbmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).reserved2 as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).hbrush as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(hbrush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).reserved3 as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).font_name as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(font_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).font_weight as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(font_weight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).font_charset as *const _ as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(font_charset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).draw_text_flags as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(draw_text_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_STRING>())).max_string_length as *const _ as usize
        },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(max_string_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).char_width as *const _ as usize },
        382usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(char_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).sel_str as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(sel_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).sel_end as *const _ as usize },
        386usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(sel_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).seq as *const _ as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).save_global_seq as *const _ as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(save_global_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).char_height as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(char_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).update_cb as *const _ as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(update_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).use_user_color as *const _ as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(use_user_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_STRING>())).user_color as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_STRING),
            "::",
            stringify!(user_color)
        )
    );
}
impl ::std::fmt::Debug for ELEMENT_STRING {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "ELEMENT_STRING {{ __bindgen_anon_1: {:?}, source_var: {:?}, save_var: {:?}, source_var_cb: {:?}, source_fn: {:?}, string: {:?}, string_old: {:?}, img_size: {:?}, string_data: {:?}, save_buffer: {:?}, fg_color: {:?}, bg_color: {:?}, hilite_color: {:?}, hdc: {:?}, hfont: {:?}, reserved1: {:?}, hbmp: {:?}, reserved2: {:?}, hbrush: {:?}, reserved3: {:?}, font_name: {:?}, font_weight: {:?}, font_charset: {:?}, draw_text_flags: {:?}, max_string_length: {:?}, char_width: {:?}, sel_str: {:?}, sel_end: {:?}, seq: {:?}, save_global_seq: {:?}, char_height: {:?}, update_cb: {:?}, use_user_color: {:?}, user_color: {:?} }}" , self . __bindgen_anon_1 , self . source_var , self . save_var , self . source_var_cb , self . source_fn , self . string , self . string_old , self . img_size , self . string_data , self . save_buffer , self . fg_color , self . bg_color , self . hilite_color , self . hdc , self . hfont , self . reserved1 , self . hbmp , self . reserved2 , self . hbrush , self . reserved3 , self . font_name , self . font_weight , self . font_charset , self . draw_text_flags , self . max_string_length , self . char_width , self . sel_str , self . sel_end , self . seq , self . save_global_seq , self . char_height , self . update_cb , self . use_user_color , self . user_color)
    }
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct ELEMENT_SLIDER {
    pub __bindgen_anon_1: ELEMENT_SLIDER__bindgen_ty_1,
    pub source_var_x: MODULE_VAR,
    pub source_var_x_cb: PMODULE_VAR_CB,
    pub scale_x: FLOAT64,
    pub lag_fn_x: PFN_FLOAT64,
    pub source_var_y: MODULE_VAR,
    pub source_var_y_cb: PMODULE_VAR_CB,
    pub scale_y: FLOAT64,
    pub lag_fn_y: PFN_FLOAT64,
    pub slider_data: IMAGE_SET,
    pub save_buffer: PIMAGE,
    pub update_x_cb: PSLIDER_UPDATE_CALLBACK,
    pub update_y_cb: PSLIDER_UPDATE_CALLBACK,
    pub previous_x: FLOAT64,
    pub previous_y: FLOAT64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ELEMENT_SLIDER__bindgen_ty_1 {
    pub __bindgen_anon_1: ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1,
    pub header: ELEMENT_HEADER,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1 {
    pub element_type: ELEMENT_TYPE_ENUM,
    pub resource_id: ID,
    pub position: PIXPOINT,
    pub previous_position: PIXPOINT,
    pub ofs: PIXPOINT,
    pub gauge_header: PGAUGEHDR,
    pub previous_element: *mut ELEMENT_HEADER,
    pub next_element: *mut *mut ELEMENT_HEADER,
    pub failure_systems: PFAILURE_RECORD,
    pub image_flags: FLAGS,
    pub aircraft_special_instrumentation: FLAGS,
    pub reserved: FLAGS,
}
#[test]
fn bindgen_test_layout_ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1>(),
        76usize,
        concat!(
            "Size of: ",
            stringify!(ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1>())).element_type
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(element_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1>())).resource_id
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(resource_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1>())).position
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1>())).previous_position
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(previous_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1>())).ofs as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ofs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1>())).gauge_header
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(gauge_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1>())).previous_element
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(previous_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1>())).next_element
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(next_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1>())).failure_systems
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(failure_systems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1>())).image_flags
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(image_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1>()))
                .aircraft_special_instrumentation as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(aircraft_special_instrumentation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1>())).reserved
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ELEMENT_SLIDER__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_SLIDER__bindgen_ty_1>(),
        76usize,
        concat!("Size of: ", stringify!(ELEMENT_SLIDER__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_SLIDER__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ELEMENT_SLIDER__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SLIDER__bindgen_ty_1>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER__bindgen_ty_1),
            "::",
            stringify!(header)
        )
    );
}
impl ::std::fmt::Debug for ELEMENT_SLIDER__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ELEMENT_SLIDER__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_ELEMENT_SLIDER() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_SLIDER>(),
        260usize,
        concat!("Size of: ", stringify!(ELEMENT_SLIDER))
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_SLIDER>(),
        4usize,
        concat!("Alignment of ", stringify!(ELEMENT_SLIDER))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SLIDER>())).source_var_x as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER),
            "::",
            stringify!(source_var_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SLIDER>())).source_var_x_cb as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER),
            "::",
            stringify!(source_var_x_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SLIDER>())).scale_x as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER),
            "::",
            stringify!(scale_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SLIDER>())).lag_fn_x as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER),
            "::",
            stringify!(lag_fn_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SLIDER>())).source_var_y as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER),
            "::",
            stringify!(source_var_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SLIDER>())).source_var_y_cb as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER),
            "::",
            stringify!(source_var_y_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SLIDER>())).scale_y as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER),
            "::",
            stringify!(scale_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SLIDER>())).lag_fn_y as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER),
            "::",
            stringify!(lag_fn_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SLIDER>())).slider_data as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER),
            "::",
            stringify!(slider_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SLIDER>())).save_buffer as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER),
            "::",
            stringify!(save_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SLIDER>())).update_x_cb as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER),
            "::",
            stringify!(update_x_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SLIDER>())).update_y_cb as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER),
            "::",
            stringify!(update_y_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SLIDER>())).previous_x as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER),
            "::",
            stringify!(previous_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SLIDER>())).previous_y as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SLIDER),
            "::",
            stringify!(previous_y)
        )
    );
}
impl ::std::fmt::Debug for ELEMENT_SLIDER {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "ELEMENT_SLIDER {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, lag_fn_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, lag_fn_y: {:?}, slider_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . lag_fn_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . lag_fn_y , self . slider_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)
    }
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct ELEMENT_ICON {
    pub __bindgen_anon_1: ELEMENT_ICON__bindgen_ty_1,
    pub source_var: MODULE_VAR,
    pub source_var_cb: PMODULE_VAR_CB,
    pub switch_type: SINT32,
    pub switch_count: SINT32,
    pub scale: FLOAT64,
    pub offset: SINT32,
    pub num_icons: SINT32,
    pub cur_icon: SINT32,
    pub dst_icon: SINT32,
    pub picon_data: PIMAGE_SET,
    pub save_buffer: PIMAGE,
    pub update_cb: PICON_UPDATE_CALLBACK,
    pub reserved1: ID,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ELEMENT_ICON__bindgen_ty_1 {
    pub __bindgen_anon_1: ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1,
    pub header: ELEMENT_HEADER,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1 {
    pub element_type: ELEMENT_TYPE_ENUM,
    pub resource_id: ID,
    pub position: PIXPOINT,
    pub previous_position: PIXPOINT,
    pub ofs: PIXPOINT,
    pub gauge_header: PGAUGEHDR,
    pub previous_element: *mut ELEMENT_HEADER,
    pub next_element: *mut *mut ELEMENT_HEADER,
    pub failure_systems: PFAILURE_RECORD,
    pub image_flags: FLAGS,
    pub aircraft_special_instrumentation: FLAGS,
    pub reserved: FLAGS,
}
#[test]
fn bindgen_test_layout_ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1>(),
        76usize,
        concat!(
            "Size of: ",
            stringify!(ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1>())).element_type
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(element_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1>())).resource_id
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(resource_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1>())).position
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1>())).previous_position
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(previous_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1>())).ofs as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ofs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1>())).gauge_header
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(gauge_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1>())).previous_element
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(previous_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1>())).next_element
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(next_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1>())).failure_systems
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(failure_systems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1>())).image_flags
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(image_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1>()))
                .aircraft_special_instrumentation as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(aircraft_special_instrumentation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1>())).reserved
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ELEMENT_ICON__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_ICON__bindgen_ty_1>(),
        76usize,
        concat!("Size of: ", stringify!(ELEMENT_ICON__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_ICON__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ELEMENT_ICON__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_ICON__bindgen_ty_1>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON__bindgen_ty_1),
            "::",
            stringify!(header)
        )
    );
}
impl ::std::fmt::Debug for ELEMENT_ICON__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ELEMENT_ICON__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_ELEMENT_ICON() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_ICON>(),
        176usize,
        concat!("Size of: ", stringify!(ELEMENT_ICON))
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_ICON>(),
        4usize,
        concat!("Alignment of ", stringify!(ELEMENT_ICON))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_ICON>())).source_var as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON),
            "::",
            stringify!(source_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_ICON>())).source_var_cb as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON),
            "::",
            stringify!(source_var_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_ICON>())).switch_type as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON),
            "::",
            stringify!(switch_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_ICON>())).switch_count as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON),
            "::",
            stringify!(switch_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_ICON>())).scale as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_ICON>())).offset as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_ICON>())).num_icons as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON),
            "::",
            stringify!(num_icons)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_ICON>())).cur_icon as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON),
            "::",
            stringify!(cur_icon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_ICON>())).dst_icon as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON),
            "::",
            stringify!(dst_icon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_ICON>())).picon_data as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON),
            "::",
            stringify!(picon_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_ICON>())).save_buffer as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON),
            "::",
            stringify!(save_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_ICON>())).update_cb as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON),
            "::",
            stringify!(update_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_ICON>())).reserved1 as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_ICON),
            "::",
            stringify!(reserved1)
        )
    );
}
impl ::std::fmt::Debug for ELEMENT_ICON {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "ELEMENT_ICON {{ __bindgen_anon_1: {:?}, source_var: {:?}, source_var_cb: {:?}, switch_type: {:?}, switch_count: {:?}, scale: {:?}, offset: {:?}, num_icons: {:?}, cur_icon: {:?}, dst_icon: {:?}, picon_data: {:?}, save_buffer: {:?}, update_cb: {:?}, reserved1: {:?} }}" , self . __bindgen_anon_1 , self . source_var , self . source_var_cb , self . switch_type , self . switch_count , self . scale , self . offset , self . num_icons , self . cur_icon , self . dst_icon , self . picon_data , self . save_buffer , self . update_cb , self . reserved1)
    }
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct ELEMENT_MOVING_IMAGE {
    pub __bindgen_anon_1: ELEMENT_MOVING_IMAGE__bindgen_ty_1,
    pub source_var_x: MODULE_VAR,
    pub source_var_x_cb: PMODULE_VAR_CB,
    pub min_x: FLOAT64,
    pub max_x: FLOAT64,
    pub lag_x: PFN_FLOAT64,
    pub source_var_y: MODULE_VAR,
    pub source_var_y_cb: PMODULE_VAR_CB,
    pub min_y: FLOAT64,
    pub max_y: FLOAT64,
    pub lag_y: PFN_FLOAT64,
    pub scale_x: FLOAT64,
    pub scale_y: FLOAT64,
    pub offset_x: FLOAT64,
    pub offset_y: FLOAT64,
    pub save_position: PIXPOINT,
    pub image_data: IMAGE_SET,
    pub local_mask_data: IMAGE_SET,
    pub mask_data: PIMAGE,
    pub save_buffer: PIMAGE,
    pub update_x_cb: PMOVING_IMAGE_UPDATE_CALLBACK,
    pub update_y_cb: PMOVING_IMAGE_UPDATE_CALLBACK,
    pub previous_x: FLOAT64,
    pub previous_y: FLOAT64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ELEMENT_MOVING_IMAGE__bindgen_ty_1 {
    pub __bindgen_anon_1: ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1,
    pub header: ELEMENT_HEADER,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1 {
    pub element_type: ELEMENT_TYPE_ENUM,
    pub resource_id: ID,
    pub position: PIXPOINT,
    pub previous_position: PIXPOINT,
    pub ofs: PIXPOINT,
    pub gauge_header: PGAUGEHDR,
    pub previous_element: *mut ELEMENT_HEADER,
    pub next_element: *mut *mut ELEMENT_HEADER,
    pub failure_systems: PFAILURE_RECORD,
    pub image_flags: FLAGS,
    pub aircraft_special_instrumentation: FLAGS,
    pub reserved: FLAGS,
}
#[test]
fn bindgen_test_layout_ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1>(),
        76usize,
        concat!(
            "Size of: ",
            stringify!(ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1>()))
                .element_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(element_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1>())).resource_id
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(resource_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1>())).position
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1>()))
                .previous_position as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(previous_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1>())).ofs
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ofs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1>()))
                .gauge_header as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(gauge_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1>()))
                .previous_element as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(previous_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1>()))
                .next_element as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(next_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1>()))
                .failure_systems as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(failure_systems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1>())).image_flags
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(image_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1>()))
                .aircraft_special_instrumentation as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(aircraft_special_instrumentation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1>())).reserved
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ELEMENT_MOVING_IMAGE__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_MOVING_IMAGE__bindgen_ty_1>(),
        76usize,
        concat!("Size of: ", stringify!(ELEMENT_MOVING_IMAGE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_MOVING_IMAGE__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ELEMENT_MOVING_IMAGE__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE__bindgen_ty_1>())).header as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE__bindgen_ty_1),
            "::",
            stringify!(header)
        )
    );
}
impl ::std::fmt::Debug for ELEMENT_MOVING_IMAGE__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ELEMENT_MOVING_IMAGE__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_ELEMENT_MOVING_IMAGE() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_MOVING_IMAGE>(),
        356usize,
        concat!("Size of: ", stringify!(ELEMENT_MOVING_IMAGE))
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_MOVING_IMAGE>(),
        4usize,
        concat!("Alignment of ", stringify!(ELEMENT_MOVING_IMAGE))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).source_var_x as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(source_var_x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).source_var_x_cb as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(source_var_x_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).min_x as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(min_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).max_x as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(max_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).lag_x as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(lag_x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).source_var_y as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(source_var_y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).source_var_y_cb as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(source_var_y_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).min_y as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(min_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).max_y as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(max_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).lag_y as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(lag_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).scale_x as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(scale_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).scale_y as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(scale_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).offset_x as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(offset_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).offset_y as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(offset_y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).save_position as *const _ as usize
        },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(save_position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).image_data as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(image_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).local_mask_data as *const _ as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(local_mask_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).mask_data as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(mask_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).save_buffer as *const _ as usize
        },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(save_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).update_x_cb as *const _ as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(update_x_cb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).update_y_cb as *const _ as usize
        },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(update_y_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).previous_x as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(previous_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_MOVING_IMAGE>())).previous_y as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_MOVING_IMAGE),
            "::",
            stringify!(previous_y)
        )
    );
}
impl ::std::fmt::Debug for ELEMENT_MOVING_IMAGE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "ELEMENT_MOVING_IMAGE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, min_x: {:?}, max_x: {:?}, lag_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, min_y: {:?}, max_y: {:?}, lag_y: {:?}, scale_x: {:?}, scale_y: {:?}, offset_x: {:?}, offset_y: {:?}, save_position: {:?}, image_data: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, previous_x: {:?}, previous_y: {:?} }}" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . min_x , self . max_x , self . lag_x , self . source_var_y , self . source_var_y_cb , self . min_y , self . max_y , self . lag_y , self . scale_x , self . scale_y , self . offset_x , self . offset_y , self . save_position , self . image_data , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . previous_x , self . previous_y)
    }
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct ELEMENT_SPRITE {
    pub __bindgen_anon_1: ELEMENT_SPRITE__bindgen_ty_1,
    pub source_var_x: MODULE_VAR,
    pub source_var_x_cb: PMODULE_VAR_CB,
    pub scale_x: FLOAT64,
    pub source_var_y: MODULE_VAR,
    pub source_var_y_cb: PMODULE_VAR_CB,
    pub scale_y: FLOAT64,
    pub source_var_0: MODULE_VAR,
    pub source_var_0_cb: PMODULE_VAR_CB,
    pub scale_0: FLOAT64,
    pub texture_scale_x: FLOAT32,
    pub texture_scale_y: FLOAT32,
    pub reference: PIXPOINT,
    pub reference_old: PIXPOINT,
    pub o0: PIXPOINT,
    pub o1: PIXPOINT,
    pub o2: PIXPOINT,
    pub o3: PIXPOINT,
    pub os0: PIXPOINT,
    pub os1: PIXPOINT,
    pub os2: PIXPOINT,
    pub os3: PIXPOINT,
    pub sprite_data: IMAGE_SET,
    pub texture_data: PIMAGE,
    pub texture_handle: UINT32,
    pub local_mask_data: IMAGE_SET,
    pub mask_data: PIMAGE,
    pub save_buffer: PIMAGE,
    pub update_x_cb: PSPRITE_UPDATE_CALLBACK,
    pub update_y_cb: PSPRITE_UPDATE_CALLBACK,
    pub update_0_cb: PSPRITE_UPDATE_CALLBACK,
    pub previous_x: FLOAT64,
    pub previous_y: FLOAT64,
    pub previous_0: FLOAT64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ELEMENT_SPRITE__bindgen_ty_1 {
    pub __bindgen_anon_1: ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1,
    pub header: ELEMENT_HEADER,
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1 {
    pub element_type: ELEMENT_TYPE_ENUM,
    pub resource_id: ID,
    pub position: PIXPOINT,
    pub previous_position: PIXPOINT,
    pub ofs: PIXPOINT,
    pub gauge_header: PGAUGEHDR,
    pub previous_element: *mut ELEMENT_HEADER,
    pub next_element: *mut *mut ELEMENT_HEADER,
    pub failure_systems: PFAILURE_RECORD,
    pub image_flags: FLAGS,
    pub aircraft_special_instrumentation: FLAGS,
    pub reserved: FLAGS,
}
#[test]
fn bindgen_test_layout_ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1>(),
        76usize,
        concat!(
            "Size of: ",
            stringify!(ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1>())).element_type
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(element_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1>())).resource_id
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(resource_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1>())).position
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1>())).previous_position
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(previous_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1>())).ofs as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ofs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1>())).gauge_header
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(gauge_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1>())).previous_element
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(previous_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1>())).next_element
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(next_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1>())).failure_systems
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(failure_systems)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1>())).image_flags
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(image_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1>()))
                .aircraft_special_instrumentation as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(aircraft_special_instrumentation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1>())).reserved
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ELEMENT_SPRITE__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_SPRITE__bindgen_ty_1>(),
        76usize,
        concat!("Size of: ", stringify!(ELEMENT_SPRITE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_SPRITE__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ELEMENT_SPRITE__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ELEMENT_SPRITE__bindgen_ty_1>())).header as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE__bindgen_ty_1),
            "::",
            stringify!(header)
        )
    );
}
impl ::std::fmt::Debug for ELEMENT_SPRITE__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "ELEMENT_SPRITE__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_ELEMENT_SPRITE() {
    assert_eq!(
        ::std::mem::size_of::<ELEMENT_SPRITE>(),
        448usize,
        concat!("Size of: ", stringify!(ELEMENT_SPRITE))
    );
    assert_eq!(
        ::std::mem::align_of::<ELEMENT_SPRITE>(),
        4usize,
        concat!("Alignment of ", stringify!(ELEMENT_SPRITE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).source_var_x as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(source_var_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).source_var_x_cb as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(source_var_x_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).scale_x as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(scale_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).source_var_y as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(source_var_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).source_var_y_cb as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(source_var_y_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).scale_y as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(scale_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).source_var_0 as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(source_var_0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).source_var_0_cb as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(source_var_0_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).scale_0 as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(scale_0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).texture_scale_x as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(texture_scale_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).texture_scale_y as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(texture_scale_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).reference as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).reference_old as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(reference_old)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).o0 as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(o0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).o1 as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(o1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).o2 as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(o2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).o3 as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(o3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).os0 as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(os0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).os1 as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(os1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).os2 as *const _ as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(os2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).os3 as *const _ as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(os3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).sprite_data as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(sprite_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).texture_data as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(texture_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).texture_handle as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(texture_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).local_mask_data as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(local_mask_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).mask_data as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(mask_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).save_buffer as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(save_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).update_x_cb as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(update_x_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).update_y_cb as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(update_y_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).update_0_cb as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(update_0_cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).previous_x as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(previous_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).previous_y as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(previous_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ELEMENT_SPRITE>())).previous_0 as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(ELEMENT_SPRITE),
            "::",
            stringify!(previous_0)
        )
    );
}
impl ::std::fmt::Debug for ELEMENT_SPRITE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "ELEMENT_SPRITE {{ __bindgen_anon_1: {:?}, source_var_x: {:?}, source_var_x_cb: {:?}, scale_x: {:?}, source_var_y: {:?}, source_var_y_cb: {:?}, scale_y: {:?}, source_var_0: {:?}, source_var_0_cb: {:?}, scale_0: {:?}, texture_scale_x: {:?}, texture_scale_y: {:?}, reference: {:?}, reference_old: {:?}, o0: {:?}, o1: {:?}, o2: {:?}, o3: {:?}, os0: {:?}, os1: {:?}, os2: {:?}, os3: {:?}, sprite_data: {:?}, texture_data: {:?}, texture_handle: {:?}, local_mask_data: {:?}, mask_data: {:?}, save_buffer: {:?}, update_x_cb: {:?}, update_y_cb: {:?}, update_0_cb: {:?}, previous_x: {:?}, previous_y: {:?}, previous_0: {:?} }}" , self . __bindgen_anon_1 , self . source_var_x , self . source_var_x_cb , self . scale_x , self . source_var_y , self . source_var_y_cb , self . scale_y , self . source_var_0 , self . source_var_0_cb , self . scale_0 , self . texture_scale_x , self . texture_scale_y , self . reference , self . reference_old , self . o0 , self . o1 , self . o2 , self . o3 , self . os0 , self . os1 , self . os2 , self . os3 , self . sprite_data , self . texture_data , self . texture_handle , self . local_mask_data , self . mask_data , self . save_buffer , self . update_x_cb , self . update_y_cb , self . update_0_cb , self . previous_x , self . previous_y , self . previous_0)
    }
}
pub const MOUSE_RECT_TYPE_MOUSE_RECT_EOL: MOUSE_RECT_TYPE = 0;
pub const MOUSE_RECT_TYPE_MOUSE_RECT_PARENT: MOUSE_RECT_TYPE = 1;
pub const MOUSE_RECT_TYPE_MOUSE_RECT_CHILD: MOUSE_RECT_TYPE = 2;
pub const MOUSE_RECT_TYPE_MOUSE_RECT_END_PARENT: MOUSE_RECT_TYPE = 3;
pub const MOUSE_RECT_TYPE_MOUSE_RECT_USER: MOUSE_RECT_TYPE = 4;
pub type MOUSE_RECT_TYPE = ::std::os::raw::c_int;
pub const CURSOR_TYPE_CURSOR_NONE: CURSOR_TYPE = -1;
pub const CURSOR_TYPE_CURSOR_NORMAL: CURSOR_TYPE = 0;
pub const CURSOR_TYPE_CURSOR_UPARROW: CURSOR_TYPE = 1;
pub const CURSOR_TYPE_CURSOR_DOWNARROW: CURSOR_TYPE = 2;
pub const CURSOR_TYPE_CURSOR_LEFTARROW: CURSOR_TYPE = 3;
pub const CURSOR_TYPE_CURSOR_RIGHTARROW: CURSOR_TYPE = 4;
pub const CURSOR_TYPE_CURSOR_HAND: CURSOR_TYPE = 5;
pub const CURSOR_TYPE_CURSOR_CROSSHAIR: CURSOR_TYPE = 6;
pub const CURSOR_TYPE_CURSOR_GRAB: CURSOR_TYPE = 7;
pub type CURSOR_TYPE = ::std::os::raw::c_int;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct MOUSECALLBACK {
    pub relative_point: PIXPOINT,
    pub user_data: PVOID,
    pub mouse: PMOUSERECT,
    pub screen_point: PIXPOINT,
    pub reserved: PVOID,
}
#[test]
fn bindgen_test_layout_MOUSECALLBACK() {
    assert_eq!(
        ::std::mem::size_of::<MOUSECALLBACK>(),
        40usize,
        concat!("Size of: ", stringify!(MOUSECALLBACK))
    );
    assert_eq!(
        ::std::mem::align_of::<MOUSECALLBACK>(),
        4usize,
        concat!("Alignment of ", stringify!(MOUSECALLBACK))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSECALLBACK>())).relative_point as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSECALLBACK),
            "::",
            stringify!(relative_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSECALLBACK>())).user_data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSECALLBACK),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSECALLBACK>())).mouse as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSECALLBACK),
            "::",
            stringify!(mouse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSECALLBACK>())).screen_point as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSECALLBACK),
            "::",
            stringify!(screen_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSECALLBACK>())).reserved as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSECALLBACK),
            "::",
            stringify!(reserved)
        )
    );
}
pub type PMOUSECALLBACK = *mut MOUSECALLBACK;
pub type PPMOUSECALLBACK = *mut *mut MOUSECALLBACK;
pub type PMOUSE_FUNCTION =
    ::std::option::Option<unsafe extern "C" fn(arg1: PPIXPOINT, arg2: FLAGS32) -> BOOL>;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct MOUSERECT {
    pub rect_type: MOUSE_RECT_TYPE,
    pub relative_box: PIXBOX,
    pub cursor: CURSOR_TYPE,
    pub help_id: ID,
    pub mouse_flags: FLAGS,
    pub event_id: ID,
    pub mouse_function: PMOUSE_FUNCTION,
    pub api_data: PVOID,
}
#[test]
fn bindgen_test_layout_MOUSERECT() {
    assert_eq!(
        ::std::mem::size_of::<MOUSERECT>(),
        52usize,
        concat!("Size of: ", stringify!(MOUSERECT))
    );
    assert_eq!(
        ::std::mem::align_of::<MOUSERECT>(),
        4usize,
        concat!("Alignment of ", stringify!(MOUSERECT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSERECT>())).rect_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSERECT),
            "::",
            stringify!(rect_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSERECT>())).relative_box as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSERECT),
            "::",
            stringify!(relative_box)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSERECT>())).cursor as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSERECT),
            "::",
            stringify!(cursor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSERECT>())).help_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSERECT),
            "::",
            stringify!(help_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSERECT>())).mouse_flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSERECT),
            "::",
            stringify!(mouse_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSERECT>())).event_id as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSERECT),
            "::",
            stringify!(event_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSERECT>())).mouse_function as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSERECT),
            "::",
            stringify!(mouse_function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSERECT>())).api_data as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSERECT),
            "::",
            stringify!(api_data)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct MOUSE_ARG_NUMERIC_MAP {
    pub source: FLOAT64,
    pub value: FLOAT64,
}
#[test]
fn bindgen_test_layout_MOUSE_ARG_NUMERIC_MAP() {
    assert_eq!(
        ::std::mem::size_of::<MOUSE_ARG_NUMERIC_MAP>(),
        16usize,
        concat!("Size of: ", stringify!(MOUSE_ARG_NUMERIC_MAP))
    );
    assert_eq!(
        ::std::mem::align_of::<MOUSE_ARG_NUMERIC_MAP>(),
        4usize,
        concat!("Alignment of ", stringify!(MOUSE_ARG_NUMERIC_MAP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSE_ARG_NUMERIC_MAP>())).source as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSE_ARG_NUMERIC_MAP),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSE_ARG_NUMERIC_MAP>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSE_ARG_NUMERIC_MAP),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MOUSE_ARG_ID_MAP {
    pub source: SINT32,
    pub value: ID,
}
#[test]
fn bindgen_test_layout_MOUSE_ARG_ID_MAP() {
    assert_eq!(
        ::std::mem::size_of::<MOUSE_ARG_ID_MAP>(),
        8usize,
        concat!("Size of: ", stringify!(MOUSE_ARG_ID_MAP))
    );
    assert_eq!(
        ::std::mem::align_of::<MOUSE_ARG_ID_MAP>(),
        4usize,
        concat!("Alignment of ", stringify!(MOUSE_ARG_ID_MAP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSE_ARG_ID_MAP>())).source as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSE_ARG_ID_MAP),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSE_ARG_ID_MAP>())).value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSE_ARG_ID_MAP),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct MOUSE_ARG_STRING_MAP {
    pub source: SINT32,
    pub value: PSTRINGZ,
}
#[test]
fn bindgen_test_layout_MOUSE_ARG_STRING_MAP() {
    assert_eq!(
        ::std::mem::size_of::<MOUSE_ARG_STRING_MAP>(),
        12usize,
        concat!("Size of: ", stringify!(MOUSE_ARG_STRING_MAP))
    );
    assert_eq!(
        ::std::mem::align_of::<MOUSE_ARG_STRING_MAP>(),
        4usize,
        concat!("Alignment of ", stringify!(MOUSE_ARG_STRING_MAP))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSE_ARG_STRING_MAP>())).source as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSE_ARG_STRING_MAP),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSE_ARG_STRING_MAP>())).value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSE_ARG_STRING_MAP),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct MOUSE_ARG {
    pub source_var: MODULE_VAR,
    pub scale: FLOAT64,
    pub numeric_table: *mut MOUSE_ARG_NUMERIC_MAP,
    pub numeric_table_size: UINT,
    pub id_table: *mut MOUSE_ARG_ID_MAP,
    pub id_table_size: UINT,
    pub string_table: *mut MOUSE_ARG_STRING_MAP,
    pub string_table_size: UINT,
    pub numeric_callback: ::std::option::Option<
        unsafe extern "C" fn(
            number: FLOAT64,
            id: ID,
            string: PCSTRINGZ,
            source_var: *mut MODULE_VAR,
            gauge: PGAUGEHDR,
        ) -> FLOAT64,
    >,
    pub id_callback: ::std::option::Option<
        unsafe extern "C" fn(
            number: FLOAT64,
            id: ID,
            string: PCSTRINGZ,
            source_var: *mut MODULE_VAR,
            gauge: PGAUGEHDR,
        ) -> ID,
    >,
    pub string_callback: ::std::option::Option<
        unsafe extern "C" fn(
            number: FLOAT64,
            id: ID,
            string: PCSTRINGZ,
            source_var: *mut MODULE_VAR,
            gauge: PGAUGEHDR,
        ) -> PCSTRINGZ,
    >,
}
#[test]
fn bindgen_test_layout_MOUSE_ARG() {
    assert_eq!(
        ::std::mem::size_of::<MOUSE_ARG>(),
        100usize,
        concat!("Size of: ", stringify!(MOUSE_ARG))
    );
    assert_eq!(
        ::std::mem::align_of::<MOUSE_ARG>(),
        4usize,
        concat!("Alignment of ", stringify!(MOUSE_ARG))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSE_ARG>())).source_var as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSE_ARG),
            "::",
            stringify!(source_var)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSE_ARG>())).scale as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSE_ARG),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSE_ARG>())).numeric_table as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSE_ARG),
            "::",
            stringify!(numeric_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSE_ARG>())).numeric_table_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSE_ARG),
            "::",
            stringify!(numeric_table_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSE_ARG>())).id_table as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSE_ARG),
            "::",
            stringify!(id_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSE_ARG>())).id_table_size as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSE_ARG),
            "::",
            stringify!(id_table_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSE_ARG>())).string_table as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSE_ARG),
            "::",
            stringify!(string_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSE_ARG>())).string_table_size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSE_ARG),
            "::",
            stringify!(string_table_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSE_ARG>())).numeric_callback as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSE_ARG),
            "::",
            stringify!(numeric_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSE_ARG>())).id_callback as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSE_ARG),
            "::",
            stringify!(id_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MOUSE_ARG>())).string_callback as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(MOUSE_ARG),
            "::",
            stringify!(string_callback)
        )
    );
}
impl ::std::fmt::Debug for MOUSE_ARG {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "MOUSE_ARG {{ source_var: {:?}, scale: {:?}, numeric_table: {:?}, numeric_table_size: {:?}, id_table: {:?}, id_table_size: {:?}, string_table: {:?}, string_table_size: {:?}, numeric_callback: {:?}, id_callback: {:?}, string_callback: {:?} }}" , self . source_var , self . scale , self . numeric_table , self . numeric_table_size , self . id_table , self . id_table_size , self . string_table , self . string_table_size , self . numeric_callback , self . id_callback , self . string_callback)
    }
}
extern "C" {
    pub fn is_panel_window_visible_ident(panel_id: UINT32) -> BOOL;
}
extern "C" {
    pub fn tooltip_units_getset(action: ::std::os::raw::c_int, type_: ENUM) -> ENUM;
}
extern "C" {
    pub fn element_list_query(element: PELEMENT_HEADER);
}
extern "C" {
    pub fn element_list_install(element: PELEMENT_HEADER, resource_file_handle: PVOID);
}
extern "C" {
    pub fn element_list_initialize(element: PELEMENT_HEADER);
}
extern "C" {
    pub fn element_list_update(element: PELEMENT_HEADER);
}
extern "C" {
    pub fn element_list_generate(element: PELEMENT_HEADER, phase: GENERATE_PHASE);
}
extern "C" {
    pub fn element_list_plot(element: PELEMENT_HEADER);
}
extern "C" {
    pub fn element_list_erase(element: PELEMENT_HEADER);
}
extern "C" {
    pub fn element_list_kill(element: PELEMENT_HEADER);
}
extern "C" {
    pub fn mouse_list_install(rect: PMOUSERECT, gauge_header: PGAUGEHDR, size: PPIXPOINT);
}
extern "C" {
    pub fn mouse_list_register(rect: PMOUSERECT, gauge_header: PGAUGEHDR);
}
extern "C" {
    pub fn mouse_list_unregister(rect: PMOUSERECT, gauge_header: PGAUGEHDR);
}
extern "C" {
    pub fn panel_window_toggle(panel_id: UINT32) -> BOOL;
}
extern "C" {
    pub fn trigger_key_event(event_id: ID32, value: UINT32) -> ERR;
}
extern "C" {
    pub fn register_var_by_name(var: PVOID, var_type: VAR_TYPE, name: PSTRINGZ);
}
extern "C" {
    pub fn initialize_var(module_var: PMODULE_VAR);
}
extern "C" {
    pub fn initialize_var_by_name(module_var: PMODULE_VAR, name: PSTRINGZ);
}
extern "C" {
    pub fn lookup_var(module_var: PMODULE_VAR);
}
extern "C" {
    pub fn unregister_var_by_name(name: PSTRINGZ);
}
extern "C" {
    pub fn unregister_all_named_vars();
}
extern "C" {
    pub fn panel_window_close_ident(panel_id: UINT32) -> BOOL;
}
extern "C" {
    pub fn panel_window_open_ident(panel_id: UINT32) -> BOOL;
}
extern "C" {
    pub fn panel_window_toggle_hud_color();
}
extern "C" {
    pub fn panel_window_toggle_hud_units();
}
extern "C" {
    pub fn radio_stack_popup();
}
extern "C" {
    pub fn radio_stack_autoclose();
}
extern "C" {
    pub fn check_named_variable(name: PCSTRINGZ) -> ID;
}
extern "C" {
    pub fn register_named_variable(name: PCSTRINGZ) -> ID;
}
extern "C" {
    pub fn get_named_variable_value(id: ID) -> FLOAT64;
}
extern "C" {
    pub fn get_named_variable_typed_value(id: ID, units: ENUM) -> FLOAT64;
}
extern "C" {
    pub fn set_named_variable_value(id: ID, value: FLOAT64);
}
extern "C" {
    pub fn set_named_variable_typed_value(id: ID, value: FLOAT64, units: ENUM);
}
extern "C" {
    pub fn get_name_of_named_variable(id: ID) -> PCSTRINGZ;
}
extern "C" {
    pub fn panel_resource_string_get(id: ID32) -> PCSTRINGZ;
}
extern "C" {
    pub fn panel_window_toggle_menu_id(menu_id: ID32) -> BOOL;
}
extern "C" {
    pub fn element_use_color(element: PELEMENT_HEADER, override_: BOOL, color: UINT32);
}
extern "C" {
    pub fn set_gauge_flags(name: PCSTRINGZ, newflags: FLAGS32);
}
extern "C" {
    pub fn get_gauge_flags(name: PCSTRINGZ) -> FLAGS32;
}
extern "C" {
    pub fn gauge_calculator_code_precompile(
        pCompiled: *mut PCSTRINGZ,
        pCompiledSize: *mut UINT32,
        source: PCSTRINGZ,
    ) -> BOOL;
}
extern "C" {
    pub fn execute_calculator_code(
        code: PCSTRINGZ,
        fvalue: *mut FLOAT64,
        ivalue: *mut SINT32,
        svalue: *mut PCSTRINGZ,
    ) -> BOOL;
}
extern "C" {
    pub fn format_calculator_string(
        result: PSTRINGZ,
        resultsize: UINT32,
        format: PCSTRINGZ,
    ) -> BOOL;
}
extern "C" {
    pub fn get_units_enum(unitname: PCSTRINGZ) -> ENUM;
}
extern "C" {
    pub fn get_aircraft_var_enum(simvar: PCSTRINGZ) -> ENUM;
}
extern "C" {
    pub fn aircraft_varget(simvar: ENUM, units: ENUM, index: SINT32) -> FLOAT64;
}
extern "C" {
    pub fn panel_register_c_callback(name: PCSTRINGZ, pcallback: *mut IPanelCCallback) -> BOOL;
}
extern "C" {
    pub fn panel_get_registered_c_callback(name: PCSTRINGZ) -> *mut IPanelCCallback;
}
extern "C" {
    pub fn panel_get_aircraft_c_callback(name: PCSTRINGZ) -> *mut IAircraftCCallback;
}
extern "C" {
    pub fn send_key_event(event_id: ID32, value: UINT32);
}
extern "C" {
    pub fn register_key_event_handler(handler: GAUGE_KEY_EVENT_HANDLER, userdata: PVOID);
}
extern "C" {
    pub fn unregister_key_event_handler(handler: GAUGE_KEY_EVENT_HANDLER, userdata: PVOID);
}
extern "C" {
    pub fn process_shared_event_out(
        gauge_header: PGAUGEHDR,
        pBuf: *mut BYTE,
        nSize: UINT32,
    ) -> bool;
}
extern "C" {
    pub fn is_master() -> bool;
}
extern "C" {
    pub fn trigger_key_event_EX1(
        event_id: ID32,
        value0: UINT32,
        value1: UINT32,
        value2: UINT32,
        value3: UINT32,
        value4: UINT32,
    ) -> ERR;
}
extern "C" {
    pub fn register_key_event_handler_EX1(handler: GAUGE_KEY_EVENT_HANDLER_EX1, userdata: PVOID);
}
extern "C" {
    pub fn unregister_key_event_handler_EX1(handler: GAUGE_KEY_EVENT_HANDLER_EX1, userdata: PVOID);
}
#[repr(C, packed(4))]
#[derive(Debug)]
pub struct GAUGESLINKAGE {
    pub ModuleID: ID,
    pub ModuleInit: ::std::option::Option<unsafe extern "C" fn()>,
    pub ModuleDeinit: ::std::option::Option<unsafe extern "C" fn()>,
    pub ModuleFlags: FLAGS32,
    pub ModulePriority: UINT32,
    pub ModuleVersion: UINT32,
    pub gauge_header_ptr: __IncompleteArrayField<PGAUGEHDR>,
}
#[test]
fn bindgen_test_layout_GAUGESLINKAGE() {
    assert_eq!(
        ::std::mem::size_of::<GAUGESLINKAGE>(),
        32usize,
        concat!("Size of: ", stringify!(GAUGESLINKAGE))
    );
    assert_eq!(
        ::std::mem::align_of::<GAUGESLINKAGE>(),
        4usize,
        concat!("Alignment of ", stringify!(GAUGESLINKAGE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGESLINKAGE>())).ModuleID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGESLINKAGE),
            "::",
            stringify!(ModuleID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGESLINKAGE>())).ModuleInit as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGESLINKAGE),
            "::",
            stringify!(ModuleInit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGESLINKAGE>())).ModuleDeinit as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGESLINKAGE),
            "::",
            stringify!(ModuleDeinit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGESLINKAGE>())).ModuleFlags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGESLINKAGE),
            "::",
            stringify!(ModuleFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGESLINKAGE>())).ModulePriority as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGESLINKAGE),
            "::",
            stringify!(ModulePriority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGESLINKAGE>())).ModuleVersion as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGESLINKAGE),
            "::",
            stringify!(ModuleVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GAUGESLINKAGE>())).gauge_header_ptr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GAUGESLINKAGE),
            "::",
            stringify!(gauge_header_ptr)
        )
    );
}
pub type PGAUGESLINKAGE = *mut GAUGESLINKAGE;
pub type PPGAUGESLINKAGE = *mut *mut GAUGESLINKAGE;
extern "C" {
    pub static mut Linkage: GAUGESLINKAGE;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sGaugeInstallData {
    pub iSizeX: ::std::os::raw::c_int,
    pub iSizeY: ::std::os::raw::c_int,
    pub strParameters: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_sGaugeInstallData() {
    assert_eq!(
        ::std::mem::size_of::<sGaugeInstallData>(),
        16usize,
        concat!("Size of: ", stringify!(sGaugeInstallData))
    );
    assert_eq!(
        ::std::mem::align_of::<sGaugeInstallData>(),
        8usize,
        concat!("Alignment of ", stringify!(sGaugeInstallData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sGaugeInstallData>())).iSizeX as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sGaugeInstallData),
            "::",
            stringify!(iSizeX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sGaugeInstallData>())).iSizeY as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sGaugeInstallData),
            "::",
            stringify!(iSizeY)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sGaugeInstallData>())).strParameters as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sGaugeInstallData),
            "::",
            stringify!(strParameters)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sGaugeDrawData {
    pub mx: f64,
    pub my: f64,
    pub t: f64,
    pub dt: f64,
    pub winWidth: ::std::os::raw::c_int,
    pub winHeight: ::std::os::raw::c_int,
    pub fbWidth: ::std::os::raw::c_int,
    pub fbHeight: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sGaugeDrawData() {
    assert_eq!(
        ::std::mem::size_of::<sGaugeDrawData>(),
        48usize,
        concat!("Size of: ", stringify!(sGaugeDrawData))
    );
    assert_eq!(
        ::std::mem::align_of::<sGaugeDrawData>(),
        8usize,
        concat!("Alignment of ", stringify!(sGaugeDrawData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sGaugeDrawData>())).mx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sGaugeDrawData),
            "::",
            stringify!(mx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sGaugeDrawData>())).my as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sGaugeDrawData),
            "::",
            stringify!(my)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sGaugeDrawData>())).t as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sGaugeDrawData),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sGaugeDrawData>())).dt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sGaugeDrawData),
            "::",
            stringify!(dt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sGaugeDrawData>())).winWidth as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sGaugeDrawData),
            "::",
            stringify!(winWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sGaugeDrawData>())).winHeight as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sGaugeDrawData),
            "::",
            stringify!(winHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sGaugeDrawData>())).fbWidth as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sGaugeDrawData),
            "::",
            stringify!(fbWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sGaugeDrawData>())).fbHeight as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sGaugeDrawData),
            "::",
            stringify!(fbHeight)
        )
    );
}
pub type PFNGAUGECALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: FsContext,
        service_id: ::std::os::raw::c_int,
        pData: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVGcontext {
    _unused: [u8; 0],
}
pub type NVGcolor = FsColor;
pub type NVGpaint = FsPaint;
pub const NVGwinding_NVG_CCW: NVGwinding = 1;
pub const NVGwinding_NVG_CW: NVGwinding = 2;
pub type NVGwinding = ::std::os::raw::c_int;
pub const NVGsolidity_NVG_SOLID: NVGsolidity = 1;
pub const NVGsolidity_NVG_HOLE: NVGsolidity = 2;
pub type NVGsolidity = ::std::os::raw::c_int;
pub const NVGlineCap_NVG_BUTT: NVGlineCap = 0;
pub const NVGlineCap_NVG_ROUND: NVGlineCap = 1;
pub const NVGlineCap_NVG_SQUARE: NVGlineCap = 2;
pub const NVGlineCap_NVG_BEVEL: NVGlineCap = 3;
pub const NVGlineCap_NVG_MITER: NVGlineCap = 4;
pub type NVGlineCap = ::std::os::raw::c_int;
pub const NVGalign_NVG_ALIGN_LEFT: NVGalign = 1;
pub const NVGalign_NVG_ALIGN_CENTER: NVGalign = 2;
pub const NVGalign_NVG_ALIGN_RIGHT: NVGalign = 4;
pub const NVGalign_NVG_ALIGN_TOP: NVGalign = 8;
pub const NVGalign_NVG_ALIGN_MIDDLE: NVGalign = 16;
pub const NVGalign_NVG_ALIGN_BOTTOM: NVGalign = 32;
pub const NVGalign_NVG_ALIGN_BASELINE: NVGalign = 64;
pub type NVGalign = ::std::os::raw::c_int;
pub const NVGblendFactor_NVG_ZERO: NVGblendFactor = 1;
pub const NVGblendFactor_NVG_ONE: NVGblendFactor = 2;
pub const NVGblendFactor_NVG_SRC_COLOR: NVGblendFactor = 4;
pub const NVGblendFactor_NVG_ONE_MINUS_SRC_COLOR: NVGblendFactor = 8;
pub const NVGblendFactor_NVG_DST_COLOR: NVGblendFactor = 16;
pub const NVGblendFactor_NVG_ONE_MINUS_DST_COLOR: NVGblendFactor = 32;
pub const NVGblendFactor_NVG_SRC_ALPHA: NVGblendFactor = 64;
pub const NVGblendFactor_NVG_ONE_MINUS_SRC_ALPHA: NVGblendFactor = 128;
pub const NVGblendFactor_NVG_DST_ALPHA: NVGblendFactor = 256;
pub const NVGblendFactor_NVG_ONE_MINUS_DST_ALPHA: NVGblendFactor = 512;
pub const NVGblendFactor_NVG_SRC_ALPHA_SATURATE: NVGblendFactor = 1024;
pub type NVGblendFactor = ::std::os::raw::c_int;
pub const NVGcompositeOperation_NVG_SOURCE_OVER: NVGcompositeOperation = 0;
pub const NVGcompositeOperation_NVG_SOURCE_IN: NVGcompositeOperation = 1;
pub const NVGcompositeOperation_NVG_SOURCE_OUT: NVGcompositeOperation = 2;
pub const NVGcompositeOperation_NVG_ATOP: NVGcompositeOperation = 3;
pub const NVGcompositeOperation_NVG_DESTINATION_OVER: NVGcompositeOperation = 4;
pub const NVGcompositeOperation_NVG_DESTINATION_IN: NVGcompositeOperation = 5;
pub const NVGcompositeOperation_NVG_DESTINATION_OUT: NVGcompositeOperation = 6;
pub const NVGcompositeOperation_NVG_DESTINATION_ATOP: NVGcompositeOperation = 7;
pub const NVGcompositeOperation_NVG_LIGHTER: NVGcompositeOperation = 8;
pub const NVGcompositeOperation_NVG_COPY: NVGcompositeOperation = 9;
pub const NVGcompositeOperation_NVG_XOR: NVGcompositeOperation = 10;
pub type NVGcompositeOperation = ::std::os::raw::c_int;
pub use self::FsClipMode as NVGclipMode;
pub type NVGcompositeOperationState = FsCompositeOperationState;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVGglyphPosition {
    pub str_: *const ::std::os::raw::c_char,
    pub x: f32,
    pub minx: f32,
    pub maxx: f32,
}
#[test]
fn bindgen_test_layout_NVGglyphPosition() {
    assert_eq!(
        ::std::mem::size_of::<NVGglyphPosition>(),
        24usize,
        concat!("Size of: ", stringify!(NVGglyphPosition))
    );
    assert_eq!(
        ::std::mem::align_of::<NVGglyphPosition>(),
        8usize,
        concat!("Alignment of ", stringify!(NVGglyphPosition))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGglyphPosition>())).str_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGglyphPosition),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGglyphPosition>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGglyphPosition),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGglyphPosition>())).minx as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGglyphPosition),
            "::",
            stringify!(minx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGglyphPosition>())).maxx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGglyphPosition),
            "::",
            stringify!(maxx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVGtextRow {
    pub start: *const ::std::os::raw::c_char,
    pub end: *const ::std::os::raw::c_char,
    pub next: *const ::std::os::raw::c_char,
    pub width: f32,
    pub minx: f32,
    pub maxx: f32,
}
#[test]
fn bindgen_test_layout_NVGtextRow() {
    assert_eq!(
        ::std::mem::size_of::<NVGtextRow>(),
        40usize,
        concat!("Size of: ", stringify!(NVGtextRow))
    );
    assert_eq!(
        ::std::mem::align_of::<NVGtextRow>(),
        8usize,
        concat!("Alignment of ", stringify!(NVGtextRow))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGtextRow>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGtextRow),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGtextRow>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGtextRow),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGtextRow>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGtextRow),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGtextRow>())).width as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGtextRow),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGtextRow>())).minx as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGtextRow),
            "::",
            stringify!(minx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGtextRow>())).maxx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGtextRow),
            "::",
            stringify!(maxx)
        )
    );
}
pub const NVGimageFlags_NVG_IMAGE_GENERATE_MIPMAPS: NVGimageFlags = 1;
pub const NVGimageFlags_NVG_IMAGE_REPEATX: NVGimageFlags = 2;
pub const NVGimageFlags_NVG_IMAGE_REPEATY: NVGimageFlags = 4;
pub const NVGimageFlags_NVG_IMAGE_FLIPY: NVGimageFlags = 8;
pub const NVGimageFlags_NVG_IMAGE_PREMULTIPLIED: NVGimageFlags = 16;
pub const NVGimageFlags_NVG_IMAGE_NEAREST: NVGimageFlags = 32;
pub type NVGimageFlags = ::std::os::raw::c_int;
extern "C" {
    pub fn nvgBeginFrame(
        ctx: *mut NVGcontext,
        windowWidth: f32,
        windowHeight: f32,
        devicePixelRatio: f32,
    );
}
extern "C" {
    pub fn nvgCancelFrame(ctx: *mut NVGcontext);
}
extern "C" {
    pub fn nvgEndFrame(ctx: *mut NVGcontext);
}
extern "C" {
    pub fn nvgGlobalCompositeOperation(ctx: *mut NVGcontext, op: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nvgGlobalCompositeBlendFunc(
        ctx: *mut NVGcontext,
        sfactor: ::std::os::raw::c_int,
        dfactor: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn nvgGlobalCompositeBlendFuncSeparate(
        ctx: *mut NVGcontext,
        srcRGB: ::std::os::raw::c_int,
        dstRGB: ::std::os::raw::c_int,
        srcAlpha: ::std::os::raw::c_int,
        dstAlpha: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn nvgRGB(
        r: ::std::os::raw::c_uchar,
        g: ::std::os::raw::c_uchar,
        b: ::std::os::raw::c_uchar,
    ) -> NVGcolor;
}
extern "C" {
    pub fn nvgRGBf(r: f32, g: f32, b: f32) -> NVGcolor;
}
extern "C" {
    pub fn nvgRGBA(
        r: ::std::os::raw::c_uchar,
        g: ::std::os::raw::c_uchar,
        b: ::std::os::raw::c_uchar,
        a: ::std::os::raw::c_uchar,
    ) -> NVGcolor;
}
extern "C" {
    pub fn nvgRGBAf(r: f32, g: f32, b: f32, a: f32) -> NVGcolor;
}
extern "C" {
    pub fn nvgLerpRGBA(c0: NVGcolor, c1: NVGcolor, u: f32) -> NVGcolor;
}
extern "C" {
    pub fn nvgTransRGBA(c0: NVGcolor, a: ::std::os::raw::c_uchar) -> NVGcolor;
}
extern "C" {
    pub fn nvgTransRGBAf(c0: NVGcolor, a: f32) -> NVGcolor;
}
extern "C" {
    pub fn nvgHSL(h: f32, s: f32, l: f32) -> NVGcolor;
}
extern "C" {
    pub fn nvgHSLA(h: f32, s: f32, l: f32, a: ::std::os::raw::c_uchar) -> NVGcolor;
}
extern "C" {
    pub fn nvgSave(ctx: *mut NVGcontext);
}
extern "C" {
    pub fn nvgRestore(ctx: *mut NVGcontext);
}
extern "C" {
    pub fn nvgReset(ctx: *mut NVGcontext);
}
extern "C" {
    pub fn nvgSelectPath(ctx: *mut NVGcontext, pathIndex: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nvgCurrentPath(ctx: *mut NVGcontext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvgSetBuffer(ctx: *mut NVGcontext, buffer: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nvgSetClipMode(ctx: *mut NVGcontext, mode: NVGclipMode);
}
extern "C" {
    pub fn nvgSetClipped(ctx: *mut NVGcontext, clipped: bool);
}
extern "C" {
    pub fn nvgShapeAntiAlias(ctx: *mut NVGcontext, enabled: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nvgMiterLimit(ctx: *mut NVGcontext, limit: f32);
}
extern "C" {
    pub fn nvgStrokeWidth(ctx: *mut NVGcontext, size: f32);
}
extern "C" {
    pub fn nvgLineCap(ctx: *mut NVGcontext, cap: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nvgLineJoin(ctx: *mut NVGcontext, join: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nvgGlobalAlpha(ctx: *mut NVGcontext, alpha: f32);
}
extern "C" {
    pub fn nvgResetTransform(ctx: *mut NVGcontext);
}
extern "C" {
    pub fn nvgTransform(ctx: *mut NVGcontext, a: f32, b: f32, c: f32, d: f32, e: f32, f: f32);
}
extern "C" {
    pub fn nvgTranslate(ctx: *mut NVGcontext, x: f32, y: f32);
}
extern "C" {
    pub fn nvgRotate(ctx: *mut NVGcontext, angle: f32);
}
extern "C" {
    pub fn nvgSkewX(ctx: *mut NVGcontext, angle: f32);
}
extern "C" {
    pub fn nvgSkewY(ctx: *mut NVGcontext, angle: f32);
}
extern "C" {
    pub fn nvgScale(ctx: *mut NVGcontext, x: f32, y: f32);
}
extern "C" {
    pub fn nvgCurrentTransform(ctx: *mut NVGcontext, xform: *mut f32);
}
extern "C" {
    pub fn nvgTransformIdentity(dst: *mut f32);
}
extern "C" {
    pub fn nvgTransformTranslate(dst: *mut f32, tx: f32, ty: f32);
}
extern "C" {
    pub fn nvgTransformScale(dst: *mut f32, sx: f32, sy: f32);
}
extern "C" {
    pub fn nvgTransformRotate(dst: *mut f32, a: f32);
}
extern "C" {
    pub fn nvgTransformSkewX(dst: *mut f32, a: f32);
}
extern "C" {
    pub fn nvgTransformSkewY(dst: *mut f32, a: f32);
}
extern "C" {
    pub fn nvgTransformMultiply(dst: *mut f32, src: *const f32);
}
extern "C" {
    pub fn nvgTransformPremultiply(dst: *mut f32, src: *const f32);
}
extern "C" {
    pub fn nvgTransformInverse(dst: *mut f32, src: *const f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvgTransformPoint(
        dstx: *mut f32,
        dsty: *mut f32,
        xform: *const f32,
        srcx: f32,
        srcy: f32,
    );
}
extern "C" {
    pub fn nvgDegToRad(deg: f32) -> f32;
}
extern "C" {
    pub fn nvgRadToDeg(rad: f32) -> f32;
}
extern "C" {
    pub fn nvgCreateImage(
        ctx: *mut NVGcontext,
        filename: *const ::std::os::raw::c_char,
        imageFlags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvgCreateImageMem(
        ctx: *mut NVGcontext,
        imageFlags: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_uchar,
        ndata: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvgCreateImageRGBA(
        ctx: *mut NVGcontext,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        imageFlags: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvgUpdateImage(
        ctx: *mut NVGcontext,
        image: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn nvgImageSize(
        ctx: *mut NVGcontext,
        image: ::std::os::raw::c_int,
        w: *mut ::std::os::raw::c_int,
        h: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn nvgDeleteImage(ctx: *mut NVGcontext, image: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nvgLinearGradient(
        ctx: *mut NVGcontext,
        sx: f32,
        sy: f32,
        ex: f32,
        ey: f32,
        icol: NVGcolor,
        ocol: NVGcolor,
    ) -> NVGpaint;
}
extern "C" {
    pub fn nvgBoxGradient(
        ctx: *mut NVGcontext,
        x: f32,
        y: f32,
        w: f32,
        h: f32,
        r: f32,
        f: f32,
        icol: NVGcolor,
        ocol: NVGcolor,
    ) -> NVGpaint;
}
extern "C" {
    pub fn nvgRadialGradient(
        ctx: *mut NVGcontext,
        cx: f32,
        cy: f32,
        inr: f32,
        outr: f32,
        icol: NVGcolor,
        ocol: NVGcolor,
    ) -> NVGpaint;
}
extern "C" {
    pub fn nvgImagePattern(
        ctx: *mut NVGcontext,
        ox: f32,
        oy: f32,
        ex: f32,
        ey: f32,
        angle: f32,
        image: ::std::os::raw::c_int,
        alpha: f32,
    ) -> NVGpaint;
}
extern "C" {
    pub fn nvgScissor(ctx: *mut NVGcontext, x: f32, y: f32, w: f32, h: f32);
}
extern "C" {
    pub fn nvgIntersectScissor(ctx: *mut NVGcontext, x: f32, y: f32, w: f32, h: f32);
}
extern "C" {
    pub fn nvgResetScissor(ctx: *mut NVGcontext);
}
extern "C" {
    pub fn nvgResetStencil(ctx: *mut NVGcontext);
}
extern "C" {
    pub fn nvgBeginPath(ctx: *mut NVGcontext);
}
extern "C" {
    pub fn nvgMoveTo(ctx: *mut NVGcontext, x: f32, y: f32);
}
extern "C" {
    pub fn nvgLineTo(ctx: *mut NVGcontext, x: f32, y: f32);
}
extern "C" {
    pub fn nvgBezierTo(
        ctx: *mut NVGcontext,
        c1x: f32,
        c1y: f32,
        c2x: f32,
        c2y: f32,
        x: f32,
        y: f32,
    );
}
extern "C" {
    pub fn nvgQuadTo(ctx: *mut NVGcontext, cx: f32, cy: f32, x: f32, y: f32);
}
extern "C" {
    pub fn nvgArcTo(ctx: *mut NVGcontext, x1: f32, y1: f32, x2: f32, y2: f32, radius: f32);
}
extern "C" {
    pub fn nvgClosePath(ctx: *mut NVGcontext);
}
extern "C" {
    pub fn nvgPathWinding(ctx: *mut NVGcontext, dir: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nvgArc(
        ctx: *mut NVGcontext,
        cx: f32,
        cy: f32,
        r: f32,
        a0: f32,
        a1: f32,
        dir: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn nvgEllipticalArc(
        ctx: *mut NVGcontext,
        cx: f32,
        cy: f32,
        rx: f32,
        ry: f32,
        a0: f32,
        a1: f32,
        dir: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn nvgRect(ctx: *mut NVGcontext, x: f32, y: f32, w: f32, h: f32);
}
extern "C" {
    pub fn nvgRoundedRect(ctx: *mut NVGcontext, x: f32, y: f32, w: f32, h: f32, r: f32);
}
extern "C" {
    pub fn nvgRoundedRectVarying(
        ctx: *mut NVGcontext,
        x: f32,
        y: f32,
        w: f32,
        h: f32,
        radTopLeft: f32,
        radTopRight: f32,
        radBottomRight: f32,
        radBottomLeft: f32,
    );
}
extern "C" {
    pub fn nvgEllipse(ctx: *mut NVGcontext, cx: f32, cy: f32, rx: f32, ry: f32);
}
extern "C" {
    pub fn nvgCircle(ctx: *mut NVGcontext, cx: f32, cy: f32, r: f32);
}
extern "C" {
    pub fn nvgFill(ctx: *mut NVGcontext);
}
extern "C" {
    pub fn nvgStroke(ctx: *mut NVGcontext);
}
extern "C" {
    pub fn nvgCreateFont(
        ctx: *mut NVGcontext,
        name: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvgCreateFontMem(
        ctx: *mut NVGcontext,
        name: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_uchar,
        ndata: ::std::os::raw::c_int,
        freeData: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvgFindFont(
        ctx: *mut NVGcontext,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvgAddFallbackFontId(
        ctx: *mut NVGcontext,
        baseFont: ::std::os::raw::c_int,
        fallbackFont: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvgAddFallbackFont(
        ctx: *mut NVGcontext,
        baseFont: *const ::std::os::raw::c_char,
        fallbackFont: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvgFontSize(ctx: *mut NVGcontext, size: f32);
}
extern "C" {
    pub fn nvgFontBlur(ctx: *mut NVGcontext, blur: f32);
}
extern "C" {
    pub fn nvgTextLetterSpacing(ctx: *mut NVGcontext, spacing: f32);
}
extern "C" {
    pub fn nvgTextLineHeight(ctx: *mut NVGcontext, lineHeight: f32);
}
extern "C" {
    pub fn nvgTextAlign(ctx: *mut NVGcontext, align: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nvgFontFaceId(ctx: *mut NVGcontext, font: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nvgFontFace(ctx: *mut NVGcontext, font: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nvgText(
        ctx: *mut NVGcontext,
        x: f32,
        y: f32,
        string: *const ::std::os::raw::c_char,
        end: *const ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn nvgTextBox(
        ctx: *mut NVGcontext,
        x: f32,
        y: f32,
        breakRowWidth: f32,
        string: *const ::std::os::raw::c_char,
        end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn nvgTextBounds(
        ctx: *mut NVGcontext,
        x: f32,
        y: f32,
        string: *const ::std::os::raw::c_char,
        end: *const ::std::os::raw::c_char,
        bounds: *mut f32,
    ) -> f32;
}
extern "C" {
    pub fn nvgTextBoxBounds(
        ctx: *mut NVGcontext,
        x: f32,
        y: f32,
        breakRowWidth: f32,
        string: *const ::std::os::raw::c_char,
        end: *const ::std::os::raw::c_char,
        bounds: *mut f32,
    );
}
extern "C" {
    pub fn nvgTextGlyphPositions(
        ctx: *mut NVGcontext,
        x: f32,
        y: f32,
        string: *const ::std::os::raw::c_char,
        end: *const ::std::os::raw::c_char,
        positions: *mut NVGglyphPosition,
        maxPositions: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nvgTextMetrics(
        ctx: *mut NVGcontext,
        ascender: *mut f32,
        descender: *mut f32,
        lineh: *mut f32,
    );
}
extern "C" {
    pub fn nvgTextBreakLines(
        ctx: *mut NVGcontext,
        string: *const ::std::os::raw::c_char,
        end: *const ::std::os::raw::c_char,
        breakRowWidth: f32,
        rows: *mut NVGtextRow,
        maxRows: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const NVGtexture_NVG_TEXTURE_ALPHA: NVGtexture = 1;
pub const NVGtexture_NVG_TEXTURE_RGBA: NVGtexture = 2;
pub type NVGtexture = ::std::os::raw::c_int;
pub type NVGscissor = FsScissor;
pub type NVGvertex = FsVertex;
pub type NVGpath = FsPath;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NVGparams {
    pub userPtr: ::std::os::raw::c_ulonglong,
    pub edgeAntiAlias: ::std::os::raw::c_int,
    pub renderCreate: ::std::option::Option<
        unsafe extern "C" fn(uptr: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_int,
    >,
    pub renderCreateTexture: ::std::option::Option<
        unsafe extern "C" fn(
            uptr: ::std::os::raw::c_ulonglong,
            type_: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            imageFlags: ::std::os::raw::c_int,
            data: *const ::std::os::raw::c_uchar,
            debugName: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub renderDeleteTexture: ::std::option::Option<
        unsafe extern "C" fn(
            uptr: ::std::os::raw::c_ulonglong,
            image: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub renderUpdateTexture: ::std::option::Option<
        unsafe extern "C" fn(
            uptr: ::std::os::raw::c_ulonglong,
            image: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            w: ::std::os::raw::c_int,
            h: ::std::os::raw::c_int,
            data: *const ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
    >,
    pub renderGetTextureSize: ::std::option::Option<
        unsafe extern "C" fn(
            uptr: ::std::os::raw::c_ulonglong,
            image: ::std::os::raw::c_int,
            w: *mut ::std::os::raw::c_int,
            h: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub renderViewport: ::std::option::Option<
        unsafe extern "C" fn(
            uptr: ::std::os::raw::c_ulonglong,
            width: f32,
            height: f32,
            devicePixelRatio: f32,
        ),
    >,
    pub renderCancel:
        ::std::option::Option<unsafe extern "C" fn(uptr: ::std::os::raw::c_ulonglong)>,
    pub renderFlush: ::std::option::Option<unsafe extern "C" fn(uptr: ::std::os::raw::c_ulonglong)>,
    pub renderFill: ::std::option::Option<
        unsafe extern "C" fn(
            uptr: ::std::os::raw::c_ulonglong,
            paint: *mut NVGpaint,
            compositeOperation: NVGcompositeOperationState,
            scissor: *mut NVGscissor,
            fringe: f32,
            bounds: *const f32,
            paths: *const NVGpath,
            npaths: ::std::os::raw::c_int,
        ),
    >,
    pub renderStroke: ::std::option::Option<
        unsafe extern "C" fn(
            uptr: ::std::os::raw::c_ulonglong,
            paint: *mut NVGpaint,
            compositeOperation: NVGcompositeOperationState,
            scissor: *mut NVGscissor,
            fringe: f32,
            strokeWidth: f32,
            paths: *const NVGpath,
            npaths: ::std::os::raw::c_int,
        ),
    >,
    pub renderTriangles: ::std::option::Option<
        unsafe extern "C" fn(
            uptr: ::std::os::raw::c_ulonglong,
            paint: *mut NVGpaint,
            compositeOperation: NVGcompositeOperationState,
            scissor: *mut NVGscissor,
            verts: *const NVGvertex,
            nverts: ::std::os::raw::c_int,
        ),
    >,
    pub renderClearStencil:
        ::std::option::Option<unsafe extern "C" fn(uptr: ::std::os::raw::c_ulonglong)>,
    pub renderDelete:
        ::std::option::Option<unsafe extern "C" fn(uptr: ::std::os::raw::c_ulonglong)>,
}
#[test]
fn bindgen_test_layout_NVGparams() {
    assert_eq!(
        ::std::mem::size_of::<NVGparams>(),
        120usize,
        concat!("Size of: ", stringify!(NVGparams))
    );
    assert_eq!(
        ::std::mem::align_of::<NVGparams>(),
        8usize,
        concat!("Alignment of ", stringify!(NVGparams))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGparams>())).userPtr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGparams),
            "::",
            stringify!(userPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGparams>())).edgeAntiAlias as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGparams),
            "::",
            stringify!(edgeAntiAlias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGparams>())).renderCreate as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGparams),
            "::",
            stringify!(renderCreate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGparams>())).renderCreateTexture as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGparams),
            "::",
            stringify!(renderCreateTexture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGparams>())).renderDeleteTexture as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGparams),
            "::",
            stringify!(renderDeleteTexture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGparams>())).renderUpdateTexture as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGparams),
            "::",
            stringify!(renderUpdateTexture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGparams>())).renderGetTextureSize as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGparams),
            "::",
            stringify!(renderGetTextureSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGparams>())).renderViewport as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGparams),
            "::",
            stringify!(renderViewport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGparams>())).renderCancel as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGparams),
            "::",
            stringify!(renderCancel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGparams>())).renderFlush as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGparams),
            "::",
            stringify!(renderFlush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGparams>())).renderFill as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGparams),
            "::",
            stringify!(renderFill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGparams>())).renderStroke as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGparams),
            "::",
            stringify!(renderStroke)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGparams>())).renderTriangles as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGparams),
            "::",
            stringify!(renderTriangles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGparams>())).renderClearStencil as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGparams),
            "::",
            stringify!(renderClearStencil)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NVGparams>())).renderDelete as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(NVGparams),
            "::",
            stringify!(renderDelete)
        )
    );
}
extern "C" {
    pub fn nvgCreateInternal(params: *mut NVGparams) -> *mut NVGcontext;
}
extern "C" {
    pub fn nvgDeleteInternal(ctx: *mut NVGcontext);
}
extern "C" {
    pub fn nvgInternalParams(ctx: *mut NVGcontext) -> *mut NVGparams;
}
extern "C" {
    pub fn nvgDebugDumpPathCache(ctx: *mut NVGcontext);
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const u16,
        _FunctionName: *const u16,
        _FileName: *const u16,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
extern "C" {
    pub fn _clearfp() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _controlfp(
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _set_controlfp(_NewValue: ::std::os::raw::c_uint, _Mask: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _controlfp_s(
        _CurrentState: *mut ::std::os::raw::c_uint,
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> errno_t;
}
extern "C" {
    pub fn _statusfp() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _fpreset();
}
extern "C" {
    pub fn _statusfp2(
        _X86Status: *mut ::std::os::raw::c_uint,
        _SSE2Status: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn _control87(
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __control87_2(
        _NewValue: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
        _X86ControlWord: *mut ::std::os::raw::c_uint,
        _Sse2ControlWord: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpecode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpe_flt_rounds() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _copysign(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn _chgsign(_X: f64) -> f64;
}
extern "C" {
    pub fn _scalb(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn _logb(_X: f64) -> f64;
}
extern "C" {
    pub fn _nextafter(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn _finite(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnan(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fpclass(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _scalbf(_X: f32, _Y: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn fpreset();
}
pub type SIMCONNECT_OBJECT_ID = DWORD;
pub const SIMCONNECT_UNUSED: DWORD = 4294967295;
pub const SIMCONNECT_OBJECT_ID_USER: DWORD = 0;
pub const SIMCONNECT_CAMERA_IGNORE_FIELD: f32 = 340282346638528860000000000000000000000.0;
pub const SIMCONNECT_CLIENTDATA_MAX_SIZE: DWORD = 8192;
pub const SIMCONNECT_GROUP_PRIORITY_HIGHEST: DWORD = 1;
pub const SIMCONNECT_GROUP_PRIORITY_HIGHEST_MASKABLE: DWORD = 10000000;
pub const SIMCONNECT_GROUP_PRIORITY_STANDARD: DWORD = 1900000000;
pub const SIMCONNECT_GROUP_PRIORITY_DEFAULT: DWORD = 2000000000;
pub const SIMCONNECT_GROUP_PRIORITY_LOWEST: DWORD = 4000000000;
pub const MAX_METAR_LENGTH: DWORD = 2000;
pub const MAX_THERMAL_SIZE: f32 = 100000.0;
pub const MAX_THERMAL_RATE: f32 = 1000.0;
pub const INITPOSITION_AIRSPEED_CRUISE: DWORD = 4294967295;
pub const INITPOSITION_AIRSPEED_KEEP: DWORD = 4294967294;
pub const SIMCONNECT_CLIENTDATATYPE_INT8: DWORD = 4294967295;
pub const SIMCONNECT_CLIENTDATATYPE_INT16: DWORD = 4294967294;
pub const SIMCONNECT_CLIENTDATATYPE_INT32: DWORD = 4294967293;
pub const SIMCONNECT_CLIENTDATATYPE_INT64: DWORD = 4294967292;
pub const SIMCONNECT_CLIENTDATATYPE_FLOAT32: DWORD = 4294967291;
pub const SIMCONNECT_CLIENTDATATYPE_FLOAT64: DWORD = 4294967290;
pub const SIMCONNECT_CLIENTDATAOFFSET_AUTO: DWORD = 4294967295;
pub const SIMCONNECT_OPEN_CONFIGINDEX_LOCAL: DWORD = 4294967295;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_NULL: SIMCONNECT_RECV_ID = 0;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_EXCEPTION: SIMCONNECT_RECV_ID = 1;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_OPEN: SIMCONNECT_RECV_ID = 2;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_QUIT: SIMCONNECT_RECV_ID = 3;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_EVENT: SIMCONNECT_RECV_ID = 4;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_EVENT_OBJECT_ADDREMOVE: SIMCONNECT_RECV_ID = 5;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_EVENT_FILENAME: SIMCONNECT_RECV_ID = 6;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_EVENT_FRAME: SIMCONNECT_RECV_ID = 7;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_SIMOBJECT_DATA: SIMCONNECT_RECV_ID = 8;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_SIMOBJECT_DATA_BYTYPE: SIMCONNECT_RECV_ID = 9;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_WEATHER_OBSERVATION: SIMCONNECT_RECV_ID = 10;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_CLOUD_STATE: SIMCONNECT_RECV_ID = 11;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_ASSIGNED_OBJECT_ID: SIMCONNECT_RECV_ID = 12;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_RESERVED_KEY: SIMCONNECT_RECV_ID = 13;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_CUSTOM_ACTION: SIMCONNECT_RECV_ID = 14;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_SYSTEM_STATE: SIMCONNECT_RECV_ID = 15;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_CLIENT_DATA: SIMCONNECT_RECV_ID = 16;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_EVENT_WEATHER_MODE: SIMCONNECT_RECV_ID = 17;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_AIRPORT_LIST: SIMCONNECT_RECV_ID = 18;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_VOR_LIST: SIMCONNECT_RECV_ID = 19;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_NDB_LIST: SIMCONNECT_RECV_ID = 20;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_WAYPOINT_LIST: SIMCONNECT_RECV_ID = 21;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_EVENT_MULTIPLAYER_SERVER_STARTED:
    SIMCONNECT_RECV_ID = 22;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_EVENT_MULTIPLAYER_CLIENT_STARTED:
    SIMCONNECT_RECV_ID = 23;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_EVENT_MULTIPLAYER_SESSION_ENDED:
    SIMCONNECT_RECV_ID = 24;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_EVENT_RACE_END: SIMCONNECT_RECV_ID = 25;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_EVENT_RACE_LAP: SIMCONNECT_RECV_ID = 26;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_EVENT_EX1: SIMCONNECT_RECV_ID = 27;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_FACILITY_DATA: SIMCONNECT_RECV_ID = 28;
pub const SIMCONNECT_RECV_ID_SIMCONNECT_RECV_ID_FACILITY_DATA_END: SIMCONNECT_RECV_ID = 29;
pub type SIMCONNECT_RECV_ID = ::std::os::raw::c_int;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_INVALID: SIMCONNECT_DATATYPE = 0;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_INT32: SIMCONNECT_DATATYPE = 1;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_INT64: SIMCONNECT_DATATYPE = 2;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_FLOAT32: SIMCONNECT_DATATYPE = 3;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_FLOAT64: SIMCONNECT_DATATYPE = 4;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_STRING8: SIMCONNECT_DATATYPE = 5;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_STRING32: SIMCONNECT_DATATYPE = 6;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_STRING64: SIMCONNECT_DATATYPE = 7;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_STRING128: SIMCONNECT_DATATYPE = 8;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_STRING256: SIMCONNECT_DATATYPE = 9;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_STRING260: SIMCONNECT_DATATYPE = 10;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_STRINGV: SIMCONNECT_DATATYPE = 11;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_INITPOSITION: SIMCONNECT_DATATYPE = 12;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_MARKERSTATE: SIMCONNECT_DATATYPE = 13;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_WAYPOINT: SIMCONNECT_DATATYPE = 14;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_LATLONALT: SIMCONNECT_DATATYPE = 15;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_XYZ: SIMCONNECT_DATATYPE = 16;
pub const SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_MAX: SIMCONNECT_DATATYPE = 17;
pub type SIMCONNECT_DATATYPE = ::std::os::raw::c_int;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SIMCONNECT_EXCEPTION {
    SIMCONNECT_EXCEPTION_NONE = 0,
    SIMCONNECT_EXCEPTION_ERROR = 1,
    SIMCONNECT_EXCEPTION_SIZE_MISMATCH = 2,
    SIMCONNECT_EXCEPTION_UNRECOGNIZED_ID = 3,
    SIMCONNECT_EXCEPTION_UNOPENED = 4,
    SIMCONNECT_EXCEPTION_VERSION_MISMATCH = 5,
    SIMCONNECT_EXCEPTION_TOO_MANY_GROUPS = 6,
    SIMCONNECT_EXCEPTION_NAME_UNRECOGNIZED = 7,
    SIMCONNECT_EXCEPTION_TOO_MANY_EVENT_NAMES = 8,
    SIMCONNECT_EXCEPTION_EVENT_ID_DUPLICATE = 9,
    SIMCONNECT_EXCEPTION_TOO_MANY_MAPS = 10,
    SIMCONNECT_EXCEPTION_TOO_MANY_OBJECTS = 11,
    SIMCONNECT_EXCEPTION_TOO_MANY_REQUESTS = 12,
    SIMCONNECT_EXCEPTION_WEATHER_INVALID_PORT = 13,
    SIMCONNECT_EXCEPTION_WEATHER_INVALID_METAR = 14,
    SIMCONNECT_EXCEPTION_WEATHER_UNABLE_TO_GET_OBSERVATION = 15,
    SIMCONNECT_EXCEPTION_WEATHER_UNABLE_TO_CREATE_STATION = 16,
    SIMCONNECT_EXCEPTION_WEATHER_UNABLE_TO_REMOVE_STATION = 17,
    SIMCONNECT_EXCEPTION_INVALID_DATA_TYPE = 18,
    SIMCONNECT_EXCEPTION_INVALID_DATA_SIZE = 19,
    SIMCONNECT_EXCEPTION_DATA_ERROR = 20,
    SIMCONNECT_EXCEPTION_INVALID_ARRAY = 21,
    SIMCONNECT_EXCEPTION_CREATE_OBJECT_FAILED = 22,
    SIMCONNECT_EXCEPTION_LOAD_FLIGHTPLAN_FAILED = 23,
    SIMCONNECT_EXCEPTION_OPERATION_INVALID_FOR_OBJECT_TYPE = 24,
    SIMCONNECT_EXCEPTION_ILLEGAL_OPERATION = 25,
    SIMCONNECT_EXCEPTION_ALREADY_SUBSCRIBED = 26,
    SIMCONNECT_EXCEPTION_INVALID_ENUM = 27,
    SIMCONNECT_EXCEPTION_DEFINITION_ERROR = 28,
    SIMCONNECT_EXCEPTION_DUPLICATE_ID = 29,
    SIMCONNECT_EXCEPTION_DATUM_ID = 30,
    SIMCONNECT_EXCEPTION_OUT_OF_BOUNDS = 31,
    SIMCONNECT_EXCEPTION_ALREADY_CREATED = 32,
    SIMCONNECT_EXCEPTION_OBJECT_OUTSIDE_REALITY_BUBBLE = 33,
    SIMCONNECT_EXCEPTION_OBJECT_CONTAINER = 34,
    SIMCONNECT_EXCEPTION_OBJECT_AI = 35,
    SIMCONNECT_EXCEPTION_OBJECT_ATC = 36,
    SIMCONNECT_EXCEPTION_OBJECT_SCHEDULE = 37,
}
pub const SIMCONNECT_SIMOBJECT_TYPE_SIMCONNECT_SIMOBJECT_TYPE_USER: SIMCONNECT_SIMOBJECT_TYPE = 0;
pub const SIMCONNECT_SIMOBJECT_TYPE_SIMCONNECT_SIMOBJECT_TYPE_ALL: SIMCONNECT_SIMOBJECT_TYPE = 1;
pub const SIMCONNECT_SIMOBJECT_TYPE_SIMCONNECT_SIMOBJECT_TYPE_AIRCRAFT: SIMCONNECT_SIMOBJECT_TYPE =
    2;
pub const SIMCONNECT_SIMOBJECT_TYPE_SIMCONNECT_SIMOBJECT_TYPE_HELICOPTER:
    SIMCONNECT_SIMOBJECT_TYPE = 3;
pub const SIMCONNECT_SIMOBJECT_TYPE_SIMCONNECT_SIMOBJECT_TYPE_BOAT: SIMCONNECT_SIMOBJECT_TYPE = 4;
pub const SIMCONNECT_SIMOBJECT_TYPE_SIMCONNECT_SIMOBJECT_TYPE_GROUND: SIMCONNECT_SIMOBJECT_TYPE = 5;
pub type SIMCONNECT_SIMOBJECT_TYPE = ::std::os::raw::c_int;
pub const SIMCONNECT_STATE_SIMCONNECT_STATE_OFF: SIMCONNECT_STATE = 0;
pub const SIMCONNECT_STATE_SIMCONNECT_STATE_ON: SIMCONNECT_STATE = 1;
pub type SIMCONNECT_STATE = ::std::os::raw::c_int;
pub const SIMCONNECT_PERIOD_SIMCONNECT_PERIOD_NEVER: SIMCONNECT_PERIOD = 0;
pub const SIMCONNECT_PERIOD_SIMCONNECT_PERIOD_ONCE: SIMCONNECT_PERIOD = 1;
pub const SIMCONNECT_PERIOD_SIMCONNECT_PERIOD_VISUAL_FRAME: SIMCONNECT_PERIOD = 2;
pub const SIMCONNECT_PERIOD_SIMCONNECT_PERIOD_SIM_FRAME: SIMCONNECT_PERIOD = 3;
pub const SIMCONNECT_PERIOD_SIMCONNECT_PERIOD_SECOND: SIMCONNECT_PERIOD = 4;
pub type SIMCONNECT_PERIOD = ::std::os::raw::c_int;
pub const SIMCONNECT_MISSION_END_SIMCONNECT_MISSION_FAILED: SIMCONNECT_MISSION_END = 0;
pub const SIMCONNECT_MISSION_END_SIMCONNECT_MISSION_CRASHED: SIMCONNECT_MISSION_END = 1;
pub const SIMCONNECT_MISSION_END_SIMCONNECT_MISSION_SUCCEEDED: SIMCONNECT_MISSION_END = 2;
pub type SIMCONNECT_MISSION_END = ::std::os::raw::c_int;
pub const SIMCONNECT_CLIENT_DATA_PERIOD_SIMCONNECT_CLIENT_DATA_PERIOD_NEVER:
    SIMCONNECT_CLIENT_DATA_PERIOD = 0;
pub const SIMCONNECT_CLIENT_DATA_PERIOD_SIMCONNECT_CLIENT_DATA_PERIOD_ONCE:
    SIMCONNECT_CLIENT_DATA_PERIOD = 1;
pub const SIMCONNECT_CLIENT_DATA_PERIOD_SIMCONNECT_CLIENT_DATA_PERIOD_VISUAL_FRAME:
    SIMCONNECT_CLIENT_DATA_PERIOD = 2;
pub const SIMCONNECT_CLIENT_DATA_PERIOD_SIMCONNECT_CLIENT_DATA_PERIOD_ON_SET:
    SIMCONNECT_CLIENT_DATA_PERIOD = 3;
pub const SIMCONNECT_CLIENT_DATA_PERIOD_SIMCONNECT_CLIENT_DATA_PERIOD_SECOND:
    SIMCONNECT_CLIENT_DATA_PERIOD = 4;
pub type SIMCONNECT_CLIENT_DATA_PERIOD = ::std::os::raw::c_int;
pub const SIMCONNECT_TEXT_TYPE_SIMCONNECT_TEXT_TYPE_SCROLL_BLACK: SIMCONNECT_TEXT_TYPE = 0;
pub const SIMCONNECT_TEXT_TYPE_SIMCONNECT_TEXT_TYPE_SCROLL_WHITE: SIMCONNECT_TEXT_TYPE = 1;
pub const SIMCONNECT_TEXT_TYPE_SIMCONNECT_TEXT_TYPE_SCROLL_RED: SIMCONNECT_TEXT_TYPE = 2;
pub const SIMCONNECT_TEXT_TYPE_SIMCONNECT_TEXT_TYPE_SCROLL_GREEN: SIMCONNECT_TEXT_TYPE = 3;
pub const SIMCONNECT_TEXT_TYPE_SIMCONNECT_TEXT_TYPE_SCROLL_BLUE: SIMCONNECT_TEXT_TYPE = 4;
pub const SIMCONNECT_TEXT_TYPE_SIMCONNECT_TEXT_TYPE_SCROLL_YELLOW: SIMCONNECT_TEXT_TYPE = 5;
pub const SIMCONNECT_TEXT_TYPE_SIMCONNECT_TEXT_TYPE_SCROLL_MAGENTA: SIMCONNECT_TEXT_TYPE = 6;
pub const SIMCONNECT_TEXT_TYPE_SIMCONNECT_TEXT_TYPE_SCROLL_CYAN: SIMCONNECT_TEXT_TYPE = 7;
pub const SIMCONNECT_TEXT_TYPE_SIMCONNECT_TEXT_TYPE_PRINT_BLACK: SIMCONNECT_TEXT_TYPE = 256;
pub const SIMCONNECT_TEXT_TYPE_SIMCONNECT_TEXT_TYPE_PRINT_WHITE: SIMCONNECT_TEXT_TYPE = 257;
pub const SIMCONNECT_TEXT_TYPE_SIMCONNECT_TEXT_TYPE_PRINT_RED: SIMCONNECT_TEXT_TYPE = 258;
pub const SIMCONNECT_TEXT_TYPE_SIMCONNECT_TEXT_TYPE_PRINT_GREEN: SIMCONNECT_TEXT_TYPE = 259;
pub const SIMCONNECT_TEXT_TYPE_SIMCONNECT_TEXT_TYPE_PRINT_BLUE: SIMCONNECT_TEXT_TYPE = 260;
pub const SIMCONNECT_TEXT_TYPE_SIMCONNECT_TEXT_TYPE_PRINT_YELLOW: SIMCONNECT_TEXT_TYPE = 261;
pub const SIMCONNECT_TEXT_TYPE_SIMCONNECT_TEXT_TYPE_PRINT_MAGENTA: SIMCONNECT_TEXT_TYPE = 262;
pub const SIMCONNECT_TEXT_TYPE_SIMCONNECT_TEXT_TYPE_PRINT_CYAN: SIMCONNECT_TEXT_TYPE = 263;
pub const SIMCONNECT_TEXT_TYPE_SIMCONNECT_TEXT_TYPE_MENU: SIMCONNECT_TEXT_TYPE = 512;
pub type SIMCONNECT_TEXT_TYPE = ::std::os::raw::c_int;
pub const SIMCONNECT_TEXT_RESULT_SIMCONNECT_TEXT_RESULT_MENU_SELECT_1: SIMCONNECT_TEXT_RESULT = 0;
pub const SIMCONNECT_TEXT_RESULT_SIMCONNECT_TEXT_RESULT_MENU_SELECT_2: SIMCONNECT_TEXT_RESULT = 1;
pub const SIMCONNECT_TEXT_RESULT_SIMCONNECT_TEXT_RESULT_MENU_SELECT_3: SIMCONNECT_TEXT_RESULT = 2;
pub const SIMCONNECT_TEXT_RESULT_SIMCONNECT_TEXT_RESULT_MENU_SELECT_4: SIMCONNECT_TEXT_RESULT = 3;
pub const SIMCONNECT_TEXT_RESULT_SIMCONNECT_TEXT_RESULT_MENU_SELECT_5: SIMCONNECT_TEXT_RESULT = 4;
pub const SIMCONNECT_TEXT_RESULT_SIMCONNECT_TEXT_RESULT_MENU_SELECT_6: SIMCONNECT_TEXT_RESULT = 5;
pub const SIMCONNECT_TEXT_RESULT_SIMCONNECT_TEXT_RESULT_MENU_SELECT_7: SIMCONNECT_TEXT_RESULT = 6;
pub const SIMCONNECT_TEXT_RESULT_SIMCONNECT_TEXT_RESULT_MENU_SELECT_8: SIMCONNECT_TEXT_RESULT = 7;
pub const SIMCONNECT_TEXT_RESULT_SIMCONNECT_TEXT_RESULT_MENU_SELECT_9: SIMCONNECT_TEXT_RESULT = 8;
pub const SIMCONNECT_TEXT_RESULT_SIMCONNECT_TEXT_RESULT_MENU_SELECT_10: SIMCONNECT_TEXT_RESULT = 9;
pub const SIMCONNECT_TEXT_RESULT_SIMCONNECT_TEXT_RESULT_DISPLAYED: SIMCONNECT_TEXT_RESULT = 65536;
pub const SIMCONNECT_TEXT_RESULT_SIMCONNECT_TEXT_RESULT_QUEUED: SIMCONNECT_TEXT_RESULT = 65537;
pub const SIMCONNECT_TEXT_RESULT_SIMCONNECT_TEXT_RESULT_REMOVED: SIMCONNECT_TEXT_RESULT = 65538;
pub const SIMCONNECT_TEXT_RESULT_SIMCONNECT_TEXT_RESULT_REPLACED: SIMCONNECT_TEXT_RESULT = 65539;
pub const SIMCONNECT_TEXT_RESULT_SIMCONNECT_TEXT_RESULT_TIMEOUT: SIMCONNECT_TEXT_RESULT = 65540;
pub type SIMCONNECT_TEXT_RESULT = ::std::os::raw::c_int;
pub const SIMCONNECT_WEATHER_MODE_SIMCONNECT_WEATHER_MODE_THEME: SIMCONNECT_WEATHER_MODE = 0;
pub const SIMCONNECT_WEATHER_MODE_SIMCONNECT_WEATHER_MODE_RWW: SIMCONNECT_WEATHER_MODE = 1;
pub const SIMCONNECT_WEATHER_MODE_SIMCONNECT_WEATHER_MODE_CUSTOM: SIMCONNECT_WEATHER_MODE = 2;
pub const SIMCONNECT_WEATHER_MODE_SIMCONNECT_WEATHER_MODE_GLOBAL: SIMCONNECT_WEATHER_MODE = 3;
pub type SIMCONNECT_WEATHER_MODE = ::std::os::raw::c_int;
pub const SIMCONNECT_FACILITY_LIST_TYPE_SIMCONNECT_FACILITY_LIST_TYPE_AIRPORT:
    SIMCONNECT_FACILITY_LIST_TYPE = 0;
pub const SIMCONNECT_FACILITY_LIST_TYPE_SIMCONNECT_FACILITY_LIST_TYPE_WAYPOINT:
    SIMCONNECT_FACILITY_LIST_TYPE = 1;
pub const SIMCONNECT_FACILITY_LIST_TYPE_SIMCONNECT_FACILITY_LIST_TYPE_NDB:
    SIMCONNECT_FACILITY_LIST_TYPE = 2;
pub const SIMCONNECT_FACILITY_LIST_TYPE_SIMCONNECT_FACILITY_LIST_TYPE_VOR:
    SIMCONNECT_FACILITY_LIST_TYPE = 3;
pub const SIMCONNECT_FACILITY_LIST_TYPE_SIMCONNECT_FACILITY_LIST_TYPE_COUNT:
    SIMCONNECT_FACILITY_LIST_TYPE = 4;
pub type SIMCONNECT_FACILITY_LIST_TYPE = ::std::os::raw::c_int;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_AIRPORT:
    SIMCONNECT_FACILITY_DATA_TYPE = 0;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_RUNWAY:
    SIMCONNECT_FACILITY_DATA_TYPE = 1;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_START:
    SIMCONNECT_FACILITY_DATA_TYPE = 2;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_FREQUENCY:
    SIMCONNECT_FACILITY_DATA_TYPE = 3;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_HELIPAD:
    SIMCONNECT_FACILITY_DATA_TYPE = 4;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_APPROACH:
    SIMCONNECT_FACILITY_DATA_TYPE = 5;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_APPROACH_TRANSITION:
    SIMCONNECT_FACILITY_DATA_TYPE = 6;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_APPROACH_LEG:
    SIMCONNECT_FACILITY_DATA_TYPE = 7;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_FINAL_APPROACH_LEG:
    SIMCONNECT_FACILITY_DATA_TYPE = 8;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_MISSED_APPROACH_LEG:
    SIMCONNECT_FACILITY_DATA_TYPE = 9;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_DEPARTURE:
    SIMCONNECT_FACILITY_DATA_TYPE = 10;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_ARRIVAL:
    SIMCONNECT_FACILITY_DATA_TYPE = 11;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_RUNWAY_TRANSITION:
    SIMCONNECT_FACILITY_DATA_TYPE = 12;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_ENROUTE_TRANSITION:
    SIMCONNECT_FACILITY_DATA_TYPE = 13;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_TAXI_POINT:
    SIMCONNECT_FACILITY_DATA_TYPE = 14;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_TAXI_PARKING:
    SIMCONNECT_FACILITY_DATA_TYPE = 15;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_TAXI_PATH:
    SIMCONNECT_FACILITY_DATA_TYPE = 16;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_TAXI_NAME:
    SIMCONNECT_FACILITY_DATA_TYPE = 17;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_JETWAY:
    SIMCONNECT_FACILITY_DATA_TYPE = 18;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_VOR:
    SIMCONNECT_FACILITY_DATA_TYPE = 19;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_NDB:
    SIMCONNECT_FACILITY_DATA_TYPE = 20;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_WAYPOINT:
    SIMCONNECT_FACILITY_DATA_TYPE = 21;
pub const SIMCONNECT_FACILITY_DATA_TYPE_SIMCONNECT_FACILITY_DATA_ROUTE:
    SIMCONNECT_FACILITY_DATA_TYPE = 22;
pub type SIMCONNECT_FACILITY_DATA_TYPE = ::std::os::raw::c_int;
pub type SIMCONNECT_VOR_FLAGS = DWORD;
pub const SIMCONNECT_RECV_ID_VOR_LIST_HAS_NAV_SIGNAL: DWORD = 1;
pub const SIMCONNECT_RECV_ID_VOR_LIST_HAS_LOCALIZER: DWORD = 2;
pub const SIMCONNECT_RECV_ID_VOR_LIST_HAS_GLIDE_SLOPE: DWORD = 4;
pub const SIMCONNECT_RECV_ID_VOR_LIST_HAS_DME: DWORD = 8;
pub type SIMCONNECT_WAYPOINT_FLAGS = DWORD;
pub const SIMCONNECT_WAYPOINT_NONE: DWORD = 0;
pub const SIMCONNECT_WAYPOINT_SPEED_REQUESTED: DWORD = 4;
pub const SIMCONNECT_WAYPOINT_THROTTLE_REQUESTED: DWORD = 8;
pub const SIMCONNECT_WAYPOINT_COMPUTE_VERTICAL_SPEED: DWORD = 16;
pub const SIMCONNECT_WAYPOINT_ALTITUDE_IS_AGL: DWORD = 32;
pub const SIMCONNECT_WAYPOINT_ON_GROUND: DWORD = 1048576;
pub const SIMCONNECT_WAYPOINT_REVERSE: DWORD = 2097152;
pub const SIMCONNECT_WAYPOINT_WRAP_TO_FIRST: DWORD = 4194304;
pub const SIMCONNECT_WAYPOINT_ALWAYS_BACKUP: DWORD = 8388608;
pub const SIMCONNECT_WAYPOINT_KEEP_LAST_HEADING: DWORD = 16777216;
pub const SIMCONNECT_WAYPOINT_YIELD_TO_USER: DWORD = 33554432;
pub const SIMCONNECT_WAYPOINT_CAN_REVERSE: DWORD = 67108864;
pub type SIMCONNECT_EVENT_FLAG = DWORD;
pub const SIMCONNECT_EVENT_FLAG_DEFAULT: DWORD = 0;
pub const SIMCONNECT_EVENT_FLAG_FAST_REPEAT_TIMER: DWORD = 1;
pub const SIMCONNECT_EVENT_FLAG_SLOW_REPEAT_TIMER: DWORD = 2;
pub const SIMCONNECT_EVENT_FLAG_GROUPID_IS_PRIORITY: DWORD = 16;
pub type SIMCONNECT_DATA_REQUEST_FLAG = DWORD;
pub const SIMCONNECT_DATA_REQUEST_FLAG_DEFAULT: DWORD = 0;
pub const SIMCONNECT_DATA_REQUEST_FLAG_CHANGED: DWORD = 1;
pub const SIMCONNECT_DATA_REQUEST_FLAG_TAGGED: DWORD = 2;
pub type SIMCONNECT_DATA_SET_FLAG = DWORD;
pub const SIMCONNECT_DATA_SET_FLAG_DEFAULT: DWORD = 0;
pub const SIMCONNECT_DATA_SET_FLAG_TAGGED: DWORD = 1;
pub type SIMCONNECT_CREATE_CLIENT_DATA_FLAG = DWORD;
pub const SIMCONNECT_CREATE_CLIENT_DATA_FLAG_DEFAULT: DWORD = 0;
pub const SIMCONNECT_CREATE_CLIENT_DATA_FLAG_READ_ONLY: DWORD = 1;
pub type SIMCONNECT_CLIENT_DATA_REQUEST_FLAG = DWORD;
pub const SIMCONNECT_CLIENT_DATA_REQUEST_FLAG_DEFAULT: DWORD = 0;
pub const SIMCONNECT_CLIENT_DATA_REQUEST_FLAG_CHANGED: DWORD = 1;
pub const SIMCONNECT_CLIENT_DATA_REQUEST_FLAG_TAGGED: DWORD = 2;
pub type SIMCONNECT_CLIENT_DATA_SET_FLAG = DWORD;
pub const SIMCONNECT_CLIENT_DATA_SET_FLAG_DEFAULT: DWORD = 0;
pub const SIMCONNECT_CLIENT_DATA_SET_FLAG_TAGGED: DWORD = 1;
pub type SIMCONNECT_VIEW_SYSTEM_EVENT_DATA = DWORD;
pub const SIMCONNECT_VIEW_SYSTEM_EVENT_DATA_COCKPIT_2D: DWORD = 1;
pub const SIMCONNECT_VIEW_SYSTEM_EVENT_DATA_COCKPIT_VIRTUAL: DWORD = 2;
pub const SIMCONNECT_VIEW_SYSTEM_EVENT_DATA_ORTHOGONAL: DWORD = 4;
pub type SIMCONNECT_SOUND_SYSTEM_EVENT_DATA = DWORD;
pub const SIMCONNECT_SOUND_SYSTEM_EVENT_DATA_MASTER: DWORD = 1;
pub type SIMCONNECT_NOTIFICATION_GROUP_ID = DWORD;
pub type SIMCONNECT_INPUT_GROUP_ID = DWORD;
pub type SIMCONNECT_DATA_DEFINITION_ID = DWORD;
pub type SIMCONNECT_DATA_REQUEST_ID = DWORD;
pub type SIMCONNECT_CLIENT_EVENT_ID = DWORD;
pub type SIMCONNECT_CLIENT_DATA_ID = DWORD;
pub type SIMCONNECT_CLIENT_DATA_DEFINITION_ID = DWORD;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV {
    pub dwSize: DWORD,
    pub dwVersion: DWORD,
    pub dwID: DWORD,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV>(),
        12usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SIMCONNECT_RECV>())).dwSize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV),
            "::",
            stringify!(dwSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SIMCONNECT_RECV>())).dwVersion as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV),
            "::",
            stringify!(dwVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SIMCONNECT_RECV>())).dwID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV),
            "::",
            stringify!(dwID)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EXCEPTION {
    pub _base: SIMCONNECT_RECV,
    pub dwException: DWORD,
    pub dwSendID: DWORD,
    pub dwIndex: DWORD,
}
pub const SIMCONNECT_RECV_EXCEPTION_UNKNOWN_SENDID: DWORD = 0;
pub const SIMCONNECT_RECV_EXCEPTION_UNKNOWN_INDEX: DWORD = 4294967295;
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_EXCEPTION() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_EXCEPTION>(),
        24usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_EXCEPTION))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_EXCEPTION>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_EXCEPTION))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EXCEPTION>())).dwException as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EXCEPTION),
            "::",
            stringify!(dwException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EXCEPTION>())).dwSendID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EXCEPTION),
            "::",
            stringify!(dwSendID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EXCEPTION>())).dwIndex as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EXCEPTION),
            "::",
            stringify!(dwIndex)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_OPEN {
    pub _base: SIMCONNECT_RECV,
    pub szApplicationName: [::std::os::raw::c_char; 256usize],
    pub dwApplicationVersionMajor: DWORD,
    pub dwApplicationVersionMinor: DWORD,
    pub dwApplicationBuildMajor: DWORD,
    pub dwApplicationBuildMinor: DWORD,
    pub dwSimConnectVersionMajor: DWORD,
    pub dwSimConnectVersionMinor: DWORD,
    pub dwSimConnectBuildMajor: DWORD,
    pub dwSimConnectBuildMinor: DWORD,
    pub dwReserved1: DWORD,
    pub dwReserved2: DWORD,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_OPEN() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_OPEN>(),
        308usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_OPEN))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_OPEN>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_OPEN))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_OPEN>())).szApplicationName as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_OPEN),
            "::",
            stringify!(szApplicationName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_OPEN>())).dwApplicationVersionMajor as *const _
                as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_OPEN),
            "::",
            stringify!(dwApplicationVersionMajor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_OPEN>())).dwApplicationVersionMinor as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_OPEN),
            "::",
            stringify!(dwApplicationVersionMinor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_OPEN>())).dwApplicationBuildMajor as *const _
                as usize
        },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_OPEN),
            "::",
            stringify!(dwApplicationBuildMajor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_OPEN>())).dwApplicationBuildMinor as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_OPEN),
            "::",
            stringify!(dwApplicationBuildMinor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_OPEN>())).dwSimConnectVersionMajor as *const _
                as usize
        },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_OPEN),
            "::",
            stringify!(dwSimConnectVersionMajor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_OPEN>())).dwSimConnectVersionMinor as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_OPEN),
            "::",
            stringify!(dwSimConnectVersionMinor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_OPEN>())).dwSimConnectBuildMajor as *const _
                as usize
        },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_OPEN),
            "::",
            stringify!(dwSimConnectBuildMajor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_OPEN>())).dwSimConnectBuildMinor as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_OPEN),
            "::",
            stringify!(dwSimConnectBuildMinor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_OPEN>())).dwReserved1 as *const _ as usize
        },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_OPEN),
            "::",
            stringify!(dwReserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_OPEN>())).dwReserved2 as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_OPEN),
            "::",
            stringify!(dwReserved2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_QUIT {
    pub _base: SIMCONNECT_RECV,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_QUIT() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_QUIT>(),
        12usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_QUIT))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_QUIT>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_QUIT))
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT {
    pub _base: SIMCONNECT_RECV,
    pub uGroupID: DWORD,
    pub uEventID: DWORD,
    pub dwData: DWORD,
}
pub const SIMCONNECT_RECV_EVENT_UNKNOWN_GROUP: DWORD = 4294967295;
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_EVENT() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_EVENT>(),
        24usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_EVENT))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_EVENT>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_EVENT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT>())).uGroupID as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT),
            "::",
            stringify!(uGroupID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT>())).uEventID as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT),
            "::",
            stringify!(uEventID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT>())).dwData as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT),
            "::",
            stringify!(dwData)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_FILENAME {
    pub _base: SIMCONNECT_RECV_EVENT,
    pub szFileName: [::std::os::raw::c_char; 260usize],
    pub dwFlags: DWORD,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_EVENT_FILENAME() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_EVENT_FILENAME>(),
        288usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_EVENT_FILENAME))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_EVENT_FILENAME>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_EVENT_FILENAME))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT_FILENAME>())).szFileName as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT_FILENAME),
            "::",
            stringify!(szFileName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT_FILENAME>())).dwFlags as *const _ as usize
        },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT_FILENAME),
            "::",
            stringify!(dwFlags)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE {
    pub _base: SIMCONNECT_RECV_EVENT,
    pub eObjType: SIMCONNECT_SIMOBJECT_TYPE,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE>(),
        28usize,
        concat!(
            "Size of: ",
            stringify!(SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE>())).eObjType as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT_OBJECT_ADDREMOVE),
            "::",
            stringify!(eObjType)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_FRAME {
    pub _base: SIMCONNECT_RECV_EVENT,
    pub fFrameRate: f32,
    pub fSimSpeed: f32,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_EVENT_FRAME() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_EVENT_FRAME>(),
        32usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_EVENT_FRAME))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_EVENT_FRAME>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_EVENT_FRAME))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT_FRAME>())).fFrameRate as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT_FRAME),
            "::",
            stringify!(fFrameRate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT_FRAME>())).fSimSpeed as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT_FRAME),
            "::",
            stringify!(fSimSpeed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_MULTIPLAYER_SERVER_STARTED {
    pub _base: SIMCONNECT_RECV_EVENT,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_EVENT_MULTIPLAYER_SERVER_STARTED() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_EVENT_MULTIPLAYER_SERVER_STARTED>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(SIMCONNECT_RECV_EVENT_MULTIPLAYER_SERVER_STARTED)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_EVENT_MULTIPLAYER_SERVER_STARTED>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(SIMCONNECT_RECV_EVENT_MULTIPLAYER_SERVER_STARTED)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_MULTIPLAYER_CLIENT_STARTED {
    pub _base: SIMCONNECT_RECV_EVENT,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_EVENT_MULTIPLAYER_CLIENT_STARTED() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_EVENT_MULTIPLAYER_CLIENT_STARTED>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(SIMCONNECT_RECV_EVENT_MULTIPLAYER_CLIENT_STARTED)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_EVENT_MULTIPLAYER_CLIENT_STARTED>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(SIMCONNECT_RECV_EVENT_MULTIPLAYER_CLIENT_STARTED)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_MULTIPLAYER_SESSION_ENDED {
    pub _base: SIMCONNECT_RECV_EVENT,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_EVENT_MULTIPLAYER_SESSION_ENDED() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_EVENT_MULTIPLAYER_SESSION_ENDED>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(SIMCONNECT_RECV_EVENT_MULTIPLAYER_SESSION_ENDED)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_EVENT_MULTIPLAYER_SESSION_ENDED>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(SIMCONNECT_RECV_EVENT_MULTIPLAYER_SESSION_ENDED)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_EX1 {
    pub _base: SIMCONNECT_RECV,
    pub uGroupID: DWORD,
    pub uEventID: DWORD,
    pub dwData0: DWORD,
    pub dwData1: DWORD,
    pub dwData2: DWORD,
    pub dwData3: DWORD,
    pub dwData4: DWORD,
}
pub const SIMCONNECT_RECV_EVENT_EX1_UNKNOWN_GROUP: DWORD = 4294967295;
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_EVENT_EX1() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_EVENT_EX1>(),
        40usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_EVENT_EX1))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_EVENT_EX1>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_EVENT_EX1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT_EX1>())).uGroupID as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT_EX1),
            "::",
            stringify!(uGroupID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT_EX1>())).uEventID as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT_EX1),
            "::",
            stringify!(uEventID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT_EX1>())).dwData0 as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT_EX1),
            "::",
            stringify!(dwData0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT_EX1>())).dwData1 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT_EX1),
            "::",
            stringify!(dwData1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT_EX1>())).dwData2 as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT_EX1),
            "::",
            stringify!(dwData2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT_EX1>())).dwData3 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT_EX1),
            "::",
            stringify!(dwData3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT_EX1>())).dwData4 as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT_EX1),
            "::",
            stringify!(dwData4)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_RACE_RESULT {
    pub dwNumberOfRacers: DWORD,
    pub MissionGUID: GUID,
    pub szPlayerName: [::std::os::raw::c_char; 260usize],
    pub szSessionType: [::std::os::raw::c_char; 260usize],
    pub szAircraft: [::std::os::raw::c_char; 260usize],
    pub szPlayerRole: [::std::os::raw::c_char; 260usize],
    pub fTotalTime: f64,
    pub fPenaltyTime: f64,
    pub dwIsDisqualified: DWORD,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_DATA_RACE_RESULT() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_DATA_RACE_RESULT>(),
        1080usize,
        concat!("Size of: ", stringify!(SIMCONNECT_DATA_RACE_RESULT))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_DATA_RACE_RESULT>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_DATA_RACE_RESULT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_RACE_RESULT>())).dwNumberOfRacers as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_RACE_RESULT),
            "::",
            stringify!(dwNumberOfRacers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_RACE_RESULT>())).MissionGUID as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_RACE_RESULT),
            "::",
            stringify!(MissionGUID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_RACE_RESULT>())).szPlayerName as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_RACE_RESULT),
            "::",
            stringify!(szPlayerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_RACE_RESULT>())).szSessionType as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_RACE_RESULT),
            "::",
            stringify!(szSessionType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_RACE_RESULT>())).szAircraft as *const _ as usize
        },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_RACE_RESULT),
            "::",
            stringify!(szAircraft)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_RACE_RESULT>())).szPlayerRole as *const _
                as usize
        },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_RACE_RESULT),
            "::",
            stringify!(szPlayerRole)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_RACE_RESULT>())).fTotalTime as *const _ as usize
        },
        1060usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_RACE_RESULT),
            "::",
            stringify!(fTotalTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_RACE_RESULT>())).fPenaltyTime as *const _
                as usize
        },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_RACE_RESULT),
            "::",
            stringify!(fPenaltyTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_RACE_RESULT>())).dwIsDisqualified as *const _
                as usize
        },
        1076usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_RACE_RESULT),
            "::",
            stringify!(dwIsDisqualified)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_RACE_END {
    pub _base: SIMCONNECT_RECV_EVENT,
    pub dwRacerNumber: DWORD,
    pub RacerData: SIMCONNECT_DATA_RACE_RESULT,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_EVENT_RACE_END() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_EVENT_RACE_END>(),
        1108usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_EVENT_RACE_END))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_EVENT_RACE_END>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_EVENT_RACE_END))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT_RACE_END>())).dwRacerNumber as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT_RACE_END),
            "::",
            stringify!(dwRacerNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT_RACE_END>())).RacerData as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT_RACE_END),
            "::",
            stringify!(RacerData)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_RACE_LAP {
    pub _base: SIMCONNECT_RECV_EVENT,
    pub dwLapIndex: DWORD,
    pub RacerData: SIMCONNECT_DATA_RACE_RESULT,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_EVENT_RACE_LAP() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_EVENT_RACE_LAP>(),
        1108usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_EVENT_RACE_LAP))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_EVENT_RACE_LAP>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_EVENT_RACE_LAP))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT_RACE_LAP>())).dwLapIndex as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT_RACE_LAP),
            "::",
            stringify!(dwLapIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_EVENT_RACE_LAP>())).RacerData as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_EVENT_RACE_LAP),
            "::",
            stringify!(RacerData)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_SIMOBJECT_DATA {
    pub _base: SIMCONNECT_RECV,
    pub dwRequestID: DWORD,
    pub dwObjectID: DWORD,
    pub dwDefineID: DWORD,
    pub dwFlags: DWORD,
    pub dwentrynumber: DWORD,
    pub dwoutof: DWORD,
    pub dwDefineCount: DWORD,
    pub dwData: DWORD,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_SIMOBJECT_DATA() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_SIMOBJECT_DATA>(),
        44usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_SIMOBJECT_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_SIMOBJECT_DATA>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_SIMOBJECT_DATA))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_SIMOBJECT_DATA>())).dwRequestID as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_SIMOBJECT_DATA),
            "::",
            stringify!(dwRequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_SIMOBJECT_DATA>())).dwObjectID as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_SIMOBJECT_DATA),
            "::",
            stringify!(dwObjectID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_SIMOBJECT_DATA>())).dwDefineID as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_SIMOBJECT_DATA),
            "::",
            stringify!(dwDefineID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_SIMOBJECT_DATA>())).dwFlags as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_SIMOBJECT_DATA),
            "::",
            stringify!(dwFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_SIMOBJECT_DATA>())).dwentrynumber as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_SIMOBJECT_DATA),
            "::",
            stringify!(dwentrynumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_SIMOBJECT_DATA>())).dwoutof as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_SIMOBJECT_DATA),
            "::",
            stringify!(dwoutof)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_SIMOBJECT_DATA>())).dwDefineCount as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_SIMOBJECT_DATA),
            "::",
            stringify!(dwDefineCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_SIMOBJECT_DATA>())).dwData as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_SIMOBJECT_DATA),
            "::",
            stringify!(dwData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_SIMOBJECT_DATA_BYTYPE {
    pub _base: SIMCONNECT_RECV_SIMOBJECT_DATA,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_SIMOBJECT_DATA_BYTYPE() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_SIMOBJECT_DATA_BYTYPE>(),
        44usize,
        concat!(
            "Size of: ",
            stringify!(SIMCONNECT_RECV_SIMOBJECT_DATA_BYTYPE)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_SIMOBJECT_DATA_BYTYPE>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(SIMCONNECT_RECV_SIMOBJECT_DATA_BYTYPE)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_CLIENT_DATA {
    pub _base: SIMCONNECT_RECV_SIMOBJECT_DATA,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_CLIENT_DATA() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_CLIENT_DATA>(),
        44usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_CLIENT_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_CLIENT_DATA>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_CLIENT_DATA))
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_WEATHER_OBSERVATION {
    pub _base: SIMCONNECT_RECV,
    pub dwRequestID: DWORD,
    pub szMetar: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_WEATHER_OBSERVATION() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_WEATHER_OBSERVATION>(),
        17usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_WEATHER_OBSERVATION))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_WEATHER_OBSERVATION>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(SIMCONNECT_RECV_WEATHER_OBSERVATION)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_WEATHER_OBSERVATION>())).dwRequestID as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_WEATHER_OBSERVATION),
            "::",
            stringify!(dwRequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_WEATHER_OBSERVATION>())).szMetar as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_WEATHER_OBSERVATION),
            "::",
            stringify!(szMetar)
        )
    );
}
pub const SIMCONNECT_CLOUD_STATE_ARRAY_WIDTH: ::std::os::raw::c_int = 64;
pub const SIMCONNECT_CLOUD_STATE_ARRAY_SIZE: ::std::os::raw::c_int = 4096;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_CLOUD_STATE {
    pub _base: SIMCONNECT_RECV,
    pub dwRequestID: DWORD,
    pub dwArraySize: DWORD,
    pub rgbData: [BYTE; 1usize],
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_CLOUD_STATE() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_CLOUD_STATE>(),
        21usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_CLOUD_STATE))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_CLOUD_STATE>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_CLOUD_STATE))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_CLOUD_STATE>())).dwRequestID as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_CLOUD_STATE),
            "::",
            stringify!(dwRequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_CLOUD_STATE>())).dwArraySize as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_CLOUD_STATE),
            "::",
            stringify!(dwArraySize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_CLOUD_STATE>())).rgbData as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_CLOUD_STATE),
            "::",
            stringify!(rgbData)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_ASSIGNED_OBJECT_ID {
    pub _base: SIMCONNECT_RECV,
    pub dwRequestID: DWORD,
    pub dwObjectID: DWORD,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_ASSIGNED_OBJECT_ID() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_ASSIGNED_OBJECT_ID>(),
        20usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_ASSIGNED_OBJECT_ID))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_ASSIGNED_OBJECT_ID>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(SIMCONNECT_RECV_ASSIGNED_OBJECT_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_ASSIGNED_OBJECT_ID>())).dwRequestID as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_ASSIGNED_OBJECT_ID),
            "::",
            stringify!(dwRequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_ASSIGNED_OBJECT_ID>())).dwObjectID as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_ASSIGNED_OBJECT_ID),
            "::",
            stringify!(dwObjectID)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_RESERVED_KEY {
    pub _base: SIMCONNECT_RECV,
    pub szChoiceReserved: [::std::os::raw::c_char; 30usize],
    pub szReservedKey: [::std::os::raw::c_char; 50usize],
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_RESERVED_KEY() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_RESERVED_KEY>(),
        92usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_RESERVED_KEY))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_RESERVED_KEY>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_RESERVED_KEY))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_RESERVED_KEY>())).szChoiceReserved as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_RESERVED_KEY),
            "::",
            stringify!(szChoiceReserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_RESERVED_KEY>())).szReservedKey as *const _
                as usize
        },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_RESERVED_KEY),
            "::",
            stringify!(szReservedKey)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_SYSTEM_STATE {
    pub _base: SIMCONNECT_RECV,
    pub dwRequestID: DWORD,
    pub dwInteger: DWORD,
    pub fFloat: f32,
    pub szString: [::std::os::raw::c_char; 260usize],
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_SYSTEM_STATE() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_SYSTEM_STATE>(),
        284usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_SYSTEM_STATE))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_SYSTEM_STATE>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_SYSTEM_STATE))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_SYSTEM_STATE>())).dwRequestID as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_SYSTEM_STATE),
            "::",
            stringify!(dwRequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_SYSTEM_STATE>())).dwInteger as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_SYSTEM_STATE),
            "::",
            stringify!(dwInteger)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_SYSTEM_STATE>())).fFloat as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_SYSTEM_STATE),
            "::",
            stringify!(fFloat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_SYSTEM_STATE>())).szString as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_SYSTEM_STATE),
            "::",
            stringify!(szString)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_CUSTOM_ACTION {
    pub _base: SIMCONNECT_RECV_EVENT,
    pub guidInstanceId: GUID,
    pub dwWaitForCompletion: DWORD,
    pub szPayLoad: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_CUSTOM_ACTION() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_CUSTOM_ACTION>(),
        45usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_CUSTOM_ACTION))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_CUSTOM_ACTION>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_CUSTOM_ACTION))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_CUSTOM_ACTION>())).guidInstanceId as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_CUSTOM_ACTION),
            "::",
            stringify!(guidInstanceId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_CUSTOM_ACTION>())).dwWaitForCompletion
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_CUSTOM_ACTION),
            "::",
            stringify!(dwWaitForCompletion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_CUSTOM_ACTION>())).szPayLoad as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_CUSTOM_ACTION),
            "::",
            stringify!(szPayLoad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_EVENT_WEATHER_MODE {
    pub _base: SIMCONNECT_RECV_EVENT,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_EVENT_WEATHER_MODE() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_EVENT_WEATHER_MODE>(),
        24usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_EVENT_WEATHER_MODE))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_EVENT_WEATHER_MODE>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(SIMCONNECT_RECV_EVENT_WEATHER_MODE)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_FACILITIES_LIST {
    pub _base: SIMCONNECT_RECV,
    pub dwRequestID: DWORD,
    pub dwArraySize: DWORD,
    pub dwEntryNumber: DWORD,
    pub dwOutOf: DWORD,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_FACILITIES_LIST() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_FACILITIES_LIST>(),
        28usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_FACILITIES_LIST))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_FACILITIES_LIST>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_FACILITIES_LIST))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_FACILITIES_LIST>())).dwRequestID as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_FACILITIES_LIST),
            "::",
            stringify!(dwRequestID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_FACILITIES_LIST>())).dwArraySize as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_FACILITIES_LIST),
            "::",
            stringify!(dwArraySize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_FACILITIES_LIST>())).dwEntryNumber as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_FACILITIES_LIST),
            "::",
            stringify!(dwEntryNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_FACILITIES_LIST>())).dwOutOf as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_FACILITIES_LIST),
            "::",
            stringify!(dwOutOf)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_FACILITY_AIRPORT {
    pub Icao: [::std::os::raw::c_char; 9usize],
    pub Latitude: f64,
    pub Longitude: f64,
    pub Altitude: f64,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_DATA_FACILITY_AIRPORT() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_DATA_FACILITY_AIRPORT>(),
        33usize,
        concat!("Size of: ", stringify!(SIMCONNECT_DATA_FACILITY_AIRPORT))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_DATA_FACILITY_AIRPORT>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(SIMCONNECT_DATA_FACILITY_AIRPORT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_FACILITY_AIRPORT>())).Icao as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_FACILITY_AIRPORT),
            "::",
            stringify!(Icao)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_FACILITY_AIRPORT>())).Latitude as *const _
                as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_FACILITY_AIRPORT),
            "::",
            stringify!(Latitude)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_FACILITY_AIRPORT>())).Longitude as *const _
                as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_FACILITY_AIRPORT),
            "::",
            stringify!(Longitude)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_FACILITY_AIRPORT>())).Altitude as *const _
                as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_FACILITY_AIRPORT),
            "::",
            stringify!(Altitude)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_AIRPORT_LIST {
    pub _base: SIMCONNECT_RECV_FACILITIES_LIST,
    pub rgData: [SIMCONNECT_DATA_FACILITY_AIRPORT; 1usize],
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_AIRPORT_LIST() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_AIRPORT_LIST>(),
        61usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_AIRPORT_LIST))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_AIRPORT_LIST>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_AIRPORT_LIST))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_AIRPORT_LIST>())).rgData as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_AIRPORT_LIST),
            "::",
            stringify!(rgData)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_FACILITY_WAYPOINT {
    pub _base: SIMCONNECT_DATA_FACILITY_AIRPORT,
    pub fMagVar: f32,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_DATA_FACILITY_WAYPOINT() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_DATA_FACILITY_WAYPOINT>(),
        37usize,
        concat!("Size of: ", stringify!(SIMCONNECT_DATA_FACILITY_WAYPOINT))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_DATA_FACILITY_WAYPOINT>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(SIMCONNECT_DATA_FACILITY_WAYPOINT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_FACILITY_WAYPOINT>())).fMagVar as *const _
                as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_FACILITY_WAYPOINT),
            "::",
            stringify!(fMagVar)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_WAYPOINT_LIST {
    pub _base: SIMCONNECT_RECV_FACILITIES_LIST,
    pub rgData: [SIMCONNECT_DATA_FACILITY_WAYPOINT; 1usize],
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_WAYPOINT_LIST() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_WAYPOINT_LIST>(),
        65usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_WAYPOINT_LIST))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_WAYPOINT_LIST>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_WAYPOINT_LIST))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_WAYPOINT_LIST>())).rgData as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_WAYPOINT_LIST),
            "::",
            stringify!(rgData)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_FACILITY_NDB {
    pub _base: SIMCONNECT_DATA_FACILITY_WAYPOINT,
    pub fFrequency: DWORD,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_DATA_FACILITY_NDB() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_DATA_FACILITY_NDB>(),
        41usize,
        concat!("Size of: ", stringify!(SIMCONNECT_DATA_FACILITY_NDB))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_DATA_FACILITY_NDB>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_DATA_FACILITY_NDB))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_FACILITY_NDB>())).fFrequency as *const _ as usize
        },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_FACILITY_NDB),
            "::",
            stringify!(fFrequency)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_NDB_LIST {
    pub _base: SIMCONNECT_RECV_FACILITIES_LIST,
    pub rgData: [SIMCONNECT_DATA_FACILITY_NDB; 1usize],
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_NDB_LIST() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_NDB_LIST>(),
        69usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_NDB_LIST))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_NDB_LIST>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_NDB_LIST))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SIMCONNECT_RECV_NDB_LIST>())).rgData as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_NDB_LIST),
            "::",
            stringify!(rgData)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_FACILITY_VOR {
    pub _base: SIMCONNECT_DATA_FACILITY_NDB,
    pub Flags: DWORD,
    pub fLocalizer: f32,
    pub GlideLat: f64,
    pub GlideLon: f64,
    pub GlideAlt: f64,
    pub fGlideSlopeAngle: f32,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_DATA_FACILITY_VOR() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_DATA_FACILITY_VOR>(),
        77usize,
        concat!("Size of: ", stringify!(SIMCONNECT_DATA_FACILITY_VOR))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_DATA_FACILITY_VOR>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_DATA_FACILITY_VOR))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_FACILITY_VOR>())).Flags as *const _ as usize
        },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_FACILITY_VOR),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_FACILITY_VOR>())).fLocalizer as *const _ as usize
        },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_FACILITY_VOR),
            "::",
            stringify!(fLocalizer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_FACILITY_VOR>())).GlideLat as *const _ as usize
        },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_FACILITY_VOR),
            "::",
            stringify!(GlideLat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_FACILITY_VOR>())).GlideLon as *const _ as usize
        },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_FACILITY_VOR),
            "::",
            stringify!(GlideLon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_FACILITY_VOR>())).GlideAlt as *const _ as usize
        },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_FACILITY_VOR),
            "::",
            stringify!(GlideAlt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_FACILITY_VOR>())).fGlideSlopeAngle as *const _
                as usize
        },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_FACILITY_VOR),
            "::",
            stringify!(fGlideSlopeAngle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_VOR_LIST {
    pub _base: SIMCONNECT_RECV_FACILITIES_LIST,
    pub rgData: [SIMCONNECT_DATA_FACILITY_VOR; 1usize],
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_VOR_LIST() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_VOR_LIST>(),
        105usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_VOR_LIST))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_VOR_LIST>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_VOR_LIST))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SIMCONNECT_RECV_VOR_LIST>())).rgData as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_VOR_LIST),
            "::",
            stringify!(rgData)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_FACILITY_DATA {
    pub _base: SIMCONNECT_RECV,
    pub UserRequestId: DWORD,
    pub UniqueRequestId: DWORD,
    pub ParentUniqueRequestId: DWORD,
    pub Type: DWORD,
    pub IsListItem: DWORD,
    pub ItemIndex: DWORD,
    pub ListSize: DWORD,
    pub Data: DWORD,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_FACILITY_DATA() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_FACILITY_DATA>(),
        44usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_FACILITY_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_FACILITY_DATA>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_RECV_FACILITY_DATA))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_FACILITY_DATA>())).UserRequestId as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_FACILITY_DATA),
            "::",
            stringify!(UserRequestId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_FACILITY_DATA>())).UniqueRequestId as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_FACILITY_DATA),
            "::",
            stringify!(UniqueRequestId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_FACILITY_DATA>())).ParentUniqueRequestId
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_FACILITY_DATA),
            "::",
            stringify!(ParentUniqueRequestId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_FACILITY_DATA>())).Type as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_FACILITY_DATA),
            "::",
            stringify!(Type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_FACILITY_DATA>())).IsListItem as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_FACILITY_DATA),
            "::",
            stringify!(IsListItem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_FACILITY_DATA>())).ItemIndex as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_FACILITY_DATA),
            "::",
            stringify!(ItemIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_FACILITY_DATA>())).ListSize as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_FACILITY_DATA),
            "::",
            stringify!(ListSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_FACILITY_DATA>())).Data as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_FACILITY_DATA),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_RECV_FACILITY_DATA_END {
    pub _base: SIMCONNECT_RECV,
    pub RequestId: DWORD,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_RECV_FACILITY_DATA_END() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_RECV_FACILITY_DATA_END>(),
        16usize,
        concat!("Size of: ", stringify!(SIMCONNECT_RECV_FACILITY_DATA_END))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_RECV_FACILITY_DATA_END>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(SIMCONNECT_RECV_FACILITY_DATA_END)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_RECV_FACILITY_DATA_END>())).RequestId as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_RECV_FACILITY_DATA_END),
            "::",
            stringify!(RequestId)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_INITPOSITION {
    pub Latitude: f64,
    pub Longitude: f64,
    pub Altitude: f64,
    pub Pitch: f64,
    pub Bank: f64,
    pub Heading: f64,
    pub OnGround: DWORD,
    pub Airspeed: DWORD,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_DATA_INITPOSITION() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_DATA_INITPOSITION>(),
        56usize,
        concat!("Size of: ", stringify!(SIMCONNECT_DATA_INITPOSITION))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_DATA_INITPOSITION>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_DATA_INITPOSITION))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_INITPOSITION>())).Latitude as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_INITPOSITION),
            "::",
            stringify!(Latitude)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_INITPOSITION>())).Longitude as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_INITPOSITION),
            "::",
            stringify!(Longitude)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_INITPOSITION>())).Altitude as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_INITPOSITION),
            "::",
            stringify!(Altitude)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_INITPOSITION>())).Pitch as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_INITPOSITION),
            "::",
            stringify!(Pitch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_INITPOSITION>())).Bank as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_INITPOSITION),
            "::",
            stringify!(Bank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_INITPOSITION>())).Heading as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_INITPOSITION),
            "::",
            stringify!(Heading)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_INITPOSITION>())).OnGround as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_INITPOSITION),
            "::",
            stringify!(OnGround)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_INITPOSITION>())).Airspeed as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_INITPOSITION),
            "::",
            stringify!(Airspeed)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_MARKERSTATE {
    pub szMarkerName: [::std::os::raw::c_char; 64usize],
    pub dwMarkerState: DWORD,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_DATA_MARKERSTATE() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_DATA_MARKERSTATE>(),
        68usize,
        concat!("Size of: ", stringify!(SIMCONNECT_DATA_MARKERSTATE))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_DATA_MARKERSTATE>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_DATA_MARKERSTATE))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_MARKERSTATE>())).szMarkerName as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_MARKERSTATE),
            "::",
            stringify!(szMarkerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_MARKERSTATE>())).dwMarkerState as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_MARKERSTATE),
            "::",
            stringify!(dwMarkerState)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_WAYPOINT {
    pub Latitude: f64,
    pub Longitude: f64,
    pub Altitude: f64,
    pub Flags: ::std::os::raw::c_ulong,
    pub ktsSpeed: f64,
    pub percentThrottle: f64,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_DATA_WAYPOINT() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_DATA_WAYPOINT>(),
        44usize,
        concat!("Size of: ", stringify!(SIMCONNECT_DATA_WAYPOINT))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_DATA_WAYPOINT>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_DATA_WAYPOINT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_WAYPOINT>())).Latitude as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_WAYPOINT),
            "::",
            stringify!(Latitude)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_WAYPOINT>())).Longitude as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_WAYPOINT),
            "::",
            stringify!(Longitude)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_WAYPOINT>())).Altitude as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_WAYPOINT),
            "::",
            stringify!(Altitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SIMCONNECT_DATA_WAYPOINT>())).Flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_WAYPOINT),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_WAYPOINT>())).ktsSpeed as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_WAYPOINT),
            "::",
            stringify!(ktsSpeed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_WAYPOINT>())).percentThrottle as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_WAYPOINT),
            "::",
            stringify!(percentThrottle)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_LATLONALT {
    pub Latitude: f64,
    pub Longitude: f64,
    pub Altitude: f64,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_DATA_LATLONALT() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_DATA_LATLONALT>(),
        24usize,
        concat!("Size of: ", stringify!(SIMCONNECT_DATA_LATLONALT))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_DATA_LATLONALT>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_DATA_LATLONALT))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_LATLONALT>())).Latitude as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_LATLONALT),
            "::",
            stringify!(Latitude)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_LATLONALT>())).Longitude as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_LATLONALT),
            "::",
            stringify!(Longitude)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SIMCONNECT_DATA_LATLONALT>())).Altitude as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_LATLONALT),
            "::",
            stringify!(Altitude)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct SIMCONNECT_DATA_XYZ {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[test]
fn bindgen_test_layout_SIMCONNECT_DATA_XYZ() {
    assert_eq!(
        ::std::mem::size_of::<SIMCONNECT_DATA_XYZ>(),
        24usize,
        concat!("Size of: ", stringify!(SIMCONNECT_DATA_XYZ))
    );
    assert_eq!(
        ::std::mem::align_of::<SIMCONNECT_DATA_XYZ>(),
        1usize,
        concat!("Alignment of ", stringify!(SIMCONNECT_DATA_XYZ))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SIMCONNECT_DATA_XYZ>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_XYZ),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SIMCONNECT_DATA_XYZ>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_XYZ),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SIMCONNECT_DATA_XYZ>())).z as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SIMCONNECT_DATA_XYZ),
            "::",
            stringify!(z)
        )
    );
}
pub type DispatchProc = ::std::option::Option<
    unsafe extern "C" fn(
        pData: *mut SIMCONNECT_RECV,
        cbData: DWORD,
        pContext: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn SimConnect_MapClientEventToSimEvent(
        hSimConnect: HANDLE,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
        EventName: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_TransmitClientEvent(
        hSimConnect: HANDLE,
        ObjectID: SIMCONNECT_OBJECT_ID,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
        dwData: DWORD,
        GroupID: SIMCONNECT_NOTIFICATION_GROUP_ID,
        Flags: SIMCONNECT_EVENT_FLAG,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SetSystemEventState(
        hSimConnect: HANDLE,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
        dwState: SIMCONNECT_STATE,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AddClientEventToNotificationGroup(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_NOTIFICATION_GROUP_ID,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
        bMaskable: BOOL,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RemoveClientEvent(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_NOTIFICATION_GROUP_ID,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SetNotificationGroupPriority(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_NOTIFICATION_GROUP_ID,
        uPriority: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_ClearNotificationGroup(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_NOTIFICATION_GROUP_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestNotificationGroup(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_NOTIFICATION_GROUP_ID,
        dwReserved: DWORD,
        Flags: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AddToDataDefinition(
        hSimConnect: HANDLE,
        DefineID: SIMCONNECT_DATA_DEFINITION_ID,
        DatumName: *const ::std::os::raw::c_char,
        UnitsName: *const ::std::os::raw::c_char,
        DatumType: SIMCONNECT_DATATYPE,
        fEpsilon: f32,
        DatumID: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_ClearDataDefinition(
        hSimConnect: HANDLE,
        DefineID: SIMCONNECT_DATA_DEFINITION_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestDataOnSimObject(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        DefineID: SIMCONNECT_DATA_DEFINITION_ID,
        ObjectID: SIMCONNECT_OBJECT_ID,
        Period: SIMCONNECT_PERIOD,
        Flags: SIMCONNECT_DATA_REQUEST_FLAG,
        origin: DWORD,
        interval: DWORD,
        limit: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestDataOnSimObjectType(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        DefineID: SIMCONNECT_DATA_DEFINITION_ID,
        dwRadiusMeters: DWORD,
        type_: SIMCONNECT_SIMOBJECT_TYPE,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SetDataOnSimObject(
        hSimConnect: HANDLE,
        DefineID: SIMCONNECT_DATA_DEFINITION_ID,
        ObjectID: SIMCONNECT_OBJECT_ID,
        Flags: SIMCONNECT_DATA_SET_FLAG,
        ArrayCount: DWORD,
        cbUnitSize: DWORD,
        pDataSet: *mut ::std::os::raw::c_void,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_MapInputEventToClientEvent(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_INPUT_GROUP_ID,
        szInputDefinition: *const ::std::os::raw::c_char,
        DownEventID: SIMCONNECT_CLIENT_EVENT_ID,
        DownValue: DWORD,
        UpEventID: SIMCONNECT_CLIENT_EVENT_ID,
        UpValue: DWORD,
        bMaskable: BOOL,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SetInputGroupPriority(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_INPUT_GROUP_ID,
        uPriority: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RemoveInputEvent(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_INPUT_GROUP_ID,
        szInputDefinition: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_ClearInputGroup(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_INPUT_GROUP_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SetInputGroupState(
        hSimConnect: HANDLE,
        GroupID: SIMCONNECT_INPUT_GROUP_ID,
        dwState: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestReservedKey(
        hSimConnect: HANDLE,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
        szKeyChoice1: *const ::std::os::raw::c_char,
        szKeyChoice2: *const ::std::os::raw::c_char,
        szKeyChoice3: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SubscribeToSystemEvent(
        hSimConnect: HANDLE,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
        SystemEventName: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_UnsubscribeFromSystemEvent(
        hSimConnect: HANDLE,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherRequestInterpolatedObservation(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        lat: f32,
        lon: f32,
        alt: f32,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherRequestObservationAtStation(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        szICAO: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherRequestObservationAtNearestStation(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        lat: f32,
        lon: f32,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherCreateStation(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        szICAO: *const ::std::os::raw::c_char,
        szName: *const ::std::os::raw::c_char,
        lat: f32,
        lon: f32,
        alt: f32,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherRemoveStation(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        szICAO: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherSetObservation(
        hSimConnect: HANDLE,
        Seconds: DWORD,
        szMETAR: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherSetModeServer(
        hSimConnect: HANDLE,
        dwPort: DWORD,
        dwSeconds: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherSetModeTheme(
        hSimConnect: HANDLE,
        szThemeName: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherSetModeGlobal(hSimConnect: HANDLE) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherSetModeCustom(hSimConnect: HANDLE) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherSetDynamicUpdateRate(hSimConnect: HANDLE, dwRate: DWORD) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherRequestCloudState(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        minLat: f32,
        minLon: f32,
        minAlt: f32,
        maxLat: f32,
        maxLon: f32,
        maxAlt: f32,
        dwFlags: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherCreateThermal(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        lat: f32,
        lon: f32,
        alt: f32,
        radius: f32,
        height: f32,
        coreRate: f32,
        coreTurbulence: f32,
        sinkRate: f32,
        sinkTurbulence: f32,
        coreSize: f32,
        coreTransitionSize: f32,
        sinkLayerSize: f32,
        sinkTransitionSize: f32,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_WeatherRemoveThermal(
        hSimConnect: HANDLE,
        ObjectID: SIMCONNECT_OBJECT_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AICreateParkedATCAircraft(
        hSimConnect: HANDLE,
        szContainerTitle: *const ::std::os::raw::c_char,
        szTailNumber: *const ::std::os::raw::c_char,
        szAirportID: *const ::std::os::raw::c_char,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AICreateEnrouteATCAircraft(
        hSimConnect: HANDLE,
        szContainerTitle: *const ::std::os::raw::c_char,
        szTailNumber: *const ::std::os::raw::c_char,
        iFlightNumber: ::std::os::raw::c_int,
        szFlightPlanPath: *const ::std::os::raw::c_char,
        dFlightPlanPosition: f64,
        bTouchAndGo: BOOL,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AICreateNonATCAircraft(
        hSimConnect: HANDLE,
        szContainerTitle: *const ::std::os::raw::c_char,
        szTailNumber: *const ::std::os::raw::c_char,
        InitPos: SIMCONNECT_DATA_INITPOSITION,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AICreateSimulatedObject(
        hSimConnect: HANDLE,
        szContainerTitle: *const ::std::os::raw::c_char,
        InitPos: SIMCONNECT_DATA_INITPOSITION,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AIReleaseControl(
        hSimConnect: HANDLE,
        ObjectID: SIMCONNECT_OBJECT_ID,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AIRemoveObject(
        hSimConnect: HANDLE,
        ObjectID: SIMCONNECT_OBJECT_ID,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AISetAircraftFlightPlan(
        hSimConnect: HANDLE,
        ObjectID: SIMCONNECT_OBJECT_ID,
        szFlightPlanPath: *const ::std::os::raw::c_char,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_ExecuteMissionAction(hSimConnect: HANDLE, guidInstanceId: GUID) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_CompleteCustomMissionAction(
        hSimConnect: HANDLE,
        guidInstanceId: GUID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_Close(hSimConnect: HANDLE) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RetrieveString(
        pData: *mut SIMCONNECT_RECV,
        cbData: DWORD,
        pStringV: *mut ::std::os::raw::c_void,
        pszString: *mut *mut ::std::os::raw::c_char,
        pcbString: *mut DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_GetLastSentPacketID(hSimConnect: HANDLE, pdwError: *mut DWORD) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_Open(
        phSimConnect: *mut HANDLE,
        szName: LPCSTR,
        hWnd: HWND,
        UserEventWin32: DWORD,
        hEventHandle: HANDLE,
        ConfigIndex: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_CallDispatch(
        hSimConnect: HANDLE,
        pfcnDispatch: DispatchProc,
        pContext: *mut ::std::os::raw::c_void,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_GetNextDispatch(
        hSimConnect: HANDLE,
        ppData: *mut *mut SIMCONNECT_RECV,
        pcbData: *mut DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestResponseTimes(
        hSimConnect: HANDLE,
        nCount: DWORD,
        fElapsedSeconds: *mut f32,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_InsertString(
        pDest: *mut ::std::os::raw::c_char,
        cbDest: DWORD,
        ppEnd: *mut *mut ::std::os::raw::c_void,
        pcbStringV: *mut DWORD,
        pSource: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_CameraSetRelative6DOF(
        hSimConnect: HANDLE,
        fDeltaX: f32,
        fDeltaY: f32,
        fDeltaZ: f32,
        fPitchDeg: f32,
        fBankDeg: f32,
        fHeadingDeg: f32,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_MenuAddItem(
        hSimConnect: HANDLE,
        szMenuItem: *const ::std::os::raw::c_char,
        MenuEventID: SIMCONNECT_CLIENT_EVENT_ID,
        dwData: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_MenuDeleteItem(
        hSimConnect: HANDLE,
        MenuEventID: SIMCONNECT_CLIENT_EVENT_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_MenuAddSubItem(
        hSimConnect: HANDLE,
        MenuEventID: SIMCONNECT_CLIENT_EVENT_ID,
        szMenuItem: *const ::std::os::raw::c_char,
        SubMenuEventID: SIMCONNECT_CLIENT_EVENT_ID,
        dwData: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_MenuDeleteSubItem(
        hSimConnect: HANDLE,
        MenuEventID: SIMCONNECT_CLIENT_EVENT_ID,
        SubMenuEventID: SIMCONNECT_CLIENT_EVENT_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestSystemState(
        hSimConnect: HANDLE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        szState: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SetSystemState(
        hSimConnect: HANDLE,
        szState: *const ::std::os::raw::c_char,
        dwInteger: DWORD,
        fFloat: f32,
        szString: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_MapClientDataNameToID(
        hSimConnect: HANDLE,
        szClientDataName: *const ::std::os::raw::c_char,
        ClientDataID: SIMCONNECT_CLIENT_DATA_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_CreateClientData(
        hSimConnect: HANDLE,
        ClientDataID: SIMCONNECT_CLIENT_DATA_ID,
        dwSize: DWORD,
        Flags: SIMCONNECT_CREATE_CLIENT_DATA_FLAG,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AddToClientDataDefinition(
        hSimConnect: HANDLE,
        DefineID: SIMCONNECT_CLIENT_DATA_DEFINITION_ID,
        dwOffset: DWORD,
        dwSizeOrType: DWORD,
        fEpsilon: f32,
        DatumID: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_ClearClientDataDefinition(
        hSimConnect: HANDLE,
        DefineID: SIMCONNECT_CLIENT_DATA_DEFINITION_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestClientData(
        hSimConnect: HANDLE,
        ClientDataID: SIMCONNECT_CLIENT_DATA_ID,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        DefineID: SIMCONNECT_CLIENT_DATA_DEFINITION_ID,
        Period: SIMCONNECT_CLIENT_DATA_PERIOD,
        Flags: SIMCONNECT_CLIENT_DATA_REQUEST_FLAG,
        origin: DWORD,
        interval: DWORD,
        limit: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SetClientData(
        hSimConnect: HANDLE,
        ClientDataID: SIMCONNECT_CLIENT_DATA_ID,
        DefineID: SIMCONNECT_CLIENT_DATA_DEFINITION_ID,
        Flags: SIMCONNECT_CLIENT_DATA_SET_FLAG,
        dwReserved: DWORD,
        cbUnitSize: DWORD,
        pDataSet: *mut ::std::os::raw::c_void,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_FlightLoad(
        hSimConnect: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_FlightSave(
        hSimConnect: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
        szTitle: *const ::std::os::raw::c_char,
        szDescription: *const ::std::os::raw::c_char,
        Flags: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_FlightPlanLoad(
        hSimConnect: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_Text(
        hSimConnect: HANDLE,
        type_: SIMCONNECT_TEXT_TYPE,
        fTimeSeconds: f32,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
        cbUnitSize: DWORD,
        pDataSet: *mut ::std::os::raw::c_void,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SubscribeToFacilities(
        hSimConnect: HANDLE,
        type_: SIMCONNECT_FACILITY_LIST_TYPE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_UnsubscribeToFacilities(
        hSimConnect: HANDLE,
        type_: SIMCONNECT_FACILITY_LIST_TYPE,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestFacilitiesList(
        hSimConnect: HANDLE,
        type_: SIMCONNECT_FACILITY_LIST_TYPE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_TransmitClientEvent_EX1(
        hSimConnect: HANDLE,
        ObjectID: SIMCONNECT_OBJECT_ID,
        EventID: SIMCONNECT_CLIENT_EVENT_ID,
        GroupID: SIMCONNECT_NOTIFICATION_GROUP_ID,
        Flags: SIMCONNECT_EVENT_FLAG,
        dwData0: DWORD,
        dwData1: DWORD,
        dwData2: DWORD,
        dwData3: DWORD,
        dwData4: DWORD,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_AddToFacilityDefinition(
        hSimConnect: HANDLE,
        DefineID: SIMCONNECT_DATA_DEFINITION_ID,
        FieldName: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestFacilityData(
        hSimConnect: HANDLE,
        DefineID: SIMCONNECT_DATA_DEFINITION_ID,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
        ICAO: *const ::std::os::raw::c_char,
        Region: *const ::std::os::raw::c_char,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_SubscribeToFacilities_EX1(
        hSimConnect: HANDLE,
        type_: SIMCONNECT_FACILITY_LIST_TYPE,
        newElemInRangeRequestID: SIMCONNECT_DATA_REQUEST_ID,
        oldElemOutRangeRequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_UnsubscribeToFacilities_EX1(
        hSimConnect: HANDLE,
        type_: SIMCONNECT_FACILITY_LIST_TYPE,
        bUnsubscribeNewInRange: bool,
        bUnsubscribeOldOutRange: bool,
    ) -> HRESULT;
}
extern "C" {
    pub fn SimConnect_RequestFacilitiesList_EX1(
        hSimConnect: HANDLE,
        type_: SIMCONNECT_FACILITY_LIST_TYPE,
        RequestID: SIMCONNECT_DATA_REQUEST_ID,
    ) -> HRESULT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
